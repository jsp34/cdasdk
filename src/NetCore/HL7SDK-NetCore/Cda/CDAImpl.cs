//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18052
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HL7SDK.Cda
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using System.ComponentModel;
    using HL7SDK.Xml.Cda;
    
    
    public partial interface IFactory
    {
        
        /// <summary>
        /// Creates and initializes an instanse of the AD class.
        /// </summary>
        IAD CreateAD();
        
        /// <summary>
        /// Creates and initializes an instanse of the ADXP class.
        /// </summary>
        IADXP CreateADXP();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpadditionalLocator class.
        /// </summary>
        IadxpadditionalLocator CreateadxpadditionalLocator();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpbuildingNumberSuffix class.
        /// </summary>
        IadxpbuildingNumberSuffix CreateadxpbuildingNumberSuffix();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcareOf class.
        /// </summary>
        IadxpcareOf CreateadxpcareOf();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcensusTract class.
        /// </summary>
        IadxpcensusTract CreateadxpcensusTract();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcity class.
        /// </summary>
        Iadxpcity Createadxpcity();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcountry class.
        /// </summary>
        Iadxpcountry Createadxpcountry();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcounty class.
        /// </summary>
        Iadxpcounty Createadxpcounty();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdelimiter class.
        /// </summary>
        Iadxpdelimiter Createadxpdelimiter();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryAddressLine class.
        /// </summary>
        IadxpdeliveryAddressLine CreateadxpdeliveryAddressLine();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryInstallationArea class.
        /// </summary>
        IadxpdeliveryInstallationArea CreateadxpdeliveryInstallationArea();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryInstallationQualifier class.
        /// </summary>
        IadxpdeliveryInstallationQualifier CreateadxpdeliveryInstallationQualifier();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryInstallationType class.
        /// </summary>
        IadxpdeliveryInstallationType CreateadxpdeliveryInstallationType();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryMode class.
        /// </summary>
        IadxpdeliveryMode CreateadxpdeliveryMode();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryModeIdentifier class.
        /// </summary>
        IadxpdeliveryModeIdentifier CreateadxpdeliveryModeIdentifier();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdirection class.
        /// </summary>
        Iadxpdirection Createadxpdirection();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxphouseNumber class.
        /// </summary>
        IadxphouseNumber CreateadxphouseNumber();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxphouseNumberNumeric class.
        /// </summary>
        IadxphouseNumberNumeric CreateadxphouseNumberNumeric();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxppostalCode class.
        /// </summary>
        IadxppostalCode CreateadxppostalCode();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxppostBox class.
        /// </summary>
        IadxppostBox CreateadxppostBox();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpprecinct class.
        /// </summary>
        Iadxpprecinct Createadxpprecinct();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstate class.
        /// </summary>
        Iadxpstate Createadxpstate();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetAddressLine class.
        /// </summary>
        IadxpstreetAddressLine CreateadxpstreetAddressLine();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetName class.
        /// </summary>
        IadxpstreetName CreateadxpstreetName();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetNameBase class.
        /// </summary>
        IadxpstreetNameBase CreateadxpstreetNameBase();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetNameType class.
        /// </summary>
        IadxpstreetNameType CreateadxpstreetNameType();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpunitID class.
        /// </summary>
        IadxpunitID CreateadxpunitID();
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpunitType class.
        /// </summary>
        IadxpunitType CreateadxpunitType();
        
        /// <summary>
        /// Creates and initializes an instanse of the ANYNonNull class.
        /// </summary>
        IANYNonNull CreateANYNonNull();
        
        /// <summary>
        /// Creates and initializes an instanse of the BL class.
        /// </summary>
        IBL CreateBL();
        
        /// <summary>
        /// Creates and initializes an instanse of the BN class.
        /// </summary>
        IBN CreateBN();
        
        /// <summary>
        /// Creates and initializes an instanse of the BXIT_CD class.
        /// </summary>
        IBXIT_CD CreateBXIT_CD();
        
        /// <summary>
        /// Creates and initializes an instanse of the BXIT_IVL_PQ class.
        /// </summary>
        IBXIT_IVL_PQ CreateBXIT_IVL_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the CD class.
        /// </summary>
        ICD CreateCD();
        
        /// <summary>
        /// Creates and initializes an instanse of the CE class.
        /// </summary>
        ICE CreateCE();
        
        /// <summary>
        /// Creates and initializes an instanse of the CO class.
        /// </summary>
        ICO CreateCO();
        
        /// <summary>
        /// Creates and initializes an instanse of the CR class.
        /// </summary>
        ICR CreateCR();
        
        /// <summary>
        /// Creates and initializes an instanse of the CS class.
        /// </summary>
        ICS CreateCS();
        
        /// <summary>
        /// Creates and initializes an instanse of the CV class.
        /// </summary>
        ICV CreateCV();
        
        /// <summary>
        /// Creates and initializes an instanse of the ED class.
        /// </summary>
        IED CreateED();
        
        /// <summary>
        /// Creates and initializes an instanse of the EIVL_PPD_TS class.
        /// </summary>
        IEIVL_PPD_TS CreateEIVL_PPD_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the EIVL_TS class.
        /// </summary>
        IEIVL_TS CreateEIVL_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the EIVLevent class.
        /// </summary>
        IEIVLevent CreateEIVLevent();
        
        /// <summary>
        /// Creates and initializes an instanse of the EN class.
        /// </summary>
        IEN CreateEN();
        
        /// <summary>
        /// Creates and initializes an instanse of the endelimiter class.
        /// </summary>
        Iendelimiter Createendelimiter();
        
        /// <summary>
        /// Creates and initializes an instanse of the enfamily class.
        /// </summary>
        Ienfamily Createenfamily();
        
        /// <summary>
        /// Creates and initializes an instanse of the engiven class.
        /// </summary>
        Iengiven Createengiven();
        
        /// <summary>
        /// Creates and initializes an instanse of the enprefix class.
        /// </summary>
        Ienprefix Createenprefix();
        
        /// <summary>
        /// Creates and initializes an instanse of the ensuffix class.
        /// </summary>
        Iensuffix Createensuffix();
        
        /// <summary>
        /// Creates and initializes an instanse of the ENXP class.
        /// </summary>
        IENXP CreateENXP();
        
        /// <summary>
        /// Creates and initializes an instanse of the GLIST_PQ class.
        /// </summary>
        IGLIST_PQ CreateGLIST_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the GLIST_TS class.
        /// </summary>
        IGLIST_TS CreateGLIST_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the HXIT_CE class.
        /// </summary>
        IHXIT_CE CreateHXIT_CE();
        
        /// <summary>
        /// Creates and initializes an instanse of the HXIT_PQ class.
        /// </summary>
        IHXIT_PQ CreateHXIT_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the II class.
        /// </summary>
        III CreateII();
        
        /// <summary>
        /// Creates and initializes an instanse of the INT class.
        /// </summary>
        IINT CreateINT();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_INT class.
        /// </summary>
        IIVL_INT CreateIVL_INT();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_MO class.
        /// </summary>
        IIVL_MO CreateIVL_MO();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_PPD_PQ class.
        /// </summary>
        IIVL_PPD_PQ CreateIVL_PPD_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_PPD_TS class.
        /// </summary>
        IIVL_PPD_TS CreateIVL_PPD_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_PQ class.
        /// </summary>
        IIVL_PQ CreateIVL_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_REAL class.
        /// </summary>
        IIVL_REAL CreateIVL_REAL();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_TS class.
        /// </summary>
        IIVL_TS CreateIVL_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_INT class.
        /// </summary>
        IIVXB_INT CreateIVXB_INT();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_MO class.
        /// </summary>
        IIVXB_MO CreateIVXB_MO();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_PPD_PQ class.
        /// </summary>
        IIVXB_PPD_PQ CreateIVXB_PPD_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_PPD_TS class.
        /// </summary>
        IIVXB_PPD_TS CreateIVXB_PPD_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_PQ class.
        /// </summary>
        IIVXB_PQ CreateIVXB_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_REAL class.
        /// </summary>
        IIVXB_REAL CreateIVXB_REAL();
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_TS class.
        /// </summary>
        IIVXB_TS CreateIVXB_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the MO class.
        /// </summary>
        IMO CreateMO();
        
        /// <summary>
        /// Creates and initializes an instanse of the ON class.
        /// </summary>
        ION CreateON();
        
        /// <summary>
        /// Creates and initializes an instanse of the PIVL_PPD_TS class.
        /// </summary>
        IPIVL_PPD_TS CreatePIVL_PPD_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the PIVL_TS class.
        /// </summary>
        IPIVL_TS CreatePIVL_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the PN class.
        /// </summary>
        IPN CreatePN();
        
        /// <summary>
        /// Creates and initializes an instanse of the Act class.
        /// </summary>
        IAct CreateAct();
        
        /// <summary>
        /// Creates and initializes an instanse of the AssignedAuthor class.
        /// </summary>
        IAssignedAuthor CreateAssignedAuthor();
        
        /// <summary>
        /// Creates and initializes an instanse of the AssignedCustodian class.
        /// </summary>
        IAssignedCustodian CreateAssignedCustodian();
        
        /// <summary>
        /// Creates and initializes an instanse of the AssignedEntity class.
        /// </summary>
        IAssignedEntity CreateAssignedEntity();
        
        /// <summary>
        /// Creates and initializes an instanse of the AssociatedEntity class.
        /// </summary>
        IAssociatedEntity CreateAssociatedEntity();
        
        /// <summary>
        /// Creates and initializes an instanse of the Authenticator class.
        /// </summary>
        IAuthenticator CreateAuthenticator();
        
        /// <summary>
        /// Creates and initializes an instanse of the Author class.
        /// </summary>
        IAuthor CreateAuthor();
        
        /// <summary>
        /// Creates and initializes an instanse of the AuthoringDevice class.
        /// </summary>
        IAuthoringDevice CreateAuthoringDevice();
        
        /// <summary>
        /// Creates and initializes an instanse of the Authorization class.
        /// </summary>
        IAuthorization CreateAuthorization();
        
        /// <summary>
        /// Creates and initializes an instanse of the Birthplace class.
        /// </summary>
        IBirthplace CreateBirthplace();
        
        /// <summary>
        /// Creates and initializes an instanse of the ClinicalDocument class.
        /// </summary>
        IClinicalDocument CreateClinicalDocument();
        
        /// <summary>
        /// Creates and initializes an instanse of the Component1 class.
        /// </summary>
        IComponent1 CreateComponent1();
        
        /// <summary>
        /// Creates and initializes an instanse of the Component2 class.
        /// </summary>
        IComponent2 CreateComponent2();
        
        /// <summary>
        /// Creates and initializes an instanse of the Component3 class.
        /// </summary>
        IComponent3 CreateComponent3();
        
        /// <summary>
        /// Creates and initializes an instanse of the Component4 class.
        /// </summary>
        IComponent4 CreateComponent4();
        
        /// <summary>
        /// Creates and initializes an instanse of the Component5 class.
        /// </summary>
        IComponent5 CreateComponent5();
        
        /// <summary>
        /// Creates and initializes an instanse of the Consent class.
        /// </summary>
        IConsent CreateConsent();
        
        /// <summary>
        /// Creates and initializes an instanse of the Consumable class.
        /// </summary>
        IConsumable CreateConsumable();
        
        /// <summary>
        /// Creates and initializes an instanse of the Criterion class.
        /// </summary>
        ICriterion CreateCriterion();
        
        /// <summary>
        /// Creates and initializes an instanse of the Custodian class.
        /// </summary>
        ICustodian CreateCustodian();
        
        /// <summary>
        /// Creates and initializes an instanse of the CustodianOrganization class.
        /// </summary>
        ICustodianOrganization CreateCustodianOrganization();
        
        /// <summary>
        /// Creates and initializes an instanse of the DataEnterer class.
        /// </summary>
        IDataEnterer CreateDataEnterer();
        
        /// <summary>
        /// Creates and initializes an instanse of the Device class.
        /// </summary>
        IDevice CreateDevice();
        
        /// <summary>
        /// Creates and initializes an instanse of the DocumentationOf class.
        /// </summary>
        IDocumentationOf CreateDocumentationOf();
        
        /// <summary>
        /// Creates and initializes an instanse of the EncompassingEncounter class.
        /// </summary>
        IEncompassingEncounter CreateEncompassingEncounter();
        
        /// <summary>
        /// Creates and initializes an instanse of the Encounter class.
        /// </summary>
        IEncounter CreateEncounter();
        
        /// <summary>
        /// Creates and initializes an instanse of the EncounterParticipant class.
        /// </summary>
        IEncounterParticipant CreateEncounterParticipant();
        
        /// <summary>
        /// Creates and initializes an instanse of the Entity class.
        /// </summary>
        IEntity CreateEntity();
        
        /// <summary>
        /// Creates and initializes an instanse of the Entry class.
        /// </summary>
        IEntry CreateEntry();
        
        /// <summary>
        /// Creates and initializes an instanse of the EntryRelationship class.
        /// </summary>
        IEntryRelationship CreateEntryRelationship();
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalAct class.
        /// </summary>
        IExternalAct CreateExternalAct();
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalDocument class.
        /// </summary>
        IExternalDocument CreateExternalDocument();
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalObservation class.
        /// </summary>
        IExternalObservation CreateExternalObservation();
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalProcedure class.
        /// </summary>
        IExternalProcedure CreateExternalProcedure();
        
        /// <summary>
        /// Creates and initializes an instanse of the Guardian class.
        /// </summary>
        IGuardian CreateGuardian();
        
        /// <summary>
        /// Creates and initializes an instanse of the HealthCareFacility class.
        /// </summary>
        IHealthCareFacility CreateHealthCareFacility();
        
        /// <summary>
        /// Creates and initializes an instanse of the Informant12 class.
        /// </summary>
        IInformant12 CreateInformant12();
        
        /// <summary>
        /// Creates and initializes an instanse of the InformationRecipient class.
        /// </summary>
        IInformationRecipient CreateInformationRecipient();
        
        /// <summary>
        /// Creates and initializes an instanse of the InfrastructureRoottypeId class.
        /// </summary>
        IInfrastructureRoottypeId CreateInfrastructureRoottypeId();
        
        /// <summary>
        /// Creates and initializes an instanse of the InFulfillmentOf class.
        /// </summary>
        IInFulfillmentOf CreateInFulfillmentOf();
        
        /// <summary>
        /// Creates and initializes an instanse of the IntendedRecipient class.
        /// </summary>
        IIntendedRecipient CreateIntendedRecipient();
        
        /// <summary>
        /// Creates and initializes an instanse of the LabeledDrug class.
        /// </summary>
        ILabeledDrug CreateLabeledDrug();
        
        /// <summary>
        /// Creates and initializes an instanse of the LanguageCommunication class.
        /// </summary>
        ILanguageCommunication CreateLanguageCommunication();
        
        /// <summary>
        /// Creates and initializes an instanse of the LegalAuthenticator class.
        /// </summary>
        ILegalAuthenticator CreateLegalAuthenticator();
        
        /// <summary>
        /// Creates and initializes an instanse of the Location class.
        /// </summary>
        ILocation CreateLocation();
        
        /// <summary>
        /// Creates and initializes an instanse of the MaintainedEntity class.
        /// </summary>
        IMaintainedEntity CreateMaintainedEntity();
        
        /// <summary>
        /// Creates and initializes an instanse of the ManufacturedProduct class.
        /// </summary>
        IManufacturedProduct CreateManufacturedProduct();
        
        /// <summary>
        /// Creates and initializes an instanse of the Material class.
        /// </summary>
        IMaterial CreateMaterial();
        
        /// <summary>
        /// Creates and initializes an instanse of the NonXMLBody class.
        /// </summary>
        INonXMLBody CreateNonXMLBody();
        
        /// <summary>
        /// Creates and initializes an instanse of the Observation class.
        /// </summary>
        IObservation CreateObservation();
        
        /// <summary>
        /// Creates and initializes an instanse of the ObservationMedia class.
        /// </summary>
        IObservationMedia CreateObservationMedia();
        
        /// <summary>
        /// Creates and initializes an instanse of the ObservationRange class.
        /// </summary>
        IObservationRange CreateObservationRange();
        
        /// <summary>
        /// Creates and initializes an instanse of the Order class.
        /// </summary>
        IOrder CreateOrder();
        
        /// <summary>
        /// Creates and initializes an instanse of the Organization class.
        /// </summary>
        IOrganization CreateOrganization();
        
        /// <summary>
        /// Creates and initializes an instanse of the OrganizationPartOf class.
        /// </summary>
        IOrganizationPartOf CreateOrganizationPartOf();
        
        /// <summary>
        /// Creates and initializes an instanse of the Organizer class.
        /// </summary>
        IOrganizer CreateOrganizer();
        
        /// <summary>
        /// Creates and initializes an instanse of the ParentDocument class.
        /// </summary>
        IParentDocument CreateParentDocument();
        
        /// <summary>
        /// Creates and initializes an instanse of the Participant1 class.
        /// </summary>
        IParticipant1 CreateParticipant1();
        
        /// <summary>
        /// Creates and initializes an instanse of the Participant2 class.
        /// </summary>
        IParticipant2 CreateParticipant2();
        
        /// <summary>
        /// Creates and initializes an instanse of the ParticipantRole class.
        /// </summary>
        IParticipantRole CreateParticipantRole();
        
        /// <summary>
        /// Creates and initializes an instanse of the Patient class.
        /// </summary>
        IPatient CreatePatient();
        
        /// <summary>
        /// Creates and initializes an instanse of the PatientRole class.
        /// </summary>
        IPatientRole CreatePatientRole();
        
        /// <summary>
        /// Creates and initializes an instanse of the Performer1 class.
        /// </summary>
        IPerformer1 CreatePerformer1();
        
        /// <summary>
        /// Creates and initializes an instanse of the Performer2 class.
        /// </summary>
        IPerformer2 CreatePerformer2();
        
        /// <summary>
        /// Creates and initializes an instanse of the Person class.
        /// </summary>
        IPerson CreatePerson();
        
        /// <summary>
        /// Creates and initializes an instanse of the Place class.
        /// </summary>
        IPlace CreatePlace();
        
        /// <summary>
        /// Creates and initializes an instanse of the PlayingEntity class.
        /// </summary>
        IPlayingEntity CreatePlayingEntity();
        
        /// <summary>
        /// Creates and initializes an instanse of the Precondition class.
        /// </summary>
        IPrecondition CreatePrecondition();
        
        /// <summary>
        /// Creates and initializes an instanse of the Procedure class.
        /// </summary>
        IProcedure CreateProcedure();
        
        /// <summary>
        /// Creates and initializes an instanse of the Product class.
        /// </summary>
        IProduct CreateProduct();
        
        /// <summary>
        /// Creates and initializes an instanse of the RecordTarget class.
        /// </summary>
        IRecordTarget CreateRecordTarget();
        
        /// <summary>
        /// Creates and initializes an instanse of the Reference class.
        /// </summary>
        IReference CreateReference();
        
        /// <summary>
        /// Creates and initializes an instanse of the ReferenceRange class.
        /// </summary>
        IReferenceRange CreateReferenceRange();
        
        /// <summary>
        /// Creates and initializes an instanse of the RegionOfInterest class.
        /// </summary>
        IRegionOfInterest CreateRegionOfInterest();
        
        /// <summary>
        /// Creates and initializes an instanse of the RegionOfInterestvalue class.
        /// </summary>
        IRegionOfInterestvalue CreateRegionOfInterestvalue();
        
        /// <summary>
        /// Creates and initializes an instanse of the RelatedDocument class.
        /// </summary>
        IRelatedDocument CreateRelatedDocument();
        
        /// <summary>
        /// Creates and initializes an instanse of the RelatedEntity class.
        /// </summary>
        IRelatedEntity CreateRelatedEntity();
        
        /// <summary>
        /// Creates and initializes an instanse of the RelatedSubject class.
        /// </summary>
        IRelatedSubject CreateRelatedSubject();
        
        /// <summary>
        /// Creates and initializes an instanse of the ResponsibleParty class.
        /// </summary>
        IResponsibleParty CreateResponsibleParty();
        
        /// <summary>
        /// Creates and initializes an instanse of the Section class.
        /// </summary>
        ISection CreateSection();
        
        /// <summary>
        /// Creates and initializes an instanse of the ServiceEvent class.
        /// </summary>
        IServiceEvent CreateServiceEvent();
        
        /// <summary>
        /// Creates and initializes an instanse of the Specimen class.
        /// </summary>
        ISpecimen CreateSpecimen();
        
        /// <summary>
        /// Creates and initializes an instanse of the SpecimenRole class.
        /// </summary>
        ISpecimenRole CreateSpecimenRole();
        
        /// <summary>
        /// Creates and initializes an instanse of the StructuredBody class.
        /// </summary>
        IStructuredBody CreateStructuredBody();
        
        /// <summary>
        /// Creates and initializes an instanse of the Subject class.
        /// </summary>
        ISubject CreateSubject();
        
        /// <summary>
        /// Creates and initializes an instanse of the SubjectPerson class.
        /// </summary>
        ISubjectPerson CreateSubjectPerson();
        
        /// <summary>
        /// Creates and initializes an instanse of the SubstanceAdministration class.
        /// </summary>
        ISubstanceAdministration CreateSubstanceAdministration();
        
        /// <summary>
        /// Creates and initializes an instanse of the Supply class.
        /// </summary>
        ISupply CreateSupply();
        
        /// <summary>
        /// Creates and initializes an instanse of the PPD_PQ class.
        /// </summary>
        IPPD_PQ CreatePPD_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the PPD_TS class.
        /// </summary>
        IPPD_TS CreatePPD_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the PQ class.
        /// </summary>
        IPQ CreatePQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the PQR class.
        /// </summary>
        IPQR CreatePQR();
        
        /// <summary>
        /// Creates and initializes an instanse of the REAL class.
        /// </summary>
        IREAL CreateREAL();
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO class.
        /// </summary>
        IRTO CreateRTO();
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO_MO_PQ class.
        /// </summary>
        IRTO_MO_PQ CreateRTO_MO_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO_PQ_PQ class.
        /// </summary>
        IRTO_PQ_PQ CreateRTO_PQ_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO_QTY_QTY class.
        /// </summary>
        IRTO_QTY_QTY CreateRTO_QTY_QTY();
        
        /// <summary>
        /// Creates and initializes an instanse of the SC class.
        /// </summary>
        ISC CreateSC();
        
        /// <summary>
        /// Creates and initializes an instanse of the SLIST_PQ class.
        /// </summary>
        ISLIST_PQ CreateSLIST_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the SLIST_TS class.
        /// </summary>
        ISLIST_TS CreateSLIST_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the ST class.
        /// </summary>
        IST CreateST();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocBr class.
        /// </summary>
        IStrucDocBr CreateStrucDocBr();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocCaption class.
        /// </summary>
        IStrucDocCaption CreateStrucDocCaption();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocCol class.
        /// </summary>
        IStrucDocCol CreateStrucDocCol();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocColgroup class.
        /// </summary>
        IStrucDocColgroup CreateStrucDocColgroup();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocContent class.
        /// </summary>
        IStrucDocContent CreateStrucDocContent();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocFootnote class.
        /// </summary>
        IStrucDocFootnote CreateStrucDocFootnote();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocFootnoteRef class.
        /// </summary>
        IStrucDocFootnoteRef CreateStrucDocFootnoteRef();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocItem class.
        /// </summary>
        IStrucDocItem CreateStrucDocItem();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocLinkHtml class.
        /// </summary>
        IStrucDocLinkHtml CreateStrucDocLinkHtml();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocList class.
        /// </summary>
        IStrucDocList CreateStrucDocList();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocParagraph class.
        /// </summary>
        IStrucDocParagraph CreateStrucDocParagraph();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocRenderMultiMedia class.
        /// </summary>
        IStrucDocRenderMultiMedia CreateStrucDocRenderMultiMedia();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocSub class.
        /// </summary>
        IStrucDocSub CreateStrucDocSub();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocSup class.
        /// </summary>
        IStrucDocSup CreateStrucDocSup();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTable class.
        /// </summary>
        IStrucDocTable CreateStrucDocTable();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTbody class.
        /// </summary>
        IStrucDocTbody CreateStrucDocTbody();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTd class.
        /// </summary>
        IStrucDocTd CreateStrucDocTd();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocText class.
        /// </summary>
        IStrucDocText CreateStrucDocText();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTfoot class.
        /// </summary>
        IStrucDocTfoot CreateStrucDocTfoot();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTh class.
        /// </summary>
        IStrucDocTh CreateStrucDocTh();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocThead class.
        /// </summary>
        IStrucDocThead CreateStrucDocThead();
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTr class.
        /// </summary>
        IStrucDocTr CreateStrucDocTr();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_CD class.
        /// </summary>
        ISXCM_CD CreateSXCM_CD();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_INT class.
        /// </summary>
        ISXCM_INT CreateSXCM_INT();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_MO class.
        /// </summary>
        ISXCM_MO CreateSXCM_MO();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_PPD_PQ class.
        /// </summary>
        ISXCM_PPD_PQ CreateSXCM_PPD_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_PPD_TS class.
        /// </summary>
        ISXCM_PPD_TS CreateSXCM_PPD_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_PQ class.
        /// </summary>
        ISXCM_PQ CreateSXCM_PQ();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_REAL class.
        /// </summary>
        ISXCM_REAL CreateSXCM_REAL();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_TS class.
        /// </summary>
        ISXCM_TS CreateSXCM_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the SXPR_TS class.
        /// </summary>
        ISXPR_TS CreateSXPR_TS();
        
        /// <summary>
        /// Creates and initializes an instanse of the TEL class.
        /// </summary>
        ITEL CreateTEL();
        
        /// <summary>
        /// Creates and initializes an instanse of the thumbnail class.
        /// </summary>
        Ithumbnail Createthumbnail();
        
        /// <summary>
        /// Creates and initializes an instanse of the TN class.
        /// </summary>
        ITN CreateTN();
        
        /// <summary>
        /// Creates and initializes an instanse of the TS class.
        /// </summary>
        ITS CreateTS();
        
        /// <summary>
        /// Creates and initializes an instanse of the UVP_TS class.
        /// </summary>
        IUVP_TS CreateUVP_TS();
    }
    
    public partial class Factory
    {
        
        /// <summary>
        /// Creates and initializes an instanse of the AD class.
        /// </summary>
        public virtual IAD CreateAD()
        {
            return new AD();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ADXP class.
        /// </summary>
        public virtual IADXP CreateADXP()
        {
            return new ADXP();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpadditionalLocator class.
        /// </summary>
        public virtual IadxpadditionalLocator CreateadxpadditionalLocator()
        {
            return new adxpadditionalLocator();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpbuildingNumberSuffix class.
        /// </summary>
        public virtual IadxpbuildingNumberSuffix CreateadxpbuildingNumberSuffix()
        {
            return new adxpbuildingNumberSuffix();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcareOf class.
        /// </summary>
        public virtual IadxpcareOf CreateadxpcareOf()
        {
            return new adxpcareOf();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcensusTract class.
        /// </summary>
        public virtual IadxpcensusTract CreateadxpcensusTract()
        {
            return new adxpcensusTract();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcity class.
        /// </summary>
        public virtual Iadxpcity Createadxpcity()
        {
            return new adxpcity();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcountry class.
        /// </summary>
        public virtual Iadxpcountry Createadxpcountry()
        {
            return new adxpcountry();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpcounty class.
        /// </summary>
        public virtual Iadxpcounty Createadxpcounty()
        {
            return new adxpcounty();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdelimiter class.
        /// </summary>
        public virtual Iadxpdelimiter Createadxpdelimiter()
        {
            return new adxpdelimiter();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryAddressLine class.
        /// </summary>
        public virtual IadxpdeliveryAddressLine CreateadxpdeliveryAddressLine()
        {
            return new adxpdeliveryAddressLine();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryInstallationArea class.
        /// </summary>
        public virtual IadxpdeliveryInstallationArea CreateadxpdeliveryInstallationArea()
        {
            return new adxpdeliveryInstallationArea();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryInstallationQualifier class.
        /// </summary>
        public virtual IadxpdeliveryInstallationQualifier CreateadxpdeliveryInstallationQualifier()
        {
            return new adxpdeliveryInstallationQualifier();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryInstallationType class.
        /// </summary>
        public virtual IadxpdeliveryInstallationType CreateadxpdeliveryInstallationType()
        {
            return new adxpdeliveryInstallationType();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryMode class.
        /// </summary>
        public virtual IadxpdeliveryMode CreateadxpdeliveryMode()
        {
            return new adxpdeliveryMode();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdeliveryModeIdentifier class.
        /// </summary>
        public virtual IadxpdeliveryModeIdentifier CreateadxpdeliveryModeIdentifier()
        {
            return new adxpdeliveryModeIdentifier();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpdirection class.
        /// </summary>
        public virtual Iadxpdirection Createadxpdirection()
        {
            return new adxpdirection();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxphouseNumber class.
        /// </summary>
        public virtual IadxphouseNumber CreateadxphouseNumber()
        {
            return new adxphouseNumber();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxphouseNumberNumeric class.
        /// </summary>
        public virtual IadxphouseNumberNumeric CreateadxphouseNumberNumeric()
        {
            return new adxphouseNumberNumeric();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxppostalCode class.
        /// </summary>
        public virtual IadxppostalCode CreateadxppostalCode()
        {
            return new adxppostalCode();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxppostBox class.
        /// </summary>
        public virtual IadxppostBox CreateadxppostBox()
        {
            return new adxppostBox();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpprecinct class.
        /// </summary>
        public virtual Iadxpprecinct Createadxpprecinct()
        {
            return new adxpprecinct();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstate class.
        /// </summary>
        public virtual Iadxpstate Createadxpstate()
        {
            return new adxpstate();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetAddressLine class.
        /// </summary>
        public virtual IadxpstreetAddressLine CreateadxpstreetAddressLine()
        {
            return new adxpstreetAddressLine();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetName class.
        /// </summary>
        public virtual IadxpstreetName CreateadxpstreetName()
        {
            return new adxpstreetName();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetNameBase class.
        /// </summary>
        public virtual IadxpstreetNameBase CreateadxpstreetNameBase()
        {
            return new adxpstreetNameBase();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpstreetNameType class.
        /// </summary>
        public virtual IadxpstreetNameType CreateadxpstreetNameType()
        {
            return new adxpstreetNameType();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpunitID class.
        /// </summary>
        public virtual IadxpunitID CreateadxpunitID()
        {
            return new adxpunitID();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the adxpunitType class.
        /// </summary>
        public virtual IadxpunitType CreateadxpunitType()
        {
            return new adxpunitType();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ANYNonNull class.
        /// </summary>
        public virtual IANYNonNull CreateANYNonNull()
        {
            return new ANYNonNull();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the BL class.
        /// </summary>
        public virtual IBL CreateBL()
        {
            return new BL();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the BN class.
        /// </summary>
        public virtual IBN CreateBN()
        {
            return new BN();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the BXIT_CD class.
        /// </summary>
        public virtual IBXIT_CD CreateBXIT_CD()
        {
            return new BXIT_CD();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the BXIT_IVL_PQ class.
        /// </summary>
        public virtual IBXIT_IVL_PQ CreateBXIT_IVL_PQ()
        {
            return new BXIT_IVL_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the CD class.
        /// </summary>
        public virtual ICD CreateCD()
        {
            return new CD();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the CE class.
        /// </summary>
        public virtual ICE CreateCE()
        {
            return new CE();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the CO class.
        /// </summary>
        public virtual ICO CreateCO()
        {
            return new CO();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the CR class.
        /// </summary>
        public virtual ICR CreateCR()
        {
            return new CR();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the CS class.
        /// </summary>
        public virtual ICS CreateCS()
        {
            return new CS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the CV class.
        /// </summary>
        public virtual ICV CreateCV()
        {
            return new CV();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ED class.
        /// </summary>
        public virtual IED CreateED()
        {
            return new ED();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the EIVL_PPD_TS class.
        /// </summary>
        public virtual IEIVL_PPD_TS CreateEIVL_PPD_TS()
        {
            return new EIVL_PPD_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the EIVL_TS class.
        /// </summary>
        public virtual IEIVL_TS CreateEIVL_TS()
        {
            return new EIVL_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the EIVLevent class.
        /// </summary>
        public virtual IEIVLevent CreateEIVLevent()
        {
            return new EIVLevent();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the EN class.
        /// </summary>
        public virtual IEN CreateEN()
        {
            return new EN();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the endelimiter class.
        /// </summary>
        public virtual Iendelimiter Createendelimiter()
        {
            return new endelimiter();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the enfamily class.
        /// </summary>
        public virtual Ienfamily Createenfamily()
        {
            return new enfamily();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the engiven class.
        /// </summary>
        public virtual Iengiven Createengiven()
        {
            return new engiven();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the enprefix class.
        /// </summary>
        public virtual Ienprefix Createenprefix()
        {
            return new enprefix();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ensuffix class.
        /// </summary>
        public virtual Iensuffix Createensuffix()
        {
            return new ensuffix();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ENXP class.
        /// </summary>
        public virtual IENXP CreateENXP()
        {
            return new ENXP();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the GLIST_PQ class.
        /// </summary>
        public virtual IGLIST_PQ CreateGLIST_PQ()
        {
            return new GLIST_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the GLIST_TS class.
        /// </summary>
        public virtual IGLIST_TS CreateGLIST_TS()
        {
            return new GLIST_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the HXIT_CE class.
        /// </summary>
        public virtual IHXIT_CE CreateHXIT_CE()
        {
            return new HXIT_CE();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the HXIT_PQ class.
        /// </summary>
        public virtual IHXIT_PQ CreateHXIT_PQ()
        {
            return new HXIT_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the II class.
        /// </summary>
        public virtual III CreateII()
        {
            return new II();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the INT class.
        /// </summary>
        public virtual IINT CreateINT()
        {
            return new INT();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_INT class.
        /// </summary>
        public virtual IIVL_INT CreateIVL_INT()
        {
            return new IVL_INT();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_MO class.
        /// </summary>
        public virtual IIVL_MO CreateIVL_MO()
        {
            return new IVL_MO();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_PPD_PQ class.
        /// </summary>
        public virtual IIVL_PPD_PQ CreateIVL_PPD_PQ()
        {
            return new IVL_PPD_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_PPD_TS class.
        /// </summary>
        public virtual IIVL_PPD_TS CreateIVL_PPD_TS()
        {
            return new IVL_PPD_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_PQ class.
        /// </summary>
        public virtual IIVL_PQ CreateIVL_PQ()
        {
            return new IVL_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_REAL class.
        /// </summary>
        public virtual IIVL_REAL CreateIVL_REAL()
        {
            return new IVL_REAL();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVL_TS class.
        /// </summary>
        public virtual IIVL_TS CreateIVL_TS()
        {
            return new IVL_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_INT class.
        /// </summary>
        public virtual IIVXB_INT CreateIVXB_INT()
        {
            return new IVXB_INT();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_MO class.
        /// </summary>
        public virtual IIVXB_MO CreateIVXB_MO()
        {
            return new IVXB_MO();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_PPD_PQ class.
        /// </summary>
        public virtual IIVXB_PPD_PQ CreateIVXB_PPD_PQ()
        {
            return new IVXB_PPD_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_PPD_TS class.
        /// </summary>
        public virtual IIVXB_PPD_TS CreateIVXB_PPD_TS()
        {
            return new IVXB_PPD_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_PQ class.
        /// </summary>
        public virtual IIVXB_PQ CreateIVXB_PQ()
        {
            return new IVXB_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_REAL class.
        /// </summary>
        public virtual IIVXB_REAL CreateIVXB_REAL()
        {
            return new IVXB_REAL();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IVXB_TS class.
        /// </summary>
        public virtual IIVXB_TS CreateIVXB_TS()
        {
            return new IVXB_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the MO class.
        /// </summary>
        public virtual IMO CreateMO()
        {
            return new MO();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ON class.
        /// </summary>
        public virtual ION CreateON()
        {
            return new ON();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PIVL_PPD_TS class.
        /// </summary>
        public virtual IPIVL_PPD_TS CreatePIVL_PPD_TS()
        {
            return new PIVL_PPD_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PIVL_TS class.
        /// </summary>
        public virtual IPIVL_TS CreatePIVL_TS()
        {
            return new PIVL_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PN class.
        /// </summary>
        public virtual IPN CreatePN()
        {
            return new PN();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Act class.
        /// </summary>
        public virtual IAct CreateAct()
        {
            return new Act();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the AssignedAuthor class.
        /// </summary>
        public virtual IAssignedAuthor CreateAssignedAuthor()
        {
            return new AssignedAuthor();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the AssignedCustodian class.
        /// </summary>
        public virtual IAssignedCustodian CreateAssignedCustodian()
        {
            return new AssignedCustodian();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the AssignedEntity class.
        /// </summary>
        public virtual IAssignedEntity CreateAssignedEntity()
        {
            return new AssignedEntity();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the AssociatedEntity class.
        /// </summary>
        public virtual IAssociatedEntity CreateAssociatedEntity()
        {
            return new AssociatedEntity();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Authenticator class.
        /// </summary>
        public virtual IAuthenticator CreateAuthenticator()
        {
            return new Authenticator();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Author class.
        /// </summary>
        public virtual IAuthor CreateAuthor()
        {
            return new Author();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the AuthoringDevice class.
        /// </summary>
        public virtual IAuthoringDevice CreateAuthoringDevice()
        {
            return new AuthoringDevice();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Authorization class.
        /// </summary>
        public virtual IAuthorization CreateAuthorization()
        {
            return new Authorization();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Birthplace class.
        /// </summary>
        public virtual IBirthplace CreateBirthplace()
        {
            return new Birthplace();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ClinicalDocument class.
        /// </summary>
        public virtual IClinicalDocument CreateClinicalDocument()
        {
            return new ClinicalDocument();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Component1 class.
        /// </summary>
        public virtual IComponent1 CreateComponent1()
        {
            return new Component1();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Component2 class.
        /// </summary>
        public virtual IComponent2 CreateComponent2()
        {
            return new Component2();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Component3 class.
        /// </summary>
        public virtual IComponent3 CreateComponent3()
        {
            return new Component3();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Component4 class.
        /// </summary>
        public virtual IComponent4 CreateComponent4()
        {
            return new Component4();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Component5 class.
        /// </summary>
        public virtual IComponent5 CreateComponent5()
        {
            return new Component5();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Consent class.
        /// </summary>
        public virtual IConsent CreateConsent()
        {
            return new Consent();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Consumable class.
        /// </summary>
        public virtual IConsumable CreateConsumable()
        {
            return new Consumable();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Criterion class.
        /// </summary>
        public virtual ICriterion CreateCriterion()
        {
            return new Criterion();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Custodian class.
        /// </summary>
        public virtual ICustodian CreateCustodian()
        {
            return new Custodian();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the CustodianOrganization class.
        /// </summary>
        public virtual ICustodianOrganization CreateCustodianOrganization()
        {
            return new CustodianOrganization();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the DataEnterer class.
        /// </summary>
        public virtual IDataEnterer CreateDataEnterer()
        {
            return new DataEnterer();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Device class.
        /// </summary>
        public virtual IDevice CreateDevice()
        {
            return new Device();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the DocumentationOf class.
        /// </summary>
        public virtual IDocumentationOf CreateDocumentationOf()
        {
            return new DocumentationOf();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the EncompassingEncounter class.
        /// </summary>
        public virtual IEncompassingEncounter CreateEncompassingEncounter()
        {
            return new EncompassingEncounter();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Encounter class.
        /// </summary>
        public virtual IEncounter CreateEncounter()
        {
            return new Encounter();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the EncounterParticipant class.
        /// </summary>
        public virtual IEncounterParticipant CreateEncounterParticipant()
        {
            return new EncounterParticipant();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Entity class.
        /// </summary>
        public virtual IEntity CreateEntity()
        {
            return new Entity();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Entry class.
        /// </summary>
        public virtual IEntry CreateEntry()
        {
            return new Entry();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the EntryRelationship class.
        /// </summary>
        public virtual IEntryRelationship CreateEntryRelationship()
        {
            return new EntryRelationship();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalAct class.
        /// </summary>
        public virtual IExternalAct CreateExternalAct()
        {
            return new ExternalAct();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalDocument class.
        /// </summary>
        public virtual IExternalDocument CreateExternalDocument()
        {
            return new ExternalDocument();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalObservation class.
        /// </summary>
        public virtual IExternalObservation CreateExternalObservation()
        {
            return new ExternalObservation();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ExternalProcedure class.
        /// </summary>
        public virtual IExternalProcedure CreateExternalProcedure()
        {
            return new ExternalProcedure();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Guardian class.
        /// </summary>
        public virtual IGuardian CreateGuardian()
        {
            return new Guardian();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the HealthCareFacility class.
        /// </summary>
        public virtual IHealthCareFacility CreateHealthCareFacility()
        {
            return new HealthCareFacility();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Informant12 class.
        /// </summary>
        public virtual IInformant12 CreateInformant12()
        {
            return new Informant12();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the InformationRecipient class.
        /// </summary>
        public virtual IInformationRecipient CreateInformationRecipient()
        {
            return new InformationRecipient();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the InfrastructureRoottypeId class.
        /// </summary>
        public virtual IInfrastructureRoottypeId CreateInfrastructureRoottypeId()
        {
            return new InfrastructureRoottypeId();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the InFulfillmentOf class.
        /// </summary>
        public virtual IInFulfillmentOf CreateInFulfillmentOf()
        {
            return new InFulfillmentOf();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the IntendedRecipient class.
        /// </summary>
        public virtual IIntendedRecipient CreateIntendedRecipient()
        {
            return new IntendedRecipient();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the LabeledDrug class.
        /// </summary>
        public virtual ILabeledDrug CreateLabeledDrug()
        {
            return new LabeledDrug();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the LanguageCommunication class.
        /// </summary>
        public virtual ILanguageCommunication CreateLanguageCommunication()
        {
            return new LanguageCommunication();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the LegalAuthenticator class.
        /// </summary>
        public virtual ILegalAuthenticator CreateLegalAuthenticator()
        {
            return new LegalAuthenticator();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Location class.
        /// </summary>
        public virtual ILocation CreateLocation()
        {
            return new Location();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the MaintainedEntity class.
        /// </summary>
        public virtual IMaintainedEntity CreateMaintainedEntity()
        {
            return new MaintainedEntity();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ManufacturedProduct class.
        /// </summary>
        public virtual IManufacturedProduct CreateManufacturedProduct()
        {
            return new ManufacturedProduct();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Material class.
        /// </summary>
        public virtual IMaterial CreateMaterial()
        {
            return new Material();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the NonXMLBody class.
        /// </summary>
        public virtual INonXMLBody CreateNonXMLBody()
        {
            return new NonXMLBody();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Observation class.
        /// </summary>
        public virtual IObservation CreateObservation()
        {
            return new Observation();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ObservationMedia class.
        /// </summary>
        public virtual IObservationMedia CreateObservationMedia()
        {
            return new ObservationMedia();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ObservationRange class.
        /// </summary>
        public virtual IObservationRange CreateObservationRange()
        {
            return new ObservationRange();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Order class.
        /// </summary>
        public virtual IOrder CreateOrder()
        {
            return new Order();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Organization class.
        /// </summary>
        public virtual IOrganization CreateOrganization()
        {
            return new Organization();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the OrganizationPartOf class.
        /// </summary>
        public virtual IOrganizationPartOf CreateOrganizationPartOf()
        {
            return new OrganizationPartOf();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Organizer class.
        /// </summary>
        public virtual IOrganizer CreateOrganizer()
        {
            return new Organizer();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ParentDocument class.
        /// </summary>
        public virtual IParentDocument CreateParentDocument()
        {
            return new ParentDocument();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Participant1 class.
        /// </summary>
        public virtual IParticipant1 CreateParticipant1()
        {
            return new Participant1();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Participant2 class.
        /// </summary>
        public virtual IParticipant2 CreateParticipant2()
        {
            return new Participant2();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ParticipantRole class.
        /// </summary>
        public virtual IParticipantRole CreateParticipantRole()
        {
            return new ParticipantRole();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Patient class.
        /// </summary>
        public virtual IPatient CreatePatient()
        {
            return new Patient();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PatientRole class.
        /// </summary>
        public virtual IPatientRole CreatePatientRole()
        {
            return new PatientRole();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Performer1 class.
        /// </summary>
        public virtual IPerformer1 CreatePerformer1()
        {
            return new Performer1();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Performer2 class.
        /// </summary>
        public virtual IPerformer2 CreatePerformer2()
        {
            return new Performer2();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Person class.
        /// </summary>
        public virtual IPerson CreatePerson()
        {
            return new Person();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Place class.
        /// </summary>
        public virtual IPlace CreatePlace()
        {
            return new Place();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PlayingEntity class.
        /// </summary>
        public virtual IPlayingEntity CreatePlayingEntity()
        {
            return new PlayingEntity();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Precondition class.
        /// </summary>
        public virtual IPrecondition CreatePrecondition()
        {
            return new Precondition();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Procedure class.
        /// </summary>
        public virtual IProcedure CreateProcedure()
        {
            return new Procedure();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Product class.
        /// </summary>
        public virtual IProduct CreateProduct()
        {
            return new Product();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RecordTarget class.
        /// </summary>
        public virtual IRecordTarget CreateRecordTarget()
        {
            return new RecordTarget();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Reference class.
        /// </summary>
        public virtual IReference CreateReference()
        {
            return new Reference();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ReferenceRange class.
        /// </summary>
        public virtual IReferenceRange CreateReferenceRange()
        {
            return new ReferenceRange();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RegionOfInterest class.
        /// </summary>
        public virtual IRegionOfInterest CreateRegionOfInterest()
        {
            return new RegionOfInterest();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RegionOfInterestvalue class.
        /// </summary>
        public virtual IRegionOfInterestvalue CreateRegionOfInterestvalue()
        {
            return new RegionOfInterestvalue();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RelatedDocument class.
        /// </summary>
        public virtual IRelatedDocument CreateRelatedDocument()
        {
            return new RelatedDocument();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RelatedEntity class.
        /// </summary>
        public virtual IRelatedEntity CreateRelatedEntity()
        {
            return new RelatedEntity();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RelatedSubject class.
        /// </summary>
        public virtual IRelatedSubject CreateRelatedSubject()
        {
            return new RelatedSubject();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ResponsibleParty class.
        /// </summary>
        public virtual IResponsibleParty CreateResponsibleParty()
        {
            return new ResponsibleParty();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Section class.
        /// </summary>
        public virtual ISection CreateSection()
        {
            return new Section();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ServiceEvent class.
        /// </summary>
        public virtual IServiceEvent CreateServiceEvent()
        {
            return new ServiceEvent();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Specimen class.
        /// </summary>
        public virtual ISpecimen CreateSpecimen()
        {
            return new Specimen();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SpecimenRole class.
        /// </summary>
        public virtual ISpecimenRole CreateSpecimenRole()
        {
            return new SpecimenRole();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StructuredBody class.
        /// </summary>
        public virtual IStructuredBody CreateStructuredBody()
        {
            return new StructuredBody();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Subject class.
        /// </summary>
        public virtual ISubject CreateSubject()
        {
            return new Subject();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SubjectPerson class.
        /// </summary>
        public virtual ISubjectPerson CreateSubjectPerson()
        {
            return new SubjectPerson();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SubstanceAdministration class.
        /// </summary>
        public virtual ISubstanceAdministration CreateSubstanceAdministration()
        {
            return new SubstanceAdministration();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the Supply class.
        /// </summary>
        public virtual ISupply CreateSupply()
        {
            return new Supply();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PPD_PQ class.
        /// </summary>
        public virtual IPPD_PQ CreatePPD_PQ()
        {
            return new PPD_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PPD_TS class.
        /// </summary>
        public virtual IPPD_TS CreatePPD_TS()
        {
            return new PPD_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PQ class.
        /// </summary>
        public virtual IPQ CreatePQ()
        {
            return new PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the PQR class.
        /// </summary>
        public virtual IPQR CreatePQR()
        {
            return new PQR();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the REAL class.
        /// </summary>
        public virtual IREAL CreateREAL()
        {
            return new REAL();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO class.
        /// </summary>
        public virtual IRTO CreateRTO()
        {
            return new RTO();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO_MO_PQ class.
        /// </summary>
        public virtual IRTO_MO_PQ CreateRTO_MO_PQ()
        {
            return new RTO_MO_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO_PQ_PQ class.
        /// </summary>
        public virtual IRTO_PQ_PQ CreateRTO_PQ_PQ()
        {
            return new RTO_PQ_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the RTO_QTY_QTY class.
        /// </summary>
        public virtual IRTO_QTY_QTY CreateRTO_QTY_QTY()
        {
            return new RTO_QTY_QTY();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SC class.
        /// </summary>
        public virtual ISC CreateSC()
        {
            return new SC();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SLIST_PQ class.
        /// </summary>
        public virtual ISLIST_PQ CreateSLIST_PQ()
        {
            return new SLIST_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SLIST_TS class.
        /// </summary>
        public virtual ISLIST_TS CreateSLIST_TS()
        {
            return new SLIST_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the ST class.
        /// </summary>
        public virtual IST CreateST()
        {
            return new ST();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocBr class.
        /// </summary>
        public virtual IStrucDocBr CreateStrucDocBr()
        {
            return new StrucDocBr();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocCaption class.
        /// </summary>
        public virtual IStrucDocCaption CreateStrucDocCaption()
        {
            return new StrucDocCaption();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocCol class.
        /// </summary>
        public virtual IStrucDocCol CreateStrucDocCol()
        {
            return new StrucDocCol();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocColgroup class.
        /// </summary>
        public virtual IStrucDocColgroup CreateStrucDocColgroup()
        {
            return new StrucDocColgroup();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocContent class.
        /// </summary>
        public virtual IStrucDocContent CreateStrucDocContent()
        {
            return new StrucDocContent();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocFootnote class.
        /// </summary>
        public virtual IStrucDocFootnote CreateStrucDocFootnote()
        {
            return new StrucDocFootnote();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocFootnoteRef class.
        /// </summary>
        public virtual IStrucDocFootnoteRef CreateStrucDocFootnoteRef()
        {
            return new StrucDocFootnoteRef();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocItem class.
        /// </summary>
        public virtual IStrucDocItem CreateStrucDocItem()
        {
            return new StrucDocItem();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocLinkHtml class.
        /// </summary>
        public virtual IStrucDocLinkHtml CreateStrucDocLinkHtml()
        {
            return new StrucDocLinkHtml();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocList class.
        /// </summary>
        public virtual IStrucDocList CreateStrucDocList()
        {
            return new StrucDocList();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocParagraph class.
        /// </summary>
        public virtual IStrucDocParagraph CreateStrucDocParagraph()
        {
            return new StrucDocParagraph();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocRenderMultiMedia class.
        /// </summary>
        public virtual IStrucDocRenderMultiMedia CreateStrucDocRenderMultiMedia()
        {
            return new StrucDocRenderMultiMedia();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocSub class.
        /// </summary>
        public virtual IStrucDocSub CreateStrucDocSub()
        {
            return new StrucDocSub();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocSup class.
        /// </summary>
        public virtual IStrucDocSup CreateStrucDocSup()
        {
            return new StrucDocSup();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTable class.
        /// </summary>
        public virtual IStrucDocTable CreateStrucDocTable()
        {
            return new StrucDocTable();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTbody class.
        /// </summary>
        public virtual IStrucDocTbody CreateStrucDocTbody()
        {
            return new StrucDocTbody();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTd class.
        /// </summary>
        public virtual IStrucDocTd CreateStrucDocTd()
        {
            return new StrucDocTd();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocText class.
        /// </summary>
        public virtual IStrucDocText CreateStrucDocText()
        {
            return new StrucDocText();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTfoot class.
        /// </summary>
        public virtual IStrucDocTfoot CreateStrucDocTfoot()
        {
            return new StrucDocTfoot();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTh class.
        /// </summary>
        public virtual IStrucDocTh CreateStrucDocTh()
        {
            return new StrucDocTh();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocThead class.
        /// </summary>
        public virtual IStrucDocThead CreateStrucDocThead()
        {
            return new StrucDocThead();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the StrucDocTr class.
        /// </summary>
        public virtual IStrucDocTr CreateStrucDocTr()
        {
            return new StrucDocTr();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_CD class.
        /// </summary>
        public virtual ISXCM_CD CreateSXCM_CD()
        {
            return new SXCM_CD();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_INT class.
        /// </summary>
        public virtual ISXCM_INT CreateSXCM_INT()
        {
            return new SXCM_INT();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_MO class.
        /// </summary>
        public virtual ISXCM_MO CreateSXCM_MO()
        {
            return new SXCM_MO();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_PPD_PQ class.
        /// </summary>
        public virtual ISXCM_PPD_PQ CreateSXCM_PPD_PQ()
        {
            return new SXCM_PPD_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_PPD_TS class.
        /// </summary>
        public virtual ISXCM_PPD_TS CreateSXCM_PPD_TS()
        {
            return new SXCM_PPD_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_PQ class.
        /// </summary>
        public virtual ISXCM_PQ CreateSXCM_PQ()
        {
            return new SXCM_PQ();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_REAL class.
        /// </summary>
        public virtual ISXCM_REAL CreateSXCM_REAL()
        {
            return new SXCM_REAL();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXCM_TS class.
        /// </summary>
        public virtual ISXCM_TS CreateSXCM_TS()
        {
            return new SXCM_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the SXPR_TS class.
        /// </summary>
        public virtual ISXPR_TS CreateSXPR_TS()
        {
            return new SXPR_TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the TEL class.
        /// </summary>
        public virtual ITEL CreateTEL()
        {
            return new TEL();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the thumbnail class.
        /// </summary>
        public virtual Ithumbnail Createthumbnail()
        {
            return new thumbnail();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the TN class.
        /// </summary>
        public virtual ITN CreateTN()
        {
            return new TN();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the TS class.
        /// </summary>
        public virtual ITS CreateTS()
        {
            return new TS();
        }
        
        /// <summary>
        /// Creates and initializes an instanse of the UVP_TS class.
        /// </summary>
        public virtual IUVP_TS CreateUVP_TS()
        {
            return new UVP_TS();
        }
    }
    
    internal partial class ElementFactory
    {
        
        private static void LoadTypes()
        {
            typeCache.Add(typeof(HL7SDK.Xml.Cda.AD), typeof(HL7SDK.Cda.AD));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.ADXP), typeof(HL7SDK.Cda.ADXP));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpadditionalLocator), typeof(HL7SDK.Cda.adxpadditionalLocator));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpbuildingNumberSuffix), typeof(HL7SDK.Cda.adxpbuildingNumberSuffix));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpcareOf), typeof(HL7SDK.Cda.adxpcareOf));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpcensusTract), typeof(HL7SDK.Cda.adxpcensusTract));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpcity), typeof(HL7SDK.Cda.adxpcity));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpcountry), typeof(HL7SDK.Cda.adxpcountry));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpcounty), typeof(HL7SDK.Cda.adxpcounty));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdelimiter), typeof(HL7SDK.Cda.adxpdelimiter));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdeliveryAddressLine), typeof(HL7SDK.Cda.adxpdeliveryAddressLine));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdeliveryInstallationArea), typeof(HL7SDK.Cda.adxpdeliveryInstallationArea));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdeliveryInstallationQualifier), typeof(HL7SDK.Cda.adxpdeliveryInstallationQualifier));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdeliveryInstallationType), typeof(HL7SDK.Cda.adxpdeliveryInstallationType));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdeliveryMode), typeof(HL7SDK.Cda.adxpdeliveryMode));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdeliveryModeIdentifier), typeof(HL7SDK.Cda.adxpdeliveryModeIdentifier));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpdirection), typeof(HL7SDK.Cda.adxpdirection));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxphouseNumber), typeof(HL7SDK.Cda.adxphouseNumber));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxphouseNumberNumeric), typeof(HL7SDK.Cda.adxphouseNumberNumeric));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxppostalCode), typeof(HL7SDK.Cda.adxppostalCode));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxppostBox), typeof(HL7SDK.Cda.adxppostBox));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpprecinct), typeof(HL7SDK.Cda.adxpprecinct));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpstate), typeof(HL7SDK.Cda.adxpstate));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpstreetAddressLine), typeof(HL7SDK.Cda.adxpstreetAddressLine));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpstreetName), typeof(HL7SDK.Cda.adxpstreetName));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpstreetNameBase), typeof(HL7SDK.Cda.adxpstreetNameBase));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpstreetNameType), typeof(HL7SDK.Cda.adxpstreetNameType));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpunitID), typeof(HL7SDK.Cda.adxpunitID));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.adxpunitType), typeof(HL7SDK.Cda.adxpunitType));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.ANYNonNull), typeof(HL7SDK.Cda.ANYNonNull));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.BL), typeof(HL7SDK.Cda.BL));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.BN), typeof(HL7SDK.Cda.BN));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.BXIT_CD), typeof(HL7SDK.Cda.BXIT_CD));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.BXIT_IVL_PQ), typeof(HL7SDK.Cda.BXIT_IVL_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.CD), typeof(HL7SDK.Cda.CD));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.CE), typeof(HL7SDK.Cda.CE));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.CO), typeof(HL7SDK.Cda.CO));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.CR), typeof(HL7SDK.Cda.CR));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.CS), typeof(HL7SDK.Cda.CS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.CV), typeof(HL7SDK.Cda.CV));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.ED), typeof(HL7SDK.Cda.ED));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.EIVL_PPD_TS), typeof(HL7SDK.Cda.EIVL_PPD_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.EIVL_TS), typeof(HL7SDK.Cda.EIVL_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.EIVLevent), typeof(HL7SDK.Cda.EIVLevent));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.EN), typeof(HL7SDK.Cda.EN));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.endelimiter), typeof(HL7SDK.Cda.endelimiter));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.enfamily), typeof(HL7SDK.Cda.enfamily));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.engiven), typeof(HL7SDK.Cda.engiven));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.enprefix), typeof(HL7SDK.Cda.enprefix));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.ensuffix), typeof(HL7SDK.Cda.ensuffix));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.ENXP), typeof(HL7SDK.Cda.ENXP));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.GLIST_PQ), typeof(HL7SDK.Cda.GLIST_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.GLIST_TS), typeof(HL7SDK.Cda.GLIST_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.HXIT_CE), typeof(HL7SDK.Cda.HXIT_CE));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.HXIT_PQ), typeof(HL7SDK.Cda.HXIT_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.II), typeof(HL7SDK.Cda.II));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.INT), typeof(HL7SDK.Cda.INT));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVL_INT), typeof(HL7SDK.Cda.IVL_INT));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVL_MO), typeof(HL7SDK.Cda.IVL_MO));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVL_PPD_PQ), typeof(HL7SDK.Cda.IVL_PPD_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVL_PPD_TS), typeof(HL7SDK.Cda.IVL_PPD_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVL_PQ), typeof(HL7SDK.Cda.IVL_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVL_REAL), typeof(HL7SDK.Cda.IVL_REAL));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVL_TS), typeof(HL7SDK.Cda.IVL_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVXB_INT), typeof(HL7SDK.Cda.IVXB_INT));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVXB_MO), typeof(HL7SDK.Cda.IVXB_MO));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVXB_PPD_PQ), typeof(HL7SDK.Cda.IVXB_PPD_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVXB_PPD_TS), typeof(HL7SDK.Cda.IVXB_PPD_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVXB_PQ), typeof(HL7SDK.Cda.IVXB_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVXB_REAL), typeof(HL7SDK.Cda.IVXB_REAL));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.IVXB_TS), typeof(HL7SDK.Cda.IVXB_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.MO), typeof(HL7SDK.Cda.MO));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.ON), typeof(HL7SDK.Cda.ON));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.PIVL_PPD_TS), typeof(HL7SDK.Cda.PIVL_PPD_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.PIVL_TS), typeof(HL7SDK.Cda.PIVL_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.PN), typeof(HL7SDK.Cda.PN));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Act), typeof(HL7SDK.Cda.Act));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor), typeof(HL7SDK.Cda.AssignedAuthor));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian), typeof(HL7SDK.Cda.AssignedCustodian));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity), typeof(HL7SDK.Cda.AssignedEntity));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity), typeof(HL7SDK.Cda.AssociatedEntity));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Authenticator), typeof(HL7SDK.Cda.Authenticator));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Author), typeof(HL7SDK.Cda.Author));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice), typeof(HL7SDK.Cda.AuthoringDevice));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Authorization), typeof(HL7SDK.Cda.Authorization));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Birthplace), typeof(HL7SDK.Cda.Birthplace));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ClinicalDocument), typeof(HL7SDK.Cda.ClinicalDocument));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Component1), typeof(HL7SDK.Cda.Component1));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Component2), typeof(HL7SDK.Cda.Component2));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Component3), typeof(HL7SDK.Cda.Component3));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Component4), typeof(HL7SDK.Cda.Component4));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Component5), typeof(HL7SDK.Cda.Component5));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Consent), typeof(HL7SDK.Cda.Consent));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Consumable), typeof(HL7SDK.Cda.Consumable));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Criterion), typeof(HL7SDK.Cda.Criterion));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Custodian), typeof(HL7SDK.Cda.Custodian));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization), typeof(HL7SDK.Cda.CustodianOrganization));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040DataEnterer), typeof(HL7SDK.Cda.DataEnterer));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Device), typeof(HL7SDK.Cda.Device));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf), typeof(HL7SDK.Cda.DocumentationOf));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter), typeof(HL7SDK.Cda.EncompassingEncounter));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Encounter), typeof(HL7SDK.Cda.Encounter));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant), typeof(HL7SDK.Cda.EncounterParticipant));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Entity), typeof(HL7SDK.Cda.Entity));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Entry), typeof(HL7SDK.Cda.Entry));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship), typeof(HL7SDK.Cda.EntryRelationship));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ExternalAct), typeof(HL7SDK.Cda.ExternalAct));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument), typeof(HL7SDK.Cda.ExternalDocument));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation), typeof(HL7SDK.Cda.ExternalObservation));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure), typeof(HL7SDK.Cda.ExternalProcedure));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Guardian), typeof(HL7SDK.Cda.Guardian));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility), typeof(HL7SDK.Cda.HealthCareFacility));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Informant12), typeof(HL7SDK.Cda.Informant12));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient), typeof(HL7SDK.Cda.InformationRecipient));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId), typeof(HL7SDK.Cda.InfrastructureRoottypeId));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf), typeof(HL7SDK.Cda.InFulfillmentOf));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient), typeof(HL7SDK.Cda.IntendedRecipient));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug), typeof(HL7SDK.Cda.LabeledDrug));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication), typeof(HL7SDK.Cda.LanguageCommunication));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator), typeof(HL7SDK.Cda.LegalAuthenticator));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Location), typeof(HL7SDK.Cda.Location));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity), typeof(HL7SDK.Cda.MaintainedEntity));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct), typeof(HL7SDK.Cda.ManufacturedProduct));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Material), typeof(HL7SDK.Cda.Material));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody), typeof(HL7SDK.Cda.NonXMLBody));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Observation), typeof(HL7SDK.Cda.Observation));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia), typeof(HL7SDK.Cda.ObservationMedia));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ObservationRange), typeof(HL7SDK.Cda.ObservationRange));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Order), typeof(HL7SDK.Cda.Order));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Organization), typeof(HL7SDK.Cda.Organization));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf), typeof(HL7SDK.Cda.OrganizationPartOf));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Organizer), typeof(HL7SDK.Cda.Organizer));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ParentDocument), typeof(HL7SDK.Cda.ParentDocument));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Participant1), typeof(HL7SDK.Cda.Participant1));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Participant2), typeof(HL7SDK.Cda.Participant2));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole), typeof(HL7SDK.Cda.ParticipantRole));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Patient), typeof(HL7SDK.Cda.Patient));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040PatientRole), typeof(HL7SDK.Cda.PatientRole));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Performer1), typeof(HL7SDK.Cda.Performer1));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Performer2), typeof(HL7SDK.Cda.Performer2));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Person), typeof(HL7SDK.Cda.Person));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Place), typeof(HL7SDK.Cda.Place));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity), typeof(HL7SDK.Cda.PlayingEntity));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Precondition), typeof(HL7SDK.Cda.Precondition));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Procedure), typeof(HL7SDK.Cda.Procedure));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Product), typeof(HL7SDK.Cda.Product));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040RecordTarget), typeof(HL7SDK.Cda.RecordTarget));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Reference), typeof(HL7SDK.Cda.Reference));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange), typeof(HL7SDK.Cda.ReferenceRange));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest), typeof(HL7SDK.Cda.RegionOfInterest));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue), typeof(HL7SDK.Cda.RegionOfInterestvalue));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument), typeof(HL7SDK.Cda.RelatedDocument));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity), typeof(HL7SDK.Cda.RelatedEntity));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject), typeof(HL7SDK.Cda.RelatedSubject));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty), typeof(HL7SDK.Cda.ResponsibleParty));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Section), typeof(HL7SDK.Cda.Section));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent), typeof(HL7SDK.Cda.ServiceEvent));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Specimen), typeof(HL7SDK.Cda.Specimen));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole), typeof(HL7SDK.Cda.SpecimenRole));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040StructuredBody), typeof(HL7SDK.Cda.StructuredBody));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Subject), typeof(HL7SDK.Cda.Subject));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson), typeof(HL7SDK.Cda.SubjectPerson));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration), typeof(HL7SDK.Cda.SubstanceAdministration));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.POCD_MT000040Supply), typeof(HL7SDK.Cda.Supply));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.PPD_PQ), typeof(HL7SDK.Cda.PPD_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.PPD_TS), typeof(HL7SDK.Cda.PPD_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.PQ), typeof(HL7SDK.Cda.PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.PQR), typeof(HL7SDK.Cda.PQR));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.REAL), typeof(HL7SDK.Cda.REAL));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.RTO), typeof(HL7SDK.Cda.RTO));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.RTO_MO_PQ), typeof(HL7SDK.Cda.RTO_MO_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.RTO_PQ_PQ), typeof(HL7SDK.Cda.RTO_PQ_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.RTO_QTY_QTY), typeof(HL7SDK.Cda.RTO_QTY_QTY));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SC), typeof(HL7SDK.Cda.SC));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SLIST_PQ), typeof(HL7SDK.Cda.SLIST_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SLIST_TS), typeof(HL7SDK.Cda.SLIST_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.ST), typeof(HL7SDK.Cda.ST));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocBr), typeof(HL7SDK.Cda.StrucDocBr));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocCaption), typeof(HL7SDK.Cda.StrucDocCaption));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocCol), typeof(HL7SDK.Cda.StrucDocCol));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocColgroup), typeof(HL7SDK.Cda.StrucDocColgroup));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocContent), typeof(HL7SDK.Cda.StrucDocContent));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocFootnote), typeof(HL7SDK.Cda.StrucDocFootnote));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocFootnoteRef), typeof(HL7SDK.Cda.StrucDocFootnoteRef));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocItem), typeof(HL7SDK.Cda.StrucDocItem));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocLinkHtml), typeof(HL7SDK.Cda.StrucDocLinkHtml));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocList), typeof(HL7SDK.Cda.StrucDocList));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocParagraph), typeof(HL7SDK.Cda.StrucDocParagraph));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocRenderMultiMedia), typeof(HL7SDK.Cda.StrucDocRenderMultiMedia));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocSub), typeof(HL7SDK.Cda.StrucDocSub));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocSup), typeof(HL7SDK.Cda.StrucDocSup));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocTable), typeof(HL7SDK.Cda.StrucDocTable));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocTbody), typeof(HL7SDK.Cda.StrucDocTbody));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocTd), typeof(HL7SDK.Cda.StrucDocTd));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocText), typeof(HL7SDK.Cda.StrucDocText));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocTfoot), typeof(HL7SDK.Cda.StrucDocTfoot));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocTh), typeof(HL7SDK.Cda.StrucDocTh));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocThead), typeof(HL7SDK.Cda.StrucDocThead));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.StrucDocTr), typeof(HL7SDK.Cda.StrucDocTr));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_CD), typeof(HL7SDK.Cda.SXCM_CD));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_INT), typeof(HL7SDK.Cda.SXCM_INT));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_MO), typeof(HL7SDK.Cda.SXCM_MO));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_PPD_PQ), typeof(HL7SDK.Cda.SXCM_PPD_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_PPD_TS), typeof(HL7SDK.Cda.SXCM_PPD_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_PQ), typeof(HL7SDK.Cda.SXCM_PQ));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_REAL), typeof(HL7SDK.Cda.SXCM_REAL));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXCM_TS), typeof(HL7SDK.Cda.SXCM_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.SXPR_TS), typeof(HL7SDK.Cda.SXPR_TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.TEL), typeof(HL7SDK.Cda.TEL));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.thumbnail), typeof(HL7SDK.Cda.thumbnail));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.TN), typeof(HL7SDK.Cda.TN));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.TS), typeof(HL7SDK.Cda.TS));
            typeCache.Add(typeof(HL7SDK.Xml.Cda.UVP_TS), typeof(HL7SDK.Cda.UVP_TS));
        }
    }
    
    /// <summary>
    /// CDA ActClassSupply enumeration.
    /// </summary>

    [Guid("d702d9ca-3ffc-47a1-a97d-9951e0a125b5")]
    public enum ActClassSupply
    {
        
        /// <summary>
        /// SPLY enumeration value.
        /// </summary>
        SPLY,
        
        /// <summary>
        /// DIET enumeration value.
        /// </summary>
        DIET,
    }
    
    /// <summary>
    /// CDA ActClinicalDocument enumeration.
    /// </summary>

    [Guid("9b8f5867-d3a7-41c2-a911-1b968167940e")]
    public enum ActClinicalDocument
    {
        
        /// <summary>
        /// DOCCLIN enumeration value.
        /// </summary>
        DOCCLIN,
        
        /// <summary>
        /// CDALVLONE enumeration value.
        /// </summary>
        CDALVLONE,
    }
    
    /// <summary>
    /// CDA ActRelationshipFulfills enumeration.
    /// </summary>

    [Guid("93c97e2f-46f6-4f04-abd7-0c62d017c43e")]
    public enum ActRelationshipFulfills
    {
        
        /// <summary>
        /// FLFS enumeration value.
        /// </summary>
        FLFS,
        
        /// <summary>
        /// OCCR enumeration value.
        /// </summary>
        OCCR,
        
        /// <summary>
        /// OREF enumeration value.
        /// </summary>
        OREF,
        
        /// <summary>
        /// SCH enumeration value.
        /// </summary>
        SCH,
    }
    
    /// <summary>
    /// CDA ActRelationshipHasComponent enumeration.
    /// </summary>

    [Guid("3ebc4e93-83ab-469f-8287-2834bcd8a61e")]
    public enum ActRelationshipHasComponent
    {
        
        /// <summary>
        /// COMP enumeration value.
        /// </summary>
        COMP,
        
        /// <summary>
        /// ARR enumeration value.
        /// </summary>
        ARR,
        
        /// <summary>
        /// CTRLV enumeration value.
        /// </summary>
        CTRLV,
        
        /// <summary>
        /// DEP enumeration value.
        /// </summary>
        DEP,
    }
    
    /// <summary>
    /// CDA BinaryDataEncoding enumeration.
    /// </summary>

    [Guid("fcb2f041-deb7-41bb-b1a4-226e0dfa0fa8")]
    public enum BinaryDataEncoding
    {
        
        /// <summary>
        /// B64 enumeration value.
        /// </summary>
        B64,
        
        /// <summary>
        /// TXT enumeration value.
        /// </summary>
        TXT,
    }
    
    /// <summary>
    /// CDA CompressionAlgorithm enumeration.
    /// </summary>

    [Guid("4fe2019c-c254-42e5-9bc0-f967b66b0d30")]
    public enum CompressionAlgorithm
    {
        
        /// <summary>
        /// DF enumeration value.
        /// </summary>
        DF,
        
        /// <summary>
        /// GZ enumeration value.
        /// </summary>
        GZ,
        
        /// <summary>
        /// Z enumeration value.
        /// </summary>
        Z,
        
        /// <summary>
        /// ZL enumeration value.
        /// </summary>
        ZL,
    }
    
    /// <summary>
    /// CDA EntityClassDevice enumeration.
    /// </summary>

    [Guid("76b4664f-3a1d-4730-b4be-771c21df6d04")]
    public enum EntityClassDevice
    {
        
        /// <summary>
        /// DEV enumeration value.
        /// </summary>
        DEV,
        
        /// <summary>
        /// CER enumeration value.
        /// </summary>
        CER,
        
        /// <summary>
        /// MODDV enumeration value.
        /// </summary>
        MODDV,
    }
    
    /// <summary>
    /// CDA EntityClassPlace enumeration.
    /// </summary>

    [Guid("1dab675b-0d36-4595-a3ca-b7b7e8932647")]
    public enum EntityClassPlace
    {
        
        /// <summary>
        /// PLC enumeration value.
        /// </summary>
        PLC,
        
        /// <summary>
        /// CITY enumeration value.
        /// </summary>
        CITY,
        
        /// <summary>
        /// COUNTRY enumeration value.
        /// </summary>
        COUNTRY,
        
        /// <summary>
        /// COUNTY enumeration value.
        /// </summary>
        COUNTY,
        
        /// <summary>
        /// PROVINCE enumeration value.
        /// </summary>
        PROVINCE,
    }
    
    /// <summary>
    /// CDA EntityDeterminerDetermined enumeration.
    /// </summary>

    [Guid("02cec153-4cd6-4bc5-ba2f-1d6748f75599")]
    public enum EntityDeterminerDetermined
    {
        
        /// <summary>
        /// KIND enumeration value.
        /// </summary>
        KIND,
        
        /// <summary>
        /// QUANTIFIED_KIND enumeration value.
        /// </summary>
        QUANTIFIED_KIND,
    }
    
    /// <summary>
    /// CDA IntegrityCheckAlgorithm enumeration.
    /// </summary>

    [Guid("c308d518-b14f-4287-b792-a92ab08da25e")]
    public enum IntegrityCheckAlgorithm
    {
        
        /// <summary>
        /// SHA1 enumeration value.
        /// </summary>
        SHA1,
        
        /// <summary>
        /// SHA256 enumeration value.
        /// </summary>
        SHA256,
    }
    
    /// <summary>
    /// CDA ItemsChoiceType enumeration.
    /// </summary>

    [Guid("d413a726-112b-4708-8662-68c3b9681d44")]
    public enum ItemsChoiceType
    {
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// high enumeration value.
        /// </summary>
        high,
        
        /// <summary>
        /// low enumeration value.
        /// </summary>
        low,
        
        /// <summary>
        /// width enumeration value.
        /// </summary>
        width,
    }
    
    /// <summary>
    /// CDA ItemsChoiceType1 enumeration.
    /// </summary>

    [Guid("da2db495-79ef-4085-b092-bbfe1b746f22")]
    public enum ItemsChoiceType1
    {
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// high enumeration value.
        /// </summary>
        high,
        
        /// <summary>
        /// low enumeration value.
        /// </summary>
        low,
        
        /// <summary>
        /// width enumeration value.
        /// </summary>
        width,
    }
    
    /// <summary>
    /// CDA ItemsChoiceType2 enumeration.
    /// </summary>

    [Guid("83203f9d-e963-4066-8d09-2c6732aed219")]
    public enum ItemsChoiceType2
    {
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// high enumeration value.
        /// </summary>
        high,
        
        /// <summary>
        /// low enumeration value.
        /// </summary>
        low,
        
        /// <summary>
        /// width enumeration value.
        /// </summary>
        width,
    }
    
    /// <summary>
    /// CDA ItemsChoiceType3 enumeration.
    /// </summary>

    [Guid("c9a20532-aaff-428b-8e66-9153dd7e7e90")]
    public enum ItemsChoiceType3
    {
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// high enumeration value.
        /// </summary>
        high,
        
        /// <summary>
        /// low enumeration value.
        /// </summary>
        low,
        
        /// <summary>
        /// width enumeration value.
        /// </summary>
        width,
    }
    
    /// <summary>
    /// CDA ItemsChoiceType4 enumeration.
    /// </summary>

    [Guid("235dffd1-6af5-4bf3-9e38-83fa909911fb")]
    public enum ItemsChoiceType4
    {
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// high enumeration value.
        /// </summary>
        high,
        
        /// <summary>
        /// low enumeration value.
        /// </summary>
        low,
        
        /// <summary>
        /// width enumeration value.
        /// </summary>
        width,
    }
    
    /// <summary>
    /// CDA ItemsChoiceType5 enumeration.
    /// </summary>

    [Guid("d60efa01-53f7-4347-91dd-b155bb4fe7b2")]
    public enum ItemsChoiceType5
    {
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// high enumeration value.
        /// </summary>
        high,
        
        /// <summary>
        /// low enumeration value.
        /// </summary>
        low,
        
        /// <summary>
        /// width enumeration value.
        /// </summary>
        width,
    }
    
    /// <summary>
    /// CDA ItemsChoiceType6 enumeration.
    /// </summary>

    [Guid("eb1e592c-2421-4769-91dd-c6d2449eb48d")]
    public enum ItemsChoiceType6
    {
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// high enumeration value.
        /// </summary>
        high,
        
        /// <summary>
        /// low enumeration value.
        /// </summary>
        low,
        
        /// <summary>
        /// width enumeration value.
        /// </summary>
        width,
    }
    
    /// <summary>
    /// CDA ParticipationPhysicalPerformer enumeration.
    /// </summary>

    [Guid("719bd84f-a8ce-4227-815c-af3b956063cd")]
    public enum ParticipationPhysicalPerformer
    {
        
        /// <summary>
        /// PRF enumeration value.
        /// </summary>
        PRF,
        
        /// <summary>
        /// DIST enumeration value.
        /// </summary>
        DIST,
        
        /// <summary>
        /// PPRF enumeration value.
        /// </summary>
        PPRF,
        
        /// <summary>
        /// SPRF enumeration value.
        /// </summary>
        SPRF,
    }
    
    /// <summary>
    /// CDA ParticipationTargetLocation enumeration.
    /// </summary>

    [Guid("004d050b-b80b-4657-9a99-6fe037509b02")]
    public enum ParticipationTargetLocation
    {
        
        /// <summary>
        /// LOC enumeration value.
        /// </summary>
        LOC,
        
        /// <summary>
        /// DST enumeration value.
        /// </summary>
        DST,
        
        /// <summary>
        /// ELOC enumeration value.
        /// </summary>
        ELOC,
        
        /// <summary>
        /// ORG enumeration value.
        /// </summary>
        ORG,
        
        /// <summary>
        /// RML enumeration value.
        /// </summary>
        RML,
        
        /// <summary>
        /// VIA enumeration value.
        /// </summary>
        VIA,
    }
    
    /// <summary>
    /// CDA ParticipationTargetSubject enumeration.
    /// </summary>

    [Guid("4cbcf51b-ea96-466b-9a3d-990798e81998")]
    public enum ParticipationTargetSubject
    {
        
        /// <summary>
        /// SBJ enumeration value.
        /// </summary>
        SBJ,
        
        /// <summary>
        /// SPC enumeration value.
        /// </summary>
        SPC,
    }
    
    /// <summary>
    /// CDA ProbabilityDistributionType enumeration.
    /// </summary>

    [Guid("c73e3ec1-b59c-49d1-846a-7a5a603a0a74")]
    public enum ProbabilityDistributionType
    {
        
        /// <summary>
        /// B enumeration value.
        /// </summary>
        B,
        
        /// <summary>
        /// E enumeration value.
        /// </summary>
        E,
        
        /// <summary>
        /// F enumeration value.
        /// </summary>
        F,
        
        /// <summary>
        /// G enumeration value.
        /// </summary>
        G,
        
        /// <summary>
        /// LN enumeration value.
        /// </summary>
        LN,
        
        /// <summary>
        /// N enumeration value.
        /// </summary>
        N,
        
        /// <summary>
        /// T enumeration value.
        /// </summary>
        T,
        
        /// <summary>
        /// U enumeration value.
        /// </summary>
        U,
        
        /// <summary>
        /// X2 enumeration value.
        /// </summary>
        X2,
    }
    
    /// <summary>
    /// CDA RoleClassManufacturedProduct enumeration.
    /// </summary>

    [Guid("4d53e490-4e24-45ed-a72c-94fd58bf9d8c")]
    public enum RoleClassManufacturedProduct
    {
        
        /// <summary>
        /// MANU enumeration value.
        /// </summary>
        MANU,
        
        /// <summary>
        /// THER enumeration value.
        /// </summary>
        THER,
    }
    
    /// <summary>
    /// CDA RoleClassServiceDeliveryLocation enumeration.
    /// </summary>

    [Guid("9578e7b0-8e12-43ae-9c79-cd2159d56acb")]
    public enum RoleClassServiceDeliveryLocation
    {
        
        /// <summary>
        /// SDLOC enumeration value.
        /// </summary>
        SDLOC,
        
        /// <summary>
        /// DSDLOC enumeration value.
        /// </summary>
        DSDLOC,
        
        /// <summary>
        /// ISDLOC enumeration value.
        /// </summary>
        ISDLOC,
    }
    
    /// <summary>
    /// CDA RoleClassSpecimen enumeration.
    /// </summary>

    [Guid("451328f4-ade8-4d43-8bdf-8959a33ec5e2")]
    public enum RoleClassSpecimen
    {
        
        /// <summary>
        /// SPEC enumeration value.
        /// </summary>
        SPEC,
        
        /// <summary>
        /// ALQT enumeration value.
        /// </summary>
        ALQT,
        
        /// <summary>
        /// ISLT enumeration value.
        /// </summary>
        ISLT,
    }
    
    /// <summary>
    /// CDA SetOperator enumeration.
    /// </summary>

    [Guid("e01ca0a2-220c-4ea7-9e75-f1a6a5f902f1")]
    public enum SetOperator
    {
        
        /// <summary>
        /// A enumeration value.
        /// </summary>
        A,
        
        /// <summary>
        /// E enumeration value.
        /// </summary>
        E,
        
        /// <summary>
        /// H enumeration value.
        /// </summary>
        H,
        
        /// <summary>
        /// I enumeration value.
        /// </summary>
        I,
        
        /// <summary>
        /// P enumeration value.
        /// </summary>
        P,
    }
    
    /// <summary>
    /// CDA StrucDocColAlign enumeration.
    /// </summary>

    [Guid("d99b2392-8a13-43f3-a594-e40ef31d6f64")]
    public enum StrucDocColAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocColgroupAlign enumeration.
    /// </summary>

    [Guid("b0cc5abe-7fbc-4264-b79a-e45a04af39b4")]
    public enum StrucDocColgroupAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocColgroupValign enumeration.
    /// </summary>

    [Guid("3e79acfc-5844-468e-ab6a-fe7037f493c6")]
    public enum StrucDocColgroupValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA StrucDocColValign enumeration.
    /// </summary>

    [Guid("51941873-6a46-477b-9278-8002c2fc0247")]
    public enum StrucDocColValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA StrucDocContentRevised enumeration.
    /// </summary>

    [Guid("ecdb810f-9737-4d23-9749-88199f958978")]
    public enum StrucDocContentRevised
    {
        
        /// <summary>
        /// insert enumeration value.
        /// </summary>
        insert,
        
        /// <summary>
        /// delete enumeration value.
        /// </summary>
        delete,
    }
    
    /// <summary>
    /// CDA StrucDocListListType enumeration.
    /// </summary>

    [Guid("a49332b1-302e-4a0b-a260-4cb60ec221b2")]
    public enum StrucDocListListType
    {
        
        /// <summary>
        /// ordered enumeration value.
        /// </summary>
        ordered,
        
        /// <summary>
        /// unordered enumeration value.
        /// </summary>
        unordered,
    }
    
    /// <summary>
    /// CDA StrucDocTableFrame enumeration.
    /// </summary>

    [Guid("c98db550-c9b8-4d4a-85a4-fa56312035c7")]
    public enum StrucDocTableFrame
    {
        
        /// <summary>
        /// void enumeration value.
        /// </summary>
        @void,
        
        /// <summary>
        /// above enumeration value.
        /// </summary>
        above,
        
        /// <summary>
        /// below enumeration value.
        /// </summary>
        below,
        
        /// <summary>
        /// hsides enumeration value.
        /// </summary>
        hsides,
        
        /// <summary>
        /// lhs enumeration value.
        /// </summary>
        lhs,
        
        /// <summary>
        /// rhs enumeration value.
        /// </summary>
        rhs,
        
        /// <summary>
        /// vsides enumeration value.
        /// </summary>
        vsides,
        
        /// <summary>
        /// box enumeration value.
        /// </summary>
        box,
        
        /// <summary>
        /// border enumeration value.
        /// </summary>
        border,
    }
    
    /// <summary>
    /// CDA StrucDocTableRules enumeration.
    /// </summary>

    [Guid("58aa4733-c695-4d7a-99fb-f467b354a8ff")]
    public enum StrucDocTableRules
    {
        
        /// <summary>
        /// none enumeration value.
        /// </summary>
        none,
        
        /// <summary>
        /// groups enumeration value.
        /// </summary>
        groups,
        
        /// <summary>
        /// rows enumeration value.
        /// </summary>
        rows,
        
        /// <summary>
        /// cols enumeration value.
        /// </summary>
        cols,
        
        /// <summary>
        /// all enumeration value.
        /// </summary>
        all,
    }
    
    /// <summary>
    /// CDA StrucDocTbodyAlign enumeration.
    /// </summary>

    [Guid("5a08c9d6-08b0-4577-b41d-b21f09b5379c")]
    public enum StrucDocTbodyAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocTbodyValign enumeration.
    /// </summary>

    [Guid("cde5cf21-c4d0-486a-af31-95c07717a84b")]
    public enum StrucDocTbodyValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA StrucDocTdAlign enumeration.
    /// </summary>

    [Guid("cec1848e-f1c6-40ed-9a42-56ee49d771c9")]
    public enum StrucDocTdAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocTdScope enumeration.
    /// </summary>

    [Guid("104bb805-3f77-4f59-85a1-0e6a3ad62172")]
    public enum StrucDocTdScope
    {
        
        /// <summary>
        /// row enumeration value.
        /// </summary>
        row,
        
        /// <summary>
        /// col enumeration value.
        /// </summary>
        col,
        
        /// <summary>
        /// rowgroup enumeration value.
        /// </summary>
        rowgroup,
        
        /// <summary>
        /// colgroup enumeration value.
        /// </summary>
        colgroup,
    }
    
    /// <summary>
    /// CDA StrucDocTdValign enumeration.
    /// </summary>

    [Guid("ddaaf0e0-7a12-4bb2-82ec-c32246e33d3d")]
    public enum StrucDocTdValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA StrucDocTfootAlign enumeration.
    /// </summary>

    [Guid("3b0d63ed-4637-491a-a93b-fc3e394872dd")]
    public enum StrucDocTfootAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocTfootValign enumeration.
    /// </summary>

    [Guid("d4e6fd23-c23b-4ab7-a387-5605a78fc8af")]
    public enum StrucDocTfootValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA StrucDocThAlign enumeration.
    /// </summary>

    [Guid("00ce4281-f1f4-47c9-9150-dbfae4106d36")]
    public enum StrucDocThAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocTheadAlign enumeration.
    /// </summary>

    [Guid("85584b62-a5e8-4c11-89e1-b69e28c15476")]
    public enum StrucDocTheadAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocTheadValign enumeration.
    /// </summary>

    [Guid("1650686a-a411-4242-8ac2-7755a23adf46")]
    public enum StrucDocTheadValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA StrucDocThScope enumeration.
    /// </summary>

    [Guid("3ea6d956-77eb-454f-9ca3-bd9a7ffab046")]
    public enum StrucDocThScope
    {
        
        /// <summary>
        /// row enumeration value.
        /// </summary>
        row,
        
        /// <summary>
        /// col enumeration value.
        /// </summary>
        col,
        
        /// <summary>
        /// rowgroup enumeration value.
        /// </summary>
        rowgroup,
        
        /// <summary>
        /// colgroup enumeration value.
        /// </summary>
        colgroup,
    }
    
    /// <summary>
    /// CDA StrucDocThValign enumeration.
    /// </summary>

    [Guid("eaba08d0-4b07-4744-a17e-31f93f3abca3")]
    public enum StrucDocThValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA StrucDocTrAlign enumeration.
    /// </summary>

    [Guid("bd9e9255-41db-4b13-8cdf-9f0c96016b28")]
    public enum StrucDocTrAlign
    {
        
        /// <summary>
        /// left enumeration value.
        /// </summary>
        left,
        
        /// <summary>
        /// center enumeration value.
        /// </summary>
        center,
        
        /// <summary>
        /// right enumeration value.
        /// </summary>
        right,
        
        /// <summary>
        /// justify enumeration value.
        /// </summary>
        justify,
        
        /// <summary>
        /// char enumeration value.
        /// </summary>
        @char,
    }
    
    /// <summary>
    /// CDA StrucDocTrValign enumeration.
    /// </summary>

    [Guid("3226d72c-0186-418d-be44-7420655a67ef")]
    public enum StrucDocTrValign
    {
        
        /// <summary>
        /// top enumeration value.
        /// </summary>
        top,
        
        /// <summary>
        /// middle enumeration value.
        /// </summary>
        middle,
        
        /// <summary>
        /// bottom enumeration value.
        /// </summary>
        bottom,
        
        /// <summary>
        /// baseline enumeration value.
        /// </summary>
        baseline,
    }
    
    /// <summary>
    /// CDA x_ActClassDocumentEntryAct enumeration.
    /// </summary>

    [Guid("0f7e043f-9f5e-4d67-b2c3-b309363acd97")]
    public enum x_ActClassDocumentEntryAct
    {
        
        /// <summary>
        /// ACT enumeration value.
        /// </summary>
        ACT,
        
        /// <summary>
        /// ACCM enumeration value.
        /// </summary>
        ACCM,
        
        /// <summary>
        /// CONS enumeration value.
        /// </summary>
        CONS,
        
        /// <summary>
        /// CTTEVENT enumeration value.
        /// </summary>
        CTTEVENT,
        
        /// <summary>
        /// INC enumeration value.
        /// </summary>
        INC,
        
        /// <summary>
        /// INFRM enumeration value.
        /// </summary>
        INFRM,
        
        /// <summary>
        /// PCPR enumeration value.
        /// </summary>
        PCPR,
        
        /// <summary>
        /// REG enumeration value.
        /// </summary>
        REG,
        
        /// <summary>
        /// SPCTRT enumeration value.
        /// </summary>
        SPCTRT,
    }
    
    /// <summary>
    /// CDA x_ActClassDocumentEntryOrganizer enumeration.
    /// </summary>

    [Guid("8092ef3f-5411-4806-9e4f-c9841b0a29b6")]
    public enum x_ActClassDocumentEntryOrganizer
    {
        
        /// <summary>
        /// BATTERY enumeration value.
        /// </summary>
        BATTERY,
        
        /// <summary>
        /// CLUSTER enumeration value.
        /// </summary>
        CLUSTER,
    }
    
    /// <summary>
    /// CDA x_ActMoodDocumentObservation enumeration.
    /// </summary>

    [Guid("699ac5cc-9a26-42f8-85ef-d4657986cf06")]
    public enum x_ActMoodDocumentObservation
    {
        
        /// <summary>
        /// INT enumeration value.
        /// </summary>
        INT,
        
        /// <summary>
        /// DEF enumeration value.
        /// </summary>
        DEF,
        
        /// <summary>
        /// EVN enumeration value.
        /// </summary>
        EVN,
        
        /// <summary>
        /// GOL enumeration value.
        /// </summary>
        GOL,
        
        /// <summary>
        /// PRMS enumeration value.
        /// </summary>
        PRMS,
        
        /// <summary>
        /// PRP enumeration value.
        /// </summary>
        PRP,
        
        /// <summary>
        /// RQO enumeration value.
        /// </summary>
        RQO,
    }
    
    /// <summary>
    /// CDA x_ActRelationshipDocument enumeration.
    /// </summary>

    [Guid("61ffe81d-6ea5-4e57-bc3f-ef04c63e104c")]
    public enum x_ActRelationshipDocument
    {
        
        /// <summary>
        /// RPLC enumeration value.
        /// </summary>
        RPLC,
        
        /// <summary>
        /// APND enumeration value.
        /// </summary>
        APND,
        
        /// <summary>
        /// XFRM enumeration value.
        /// </summary>
        XFRM,
    }
    
    /// <summary>
    /// CDA x_ActRelationshipEntry enumeration.
    /// </summary>

    [Guid("6b85cca2-5943-4b4e-ad44-4e706b964261")]
    public enum x_ActRelationshipEntry
    {
        
        /// <summary>
        /// COMP enumeration value.
        /// </summary>
        COMP,
        
        /// <summary>
        /// DRIV enumeration value.
        /// </summary>
        DRIV,
    }
    
    /// <summary>
    /// CDA x_ActRelationshipEntryRelationship enumeration.
    /// </summary>

    [Guid("2cd887b3-3735-4a43-a656-7bd8f14a1a7f")]
    public enum x_ActRelationshipEntryRelationship
    {
        
        /// <summary>
        /// XCRPT enumeration value.
        /// </summary>
        XCRPT,
        
        /// <summary>
        /// COMP enumeration value.
        /// </summary>
        COMP,
        
        /// <summary>
        /// RSON enumeration value.
        /// </summary>
        RSON,
        
        /// <summary>
        /// SPRT enumeration value.
        /// </summary>
        SPRT,
        
        /// <summary>
        /// CAUS enumeration value.
        /// </summary>
        CAUS,
        
        /// <summary>
        /// GEVL enumeration value.
        /// </summary>
        GEVL,
        
        /// <summary>
        /// MFST enumeration value.
        /// </summary>
        MFST,
        
        /// <summary>
        /// REFR enumeration value.
        /// </summary>
        REFR,
        
        /// <summary>
        /// SAS enumeration value.
        /// </summary>
        SAS,
        
        /// <summary>
        /// SUBJ enumeration value.
        /// </summary>
        SUBJ,
    }
    
    /// <summary>
    /// CDA x_ActRelationshipExternalReference enumeration.
    /// </summary>

    [Guid("c560d250-2fad-42ca-a518-3f76dd2d6e81")]
    public enum x_ActRelationshipExternalReference
    {
        
        /// <summary>
        /// XCRPT enumeration value.
        /// </summary>
        XCRPT,
        
        /// <summary>
        /// RPLC enumeration value.
        /// </summary>
        RPLC,
        
        /// <summary>
        /// SPRT enumeration value.
        /// </summary>
        SPRT,
        
        /// <summary>
        /// ELNK enumeration value.
        /// </summary>
        ELNK,
        
        /// <summary>
        /// REFR enumeration value.
        /// </summary>
        REFR,
        
        /// <summary>
        /// SUBJ enumeration value.
        /// </summary>
        SUBJ,
    }
    
    /// <summary>
    /// CDA x_DocumentActMood enumeration.
    /// </summary>

    [Guid("87f644e3-a405-44fe-8146-edefc385a059")]
    public enum x_DocumentActMood
    {
        
        /// <summary>
        /// INT enumeration value.
        /// </summary>
        INT,
        
        /// <summary>
        /// APT enumeration value.
        /// </summary>
        APT,
        
        /// <summary>
        /// ARQ enumeration value.
        /// </summary>
        ARQ,
        
        /// <summary>
        /// DEF enumeration value.
        /// </summary>
        DEF,
        
        /// <summary>
        /// EVN enumeration value.
        /// </summary>
        EVN,
        
        /// <summary>
        /// PRMS enumeration value.
        /// </summary>
        PRMS,
        
        /// <summary>
        /// PRP enumeration value.
        /// </summary>
        PRP,
        
        /// <summary>
        /// RQO enumeration value.
        /// </summary>
        RQO,
    }
    
    /// <summary>
    /// CDA x_DocumentEncounterMood enumeration.
    /// </summary>

    [Guid("7831fd35-97de-4c73-9bab-b8667b364665")]
    public enum x_DocumentEncounterMood
    {
        
        /// <summary>
        /// INT enumeration value.
        /// </summary>
        INT,
        
        /// <summary>
        /// APT enumeration value.
        /// </summary>
        APT,
        
        /// <summary>
        /// ARQ enumeration value.
        /// </summary>
        ARQ,
        
        /// <summary>
        /// EVN enumeration value.
        /// </summary>
        EVN,
        
        /// <summary>
        /// PRMS enumeration value.
        /// </summary>
        PRMS,
        
        /// <summary>
        /// PRP enumeration value.
        /// </summary>
        PRP,
        
        /// <summary>
        /// RQO enumeration value.
        /// </summary>
        RQO,
    }
    
    /// <summary>
    /// CDA x_DocumentProcedureMood enumeration.
    /// </summary>

    [Guid("7065c03c-c08b-4696-9400-9045450340f4")]
    public enum x_DocumentProcedureMood
    {
        
        /// <summary>
        /// INT enumeration value.
        /// </summary>
        INT,
        
        /// <summary>
        /// APT enumeration value.
        /// </summary>
        APT,
        
        /// <summary>
        /// ARQ enumeration value.
        /// </summary>
        ARQ,
        
        /// <summary>
        /// DEF enumeration value.
        /// </summary>
        DEF,
        
        /// <summary>
        /// EVN enumeration value.
        /// </summary>
        EVN,
        
        /// <summary>
        /// PRMS enumeration value.
        /// </summary>
        PRMS,
        
        /// <summary>
        /// PRP enumeration value.
        /// </summary>
        PRP,
        
        /// <summary>
        /// RQO enumeration value.
        /// </summary>
        RQO,
    }
    
    /// <summary>
    /// CDA x_DocumentSubject enumeration.
    /// </summary>

    [Guid("289ffb17-1635-4687-860b-a4968789aba1")]
    public enum x_DocumentSubject
    {
        
        /// <summary>
        /// PAT enumeration value.
        /// </summary>
        PAT,
        
        /// <summary>
        /// PRS enumeration value.
        /// </summary>
        PRS,
    }
    
    /// <summary>
    /// CDA x_DocumentSubstanceMood enumeration.
    /// </summary>

    [Guid("bf64393f-a326-4f37-a24a-d570241c29d8")]
    public enum x_DocumentSubstanceMood
    {
        
        /// <summary>
        /// INT enumeration value.
        /// </summary>
        INT,
        
        /// <summary>
        /// EVN enumeration value.
        /// </summary>
        EVN,
        
        /// <summary>
        /// PRMS enumeration value.
        /// </summary>
        PRMS,
        
        /// <summary>
        /// PRP enumeration value.
        /// </summary>
        PRP,
        
        /// <summary>
        /// RQO enumeration value.
        /// </summary>
        RQO,
    }
    
    /// <summary>
    /// CDA x_EncounterParticipant enumeration.
    /// </summary>

    [Guid("525b24dd-5128-4e9c-97b7-7e40cb8bb8ea")]
    public enum x_EncounterParticipant
    {
        
        /// <summary>
        /// ADM enumeration value.
        /// </summary>
        ADM,
        
        /// <summary>
        /// ATND enumeration value.
        /// </summary>
        ATND,
        
        /// <summary>
        /// CON enumeration value.
        /// </summary>
        CON,
        
        /// <summary>
        /// DIS enumeration value.
        /// </summary>
        DIS,
        
        /// <summary>
        /// REF enumeration value.
        /// </summary>
        REF,
    }
    
    /// <summary>
    /// CDA x_InformationRecipient enumeration.
    /// </summary>

    [Guid("2861ffda-b674-424a-81ff-d2998a257c11")]
    public enum x_InformationRecipient
    {
        
        /// <summary>
        /// PRCP enumeration value.
        /// </summary>
        PRCP,
        
        /// <summary>
        /// TRC enumeration value.
        /// </summary>
        TRC,
    }
    
    /// <summary>
    /// CDA x_InformationRecipientRole enumeration.
    /// </summary>

    [Guid("f062a457-ccbd-449c-bc49-14e1b3052565")]
    public enum x_InformationRecipientRole
    {
        
        /// <summary>
        /// ASSIGNED enumeration value.
        /// </summary>
        ASSIGNED,
        
        /// <summary>
        /// HLTHCHRT enumeration value.
        /// </summary>
        HLTHCHRT,
    }
    
    /// <summary>
    /// CDA x_ServiceEventPerformer enumeration.
    /// </summary>

    [Guid("5331f393-fa36-4295-b7bc-ad461bf6ce21")]
    public enum x_ServiceEventPerformer
    {
        
        /// <summary>
        /// PRF enumeration value.
        /// </summary>
        PRF,
        
        /// <summary>
        /// PPRF enumeration value.
        /// </summary>
        PPRF,
        
        /// <summary>
        /// SPRF enumeration value.
        /// </summary>
        SPRF,
    }
    
    /// <summary>
    /// The IADCollection interface.
    /// </summary>

    [Guid("f8ed63d7-e042-4453-b6b2-1870d7b3bca5")]

    public partial interface IAD : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA AD object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IADXPCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The useablePeriod property.
        /// </summary>
        ISXCM_TSCollection UseablePeriod
        {
            get;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        string Use
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isNotOrdered property.
        /// </summary>
        bool IsNotOrdered
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isNotOrderedSpecified property.
        /// </summary>
        bool IsNotOrderedSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The AD class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAD))]
    [Guid("59f8c0ed-22dd-4420-b595-7a9c7047de72")]
    public partial class AD : HL7SDK.Cda.ANY, INotifyPropertyChanged, IAD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// AD finalizer.
        /// </summary>
        ~AD()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// AD constructor.
        /// </summary>
        public AD()
        {
            element = new HL7SDK.Xml.Cda.AD();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// AD constructor.
        /// </summary>
        internal AD(HL7SDK.Xml.Cda.AD element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type AD
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.AD Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.AD;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IADXPCollection Items
        {
            get
            {
                return new HL7SDK.Cda.ADXPCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// The useablePeriod property.
        /// </summary>
        public HL7SDK.Cda.ISXCM_TSCollection UseablePeriod
        {
            get
            {
                return new HL7SDK.Cda.SXCM_TSCollection(this, () => { return Element.useablePeriod; }, (x) => { Element.useablePeriod = x; });
            }
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        public string Text
        {
            get
            {
                if (Element.Text == null) return String.Empty;
                return String.Join("", Element.Text);
            }
            set
            {
                Element.Text = new [] { value };
            }
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        public string Use
        {
            get
            {
                if (Element.use == null) return String.Empty;
                return String.Join("", Element.use);
            }
            set
            {
                Element.use = new [] { value };
            }
        }
        
        /// <summary>
        /// The isNotOrdered property.
        /// </summary>
        public bool IsNotOrdered
        {
            get
            {
                return Element.isNotOrdered;
            }
            set
            {
                Element.isNotOrdered = value;
            }
        }
        
        /// <summary>
        /// The isNotOrderedSpecified property.
        /// </summary>
        public bool IsNotOrderedSpecified
        {
            get
            {
                return Element.isNotOrderedSpecified;
            }
            set
            {
                Element.isNotOrderedSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.AD();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IADCollection interface.
    /// </summary>


    [Guid("9bdb0058-e018-4ef9-a1fc-6d6bb0671ebc")]
    public partial interface IADCollection : ICDACollection, IEnumerable<IAD>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAD this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAD value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAD value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAD item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAD item1, IAD item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAD Append();
    }
    

    [Guid("0dd72a61-0368-40b0-b65d-d263280af3b3")]
    internal partial class ADCollection : CDAFactoryCollection<HL7SDK.Cda.AD, HL7SDK.Xml.Cda.AD, HL7SDK.Cda.IAD>, HL7SDK.Cda.IADCollection
    {
        
        internal ADCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.AD[]> getProp, Action<HL7SDK.Xml.Cda.AD[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IADXPCollection interface.
    /// </summary>

    [Guid("d37877b4-1171-4d14-be86-5ad723aa5d45")]

    public partial interface IADXP : IHL73Object, ICDAObject, IST
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ADXP object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ADXP class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IADXP))]
    [Guid("5887be41-98e5-42f8-979e-cf79479eefde")]
    public partial class ADXP : HL7SDK.Cda.ST, INotifyPropertyChanged, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ADXP finalizer.
        /// </summary>
        ~ADXP()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ADXP constructor.
        /// </summary>
        public ADXP()
        {
            element = new HL7SDK.Xml.Cda.ADXP();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ADXP constructor.
        /// </summary>
        internal ADXP(HL7SDK.Xml.Cda.ADXP element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ADXP
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ADXP Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ADXP;
            }
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        public string PartType
        {
            get
            {
                return Element.partType;
            }
            set
            {
                Element.partType = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.ADXP();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IADXPCollection interface.
    /// </summary>


    [Guid("868de46e-3d48-4d1d-8f4f-3b602c9e3ed1")]
    public partial interface IADXPCollection : ICDACollection, IEnumerable<IADXP>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IADXP this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IADXP value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IADXP value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IADXP item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IADXP item1, IADXP item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IADXP Append();
    }
    

    [Guid("f128250d-43a6-43dc-ae8e-be4668fe2373")]
    internal partial class ADXPCollection : CDAFactoryCollection<HL7SDK.Cda.ADXP, HL7SDK.Xml.Cda.ADXP, HL7SDK.Cda.IADXP>, HL7SDK.Cda.IADXPCollection
    {
        
        internal ADXPCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.ADXP[]> getProp, Action<HL7SDK.Xml.Cda.ADXP[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IadxpadditionalLocatorCollection interface.
    /// </summary>

    [Guid("f4b9335a-3e2f-452a-bfd9-69bae57a921f")]

    public partial interface IadxpadditionalLocator : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpadditionalLocator object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpadditionalLocator class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpadditionalLocator))]
    [Guid("bb7019f4-a9fe-4e83-958d-79d44c75d672")]
    public partial class adxpadditionalLocator : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpadditionalLocator, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpadditionalLocator finalizer.
        /// </summary>
        ~adxpadditionalLocator()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpadditionalLocator constructor.
        /// </summary>
        public adxpadditionalLocator()
        {
            element = new HL7SDK.Xml.Cda.adxpadditionalLocator();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpadditionalLocator constructor.
        /// </summary>
        internal adxpadditionalLocator(HL7SDK.Xml.Cda.adxpadditionalLocator element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpadditionalLocator
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpadditionalLocator Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpadditionalLocator;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpadditionalLocator();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpbuildingNumberSuffixCollection interface.
    /// </summary>

    [Guid("d7ef17cd-3560-41ef-a8eb-50f0ada09d0b")]

    public partial interface IadxpbuildingNumberSuffix : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpbuildingNumberSuffix object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpbuildingNumberSuffix class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpbuildingNumberSuffix))]
    [Guid("6eb135bc-5ac9-491b-8b81-66dfab9aa989")]
    public partial class adxpbuildingNumberSuffix : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpbuildingNumberSuffix, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpbuildingNumberSuffix finalizer.
        /// </summary>
        ~adxpbuildingNumberSuffix()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpbuildingNumberSuffix constructor.
        /// </summary>
        public adxpbuildingNumberSuffix()
        {
            element = new HL7SDK.Xml.Cda.adxpbuildingNumberSuffix();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpbuildingNumberSuffix constructor.
        /// </summary>
        internal adxpbuildingNumberSuffix(HL7SDK.Xml.Cda.adxpbuildingNumberSuffix element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpbuildingNumberSuffix
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpbuildingNumberSuffix Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpbuildingNumberSuffix;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpbuildingNumberSuffix();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpcareOfCollection interface.
    /// </summary>

    [Guid("ee2a3bdf-ddb8-4f50-a0ab-0715c2e80bc9")]

    public partial interface IadxpcareOf : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpcareOf object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpcareOf class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpcareOf))]
    [Guid("91d7d772-4e7c-4e40-893a-6a764c207b2d")]
    public partial class adxpcareOf : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpcareOf, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpcareOf finalizer.
        /// </summary>
        ~adxpcareOf()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpcareOf constructor.
        /// </summary>
        public adxpcareOf()
        {
            element = new HL7SDK.Xml.Cda.adxpcareOf();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpcareOf constructor.
        /// </summary>
        internal adxpcareOf(HL7SDK.Xml.Cda.adxpcareOf element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpcareOf
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpcareOf Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpcareOf;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpcareOf();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpcensusTractCollection interface.
    /// </summary>

    [Guid("6829e294-30c5-4c57-a1bf-e1b4bea22e9e")]

    public partial interface IadxpcensusTract : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpcensusTract object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpcensusTract class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpcensusTract))]
    [Guid("35988b51-b68c-4c47-bbae-a4e8ff1812f4")]
    public partial class adxpcensusTract : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpcensusTract, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpcensusTract finalizer.
        /// </summary>
        ~adxpcensusTract()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpcensusTract constructor.
        /// </summary>
        public adxpcensusTract()
        {
            element = new HL7SDK.Xml.Cda.adxpcensusTract();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpcensusTract constructor.
        /// </summary>
        internal adxpcensusTract(HL7SDK.Xml.Cda.adxpcensusTract element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpcensusTract
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpcensusTract Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpcensusTract;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpcensusTract();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpcityCollection interface.
    /// </summary>

    [Guid("b7130c34-6e23-4788-9b41-133392d7cb4c")]

    public partial interface Iadxpcity : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpcity object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpcity class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iadxpcity))]
    [Guid("1910aa08-9bdd-4075-8350-38ea7658fc73")]
    public partial class adxpcity : HL7SDK.Cda.ADXP, INotifyPropertyChanged, Iadxpcity, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpcity finalizer.
        /// </summary>
        ~adxpcity()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpcity constructor.
        /// </summary>
        public adxpcity()
        {
            element = new HL7SDK.Xml.Cda.adxpcity();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpcity constructor.
        /// </summary>
        internal adxpcity(HL7SDK.Xml.Cda.adxpcity element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpcity
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpcity Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpcity;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpcity();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpcountryCollection interface.
    /// </summary>

    [Guid("7b05b31c-2311-4cab-aeb7-171a2e3b9096")]

    public partial interface Iadxpcountry : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpcountry object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpcountry class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iadxpcountry))]
    [Guid("b629bf52-f878-4eaa-88cd-1753d1fb9d0d")]
    public partial class adxpcountry : HL7SDK.Cda.ADXP, INotifyPropertyChanged, Iadxpcountry, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpcountry finalizer.
        /// </summary>
        ~adxpcountry()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpcountry constructor.
        /// </summary>
        public adxpcountry()
        {
            element = new HL7SDK.Xml.Cda.adxpcountry();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpcountry constructor.
        /// </summary>
        internal adxpcountry(HL7SDK.Xml.Cda.adxpcountry element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpcountry
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpcountry Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpcountry;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpcountry();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpcountyCollection interface.
    /// </summary>

    [Guid("e4b3edaa-029e-40ae-8737-4f063322c790")]

    public partial interface Iadxpcounty : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpcounty object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpcounty class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iadxpcounty))]
    [Guid("6ede7733-5b9f-45f1-a56f-c65b27378f88")]
    public partial class adxpcounty : HL7SDK.Cda.ADXP, INotifyPropertyChanged, Iadxpcounty, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpcounty finalizer.
        /// </summary>
        ~adxpcounty()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpcounty constructor.
        /// </summary>
        public adxpcounty()
        {
            element = new HL7SDK.Xml.Cda.adxpcounty();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpcounty constructor.
        /// </summary>
        internal adxpcounty(HL7SDK.Xml.Cda.adxpcounty element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpcounty
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpcounty Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpcounty;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpcounty();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdelimiterCollection interface.
    /// </summary>

    [Guid("16109361-7dee-4b8d-9fbc-dd654e64b6c8")]

    public partial interface Iadxpdelimiter : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdelimiter object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdelimiter class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iadxpdelimiter))]
    [Guid("490ce79f-41f7-48de-b2d7-0627cdceb99b")]
    public partial class adxpdelimiter : HL7SDK.Cda.ADXP, INotifyPropertyChanged, Iadxpdelimiter, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdelimiter finalizer.
        /// </summary>
        ~adxpdelimiter()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdelimiter constructor.
        /// </summary>
        public adxpdelimiter()
        {
            element = new HL7SDK.Xml.Cda.adxpdelimiter();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdelimiter constructor.
        /// </summary>
        internal adxpdelimiter(HL7SDK.Xml.Cda.adxpdelimiter element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdelimiter
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdelimiter Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdelimiter;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdelimiter();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdeliveryAddressLineCollection interface.
    /// </summary>

    [Guid("37f2b975-f357-46e5-9c27-27fc58e8448f")]

    public partial interface IadxpdeliveryAddressLine : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdeliveryAddressLine object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdeliveryAddressLine class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpdeliveryAddressLine))]
    [Guid("fc6b48a9-af58-4f7f-a519-4069fa1510e1")]
    public partial class adxpdeliveryAddressLine : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpdeliveryAddressLine, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdeliveryAddressLine finalizer.
        /// </summary>
        ~adxpdeliveryAddressLine()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdeliveryAddressLine constructor.
        /// </summary>
        public adxpdeliveryAddressLine()
        {
            element = new HL7SDK.Xml.Cda.adxpdeliveryAddressLine();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdeliveryAddressLine constructor.
        /// </summary>
        internal adxpdeliveryAddressLine(HL7SDK.Xml.Cda.adxpdeliveryAddressLine element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdeliveryAddressLine
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdeliveryAddressLine Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdeliveryAddressLine;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdeliveryAddressLine();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdeliveryInstallationAreaCollection interface.
    /// </summary>

    [Guid("ced9de7c-e325-4b5b-b7e9-3b0f98db4566")]

    public partial interface IadxpdeliveryInstallationArea : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdeliveryInstallationArea object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdeliveryInstallationArea class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpdeliveryInstallationArea))]
    [Guid("739d6584-2217-4bd4-a4f7-cd3e871d2e1b")]
    public partial class adxpdeliveryInstallationArea : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpdeliveryInstallationArea, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdeliveryInstallationArea finalizer.
        /// </summary>
        ~adxpdeliveryInstallationArea()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdeliveryInstallationArea constructor.
        /// </summary>
        public adxpdeliveryInstallationArea()
        {
            element = new HL7SDK.Xml.Cda.adxpdeliveryInstallationArea();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdeliveryInstallationArea constructor.
        /// </summary>
        internal adxpdeliveryInstallationArea(HL7SDK.Xml.Cda.adxpdeliveryInstallationArea element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdeliveryInstallationArea
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdeliveryInstallationArea Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdeliveryInstallationArea;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdeliveryInstallationArea();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdeliveryInstallationQualifierCollection interface.
    /// </summary>

    [Guid("16600b69-e5ee-4d96-8629-36c0c8b2f10b")]

    public partial interface IadxpdeliveryInstallationQualifier : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdeliveryInstallationQualifier object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdeliveryInstallationQualifier class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpdeliveryInstallationQualifier))]
    [Guid("e1fd7987-c4e8-4e96-b2db-01b483ec77c2")]
    public partial class adxpdeliveryInstallationQualifier : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpdeliveryInstallationQualifier, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdeliveryInstallationQualifier finalizer.
        /// </summary>
        ~adxpdeliveryInstallationQualifier()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdeliveryInstallationQualifier constructor.
        /// </summary>
        public adxpdeliveryInstallationQualifier()
        {
            element = new HL7SDK.Xml.Cda.adxpdeliveryInstallationQualifier();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdeliveryInstallationQualifier constructor.
        /// </summary>
        internal adxpdeliveryInstallationQualifier(HL7SDK.Xml.Cda.adxpdeliveryInstallationQualifier element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdeliveryInstallationQualifier
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdeliveryInstallationQualifier Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdeliveryInstallationQualifier;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdeliveryInstallationQualifier();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdeliveryInstallationTypeCollection interface.
    /// </summary>

    [Guid("e5c36565-2250-4163-b608-46a6c3166606")]

    public partial interface IadxpdeliveryInstallationType : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdeliveryInstallationType object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdeliveryInstallationType class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpdeliveryInstallationType))]
    [Guid("443486c5-d6a1-4b10-bbdc-f5f135c0ad5d")]
    public partial class adxpdeliveryInstallationType : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpdeliveryInstallationType, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdeliveryInstallationType finalizer.
        /// </summary>
        ~adxpdeliveryInstallationType()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdeliveryInstallationType constructor.
        /// </summary>
        public adxpdeliveryInstallationType()
        {
            element = new HL7SDK.Xml.Cda.adxpdeliveryInstallationType();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdeliveryInstallationType constructor.
        /// </summary>
        internal adxpdeliveryInstallationType(HL7SDK.Xml.Cda.adxpdeliveryInstallationType element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdeliveryInstallationType
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdeliveryInstallationType Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdeliveryInstallationType;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdeliveryInstallationType();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdeliveryModeCollection interface.
    /// </summary>

    [Guid("a5f3d82f-6dc1-427d-bcce-52102a7390e7")]

    public partial interface IadxpdeliveryMode : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdeliveryMode object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdeliveryMode class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpdeliveryMode))]
    [Guid("f2eb1b6f-2fde-4275-882b-12e25f8fba48")]
    public partial class adxpdeliveryMode : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpdeliveryMode, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdeliveryMode finalizer.
        /// </summary>
        ~adxpdeliveryMode()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdeliveryMode constructor.
        /// </summary>
        public adxpdeliveryMode()
        {
            element = new HL7SDK.Xml.Cda.adxpdeliveryMode();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdeliveryMode constructor.
        /// </summary>
        internal adxpdeliveryMode(HL7SDK.Xml.Cda.adxpdeliveryMode element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdeliveryMode
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdeliveryMode Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdeliveryMode;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdeliveryMode();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdeliveryModeIdentifierCollection interface.
    /// </summary>

    [Guid("5446711e-8f55-47e7-aec8-3b89847e9226")]

    public partial interface IadxpdeliveryModeIdentifier : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdeliveryModeIdentifier object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdeliveryModeIdentifier class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpdeliveryModeIdentifier))]
    [Guid("16b6638a-3095-4c54-8d88-aab3b148039b")]
    public partial class adxpdeliveryModeIdentifier : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpdeliveryModeIdentifier, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdeliveryModeIdentifier finalizer.
        /// </summary>
        ~adxpdeliveryModeIdentifier()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdeliveryModeIdentifier constructor.
        /// </summary>
        public adxpdeliveryModeIdentifier()
        {
            element = new HL7SDK.Xml.Cda.adxpdeliveryModeIdentifier();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdeliveryModeIdentifier constructor.
        /// </summary>
        internal adxpdeliveryModeIdentifier(HL7SDK.Xml.Cda.adxpdeliveryModeIdentifier element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdeliveryModeIdentifier
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdeliveryModeIdentifier Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdeliveryModeIdentifier;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdeliveryModeIdentifier();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpdirectionCollection interface.
    /// </summary>

    [Guid("a6724281-7710-4f07-9010-a5fdd8c7b597")]

    public partial interface Iadxpdirection : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpdirection object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpdirection class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iadxpdirection))]
    [Guid("2e00372a-3298-417a-81a7-97df31fe4a50")]
    public partial class adxpdirection : HL7SDK.Cda.ADXP, INotifyPropertyChanged, Iadxpdirection, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpdirection finalizer.
        /// </summary>
        ~adxpdirection()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpdirection constructor.
        /// </summary>
        public adxpdirection()
        {
            element = new HL7SDK.Xml.Cda.adxpdirection();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpdirection constructor.
        /// </summary>
        internal adxpdirection(HL7SDK.Xml.Cda.adxpdirection element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpdirection
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpdirection Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpdirection;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpdirection();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxphouseNumberCollection interface.
    /// </summary>

    [Guid("40dc6f23-1aa7-47cf-ac09-19eb585bddc1")]

    public partial interface IadxphouseNumber : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxphouseNumber object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxphouseNumber class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxphouseNumber))]
    [Guid("cc4a6a55-c496-4a80-94a2-8376550396f1")]
    public partial class adxphouseNumber : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxphouseNumber, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxphouseNumber finalizer.
        /// </summary>
        ~adxphouseNumber()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxphouseNumber constructor.
        /// </summary>
        public adxphouseNumber()
        {
            element = new HL7SDK.Xml.Cda.adxphouseNumber();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxphouseNumber constructor.
        /// </summary>
        internal adxphouseNumber(HL7SDK.Xml.Cda.adxphouseNumber element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxphouseNumber
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxphouseNumber Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxphouseNumber;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxphouseNumber();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxphouseNumberNumericCollection interface.
    /// </summary>

    [Guid("c665485f-d644-4a8e-ab7c-a126c1b349e7")]

    public partial interface IadxphouseNumberNumeric : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxphouseNumberNumeric object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxphouseNumberNumeric class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxphouseNumberNumeric))]
    [Guid("c043c34d-5e91-4626-9ac8-dea0703f6247")]
    public partial class adxphouseNumberNumeric : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxphouseNumberNumeric, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxphouseNumberNumeric finalizer.
        /// </summary>
        ~adxphouseNumberNumeric()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxphouseNumberNumeric constructor.
        /// </summary>
        public adxphouseNumberNumeric()
        {
            element = new HL7SDK.Xml.Cda.adxphouseNumberNumeric();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxphouseNumberNumeric constructor.
        /// </summary>
        internal adxphouseNumberNumeric(HL7SDK.Xml.Cda.adxphouseNumberNumeric element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxphouseNumberNumeric
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxphouseNumberNumeric Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxphouseNumberNumeric;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxphouseNumberNumeric();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxppostalCodeCollection interface.
    /// </summary>

    [Guid("a658e80b-8fc5-4f03-b97b-0bb0aaf656ef")]

    public partial interface IadxppostalCode : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxppostalCode object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxppostalCode class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxppostalCode))]
    [Guid("456b8b86-c09f-49e9-b11f-21e08a349918")]
    public partial class adxppostalCode : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxppostalCode, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxppostalCode finalizer.
        /// </summary>
        ~adxppostalCode()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxppostalCode constructor.
        /// </summary>
        public adxppostalCode()
        {
            element = new HL7SDK.Xml.Cda.adxppostalCode();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxppostalCode constructor.
        /// </summary>
        internal adxppostalCode(HL7SDK.Xml.Cda.adxppostalCode element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxppostalCode
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxppostalCode Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxppostalCode;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxppostalCode();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxppostBoxCollection interface.
    /// </summary>

    [Guid("433f0f5f-81d8-43d5-bc1e-4bf7caba2371")]

    public partial interface IadxppostBox : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxppostBox object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxppostBox class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxppostBox))]
    [Guid("9d3d8fdc-2f14-4cae-a2dd-71e717188bea")]
    public partial class adxppostBox : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxppostBox, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxppostBox finalizer.
        /// </summary>
        ~adxppostBox()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxppostBox constructor.
        /// </summary>
        public adxppostBox()
        {
            element = new HL7SDK.Xml.Cda.adxppostBox();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxppostBox constructor.
        /// </summary>
        internal adxppostBox(HL7SDK.Xml.Cda.adxppostBox element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxppostBox
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxppostBox Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxppostBox;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxppostBox();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpprecinctCollection interface.
    /// </summary>

    [Guid("c5e67bd9-f949-4b50-ac89-d0efb0249234")]

    public partial interface Iadxpprecinct : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpprecinct object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpprecinct class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iadxpprecinct))]
    [Guid("b3e207ec-8374-410b-9c32-230b9d576a1c")]
    public partial class adxpprecinct : HL7SDK.Cda.ADXP, INotifyPropertyChanged, Iadxpprecinct, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpprecinct finalizer.
        /// </summary>
        ~adxpprecinct()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpprecinct constructor.
        /// </summary>
        public adxpprecinct()
        {
            element = new HL7SDK.Xml.Cda.adxpprecinct();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpprecinct constructor.
        /// </summary>
        internal adxpprecinct(HL7SDK.Xml.Cda.adxpprecinct element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpprecinct
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpprecinct Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpprecinct;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpprecinct();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpstateCollection interface.
    /// </summary>

    [Guid("e35444a6-a79c-41b0-8b6f-c2daff9ce025")]

    public partial interface Iadxpstate : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpstate object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpstate class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iadxpstate))]
    [Guid("8fb8605e-374f-4861-8020-6b3c0bd1fe68")]
    public partial class adxpstate : HL7SDK.Cda.ADXP, INotifyPropertyChanged, Iadxpstate, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpstate finalizer.
        /// </summary>
        ~adxpstate()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpstate constructor.
        /// </summary>
        public adxpstate()
        {
            element = new HL7SDK.Xml.Cda.adxpstate();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpstate constructor.
        /// </summary>
        internal adxpstate(HL7SDK.Xml.Cda.adxpstate element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpstate
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpstate Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpstate;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpstate();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpstreetAddressLineCollection interface.
    /// </summary>

    [Guid("89b92634-eb09-403f-8131-cfd5e5b10772")]

    public partial interface IadxpstreetAddressLine : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpstreetAddressLine object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpstreetAddressLine class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpstreetAddressLine))]
    [Guid("ca923cdc-3166-40b1-8026-8c6089906e90")]
    public partial class adxpstreetAddressLine : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpstreetAddressLine, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpstreetAddressLine finalizer.
        /// </summary>
        ~adxpstreetAddressLine()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpstreetAddressLine constructor.
        /// </summary>
        public adxpstreetAddressLine()
        {
            element = new HL7SDK.Xml.Cda.adxpstreetAddressLine();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpstreetAddressLine constructor.
        /// </summary>
        internal adxpstreetAddressLine(HL7SDK.Xml.Cda.adxpstreetAddressLine element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpstreetAddressLine
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpstreetAddressLine Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpstreetAddressLine;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpstreetAddressLine();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpstreetNameCollection interface.
    /// </summary>

    [Guid("79e94959-1743-42e4-aabd-9d664cba7269")]

    public partial interface IadxpstreetName : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpstreetName object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpstreetName class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpstreetName))]
    [Guid("c04ec405-3942-4310-8649-b61740206c25")]
    public partial class adxpstreetName : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpstreetName, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpstreetName finalizer.
        /// </summary>
        ~adxpstreetName()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpstreetName constructor.
        /// </summary>
        public adxpstreetName()
        {
            element = new HL7SDK.Xml.Cda.adxpstreetName();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpstreetName constructor.
        /// </summary>
        internal adxpstreetName(HL7SDK.Xml.Cda.adxpstreetName element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpstreetName
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpstreetName Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpstreetName;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpstreetName();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpstreetNameBaseCollection interface.
    /// </summary>

    [Guid("bf05ccea-1db6-4ced-8e49-52763da37cff")]

    public partial interface IadxpstreetNameBase : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpstreetNameBase object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpstreetNameBase class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpstreetNameBase))]
    [Guid("ff971170-2daf-42e5-8072-b71e9a84001e")]
    public partial class adxpstreetNameBase : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpstreetNameBase, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpstreetNameBase finalizer.
        /// </summary>
        ~adxpstreetNameBase()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpstreetNameBase constructor.
        /// </summary>
        public adxpstreetNameBase()
        {
            element = new HL7SDK.Xml.Cda.adxpstreetNameBase();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpstreetNameBase constructor.
        /// </summary>
        internal adxpstreetNameBase(HL7SDK.Xml.Cda.adxpstreetNameBase element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpstreetNameBase
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpstreetNameBase Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpstreetNameBase;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpstreetNameBase();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpstreetNameTypeCollection interface.
    /// </summary>

    [Guid("03699bb0-2e2c-4cee-aca4-893c86fbd183")]

    public partial interface IadxpstreetNameType : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpstreetNameType object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpstreetNameType class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpstreetNameType))]
    [Guid("a828b63e-8731-4a41-8173-c152bdb8acba")]
    public partial class adxpstreetNameType : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpstreetNameType, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpstreetNameType finalizer.
        /// </summary>
        ~adxpstreetNameType()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpstreetNameType constructor.
        /// </summary>
        public adxpstreetNameType()
        {
            element = new HL7SDK.Xml.Cda.adxpstreetNameType();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpstreetNameType constructor.
        /// </summary>
        internal adxpstreetNameType(HL7SDK.Xml.Cda.adxpstreetNameType element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpstreetNameType
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpstreetNameType Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpstreetNameType;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpstreetNameType();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpunitIDCollection interface.
    /// </summary>

    [Guid("8a7dc5dd-6075-4a2f-b0ea-e6446486a151")]

    public partial interface IadxpunitID : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpunitID object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpunitID class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpunitID))]
    [Guid("869b5392-9980-46ed-a683-d02676eb973e")]
    public partial class adxpunitID : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpunitID, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpunitID finalizer.
        /// </summary>
        ~adxpunitID()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpunitID constructor.
        /// </summary>
        public adxpunitID()
        {
            element = new HL7SDK.Xml.Cda.adxpunitID();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpunitID constructor.
        /// </summary>
        internal adxpunitID(HL7SDK.Xml.Cda.adxpunitID element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpunitID
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpunitID Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpunitID;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpunitID();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IadxpunitTypeCollection interface.
    /// </summary>

    [Guid("2b82a3c6-06d2-4a64-bba3-3cce2bdf2fb4")]

    public partial interface IadxpunitType : IHL73Object, ICDAObject, IADXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA adxpunitType object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The adxpunitType class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IadxpunitType))]
    [Guid("870bf5e3-c0c9-452b-800b-40a677153a7c")]
    public partial class adxpunitType : HL7SDK.Cda.ADXP, INotifyPropertyChanged, IadxpunitType, IADXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// adxpunitType finalizer.
        /// </summary>
        ~adxpunitType()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// adxpunitType constructor.
        /// </summary>
        public adxpunitType()
        {
            element = new HL7SDK.Xml.Cda.adxpunitType();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// adxpunitType constructor.
        /// </summary>
        internal adxpunitType(HL7SDK.Xml.Cda.adxpunitType element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type adxpunitType
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.adxpunitType Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.adxpunitType;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.adxpunitType();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IANYCollection interface.
    /// </summary>

    [Guid("ff6b0561-d4e7-4a25-821e-507dfc1cbf3b")]

    public partial interface IANY : IHL73Object, ICDAObject, IDataTypeElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ANY object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ANY class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IANY))]
    [Guid("10ff1572-f053-4b16-b768-80ce73d27f9d")]
    public abstract partial class ANY : DataTypeElement, INotifyPropertyChanged, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ANY finalizer.
        /// </summary>
        ~ANY()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ANY constructor.
        /// </summary>
        public ANY()
        {
        }
        
        /// <summary>
        /// ANY constructor.
        /// </summary>
        internal ANY(HL7SDK.Xml.Cda.ANY element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ANY
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ANY Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ANY;
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
    }
    
    /// <summary>
    /// The IANYCollection interface.
    /// </summary>


    [Guid("7c7b8ce5-ba1a-47b5-98d4-ee9bd80d29f6")]
    public partial interface IANYCollection : ICDACollection, IEnumerable<IANY>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IANY this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IANY value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IANY value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IANY item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IANY item1, IANY item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
    }
    

    [Guid("c25c8017-430c-45cd-8964-48c3c0c1986c")]
    internal partial class ANYCollection : CDACollection<HL7SDK.Cda.ANY, HL7SDK.Xml.Cda.ANY, HL7SDK.Cda.IANY>, HL7SDK.Cda.IANYCollection
    {
        
        internal ANYCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.ANY[]> getProp, Action<HL7SDK.Xml.Cda.ANY[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IANYNonNullCollection interface.
    /// </summary>

    [Guid("9aac590a-dbd4-47df-b93b-dcad1e95ed9e")]

    public partial interface IANYNonNull : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ANYNonNull object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ANYNonNull class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IANYNonNull))]
    [Guid("47e1f436-b5c8-4abf-8536-62f5b9f7766a")]
    public partial class ANYNonNull : HL7SDK.Cda.ANY, INotifyPropertyChanged, IANYNonNull, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ANYNonNull finalizer.
        /// </summary>
        ~ANYNonNull()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ANYNonNull constructor.
        /// </summary>
        public ANYNonNull()
        {
            element = new HL7SDK.Xml.Cda.ANYNonNull();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ANYNonNull constructor.
        /// </summary>
        internal ANYNonNull(HL7SDK.Xml.Cda.ANYNonNull element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ANYNonNull
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ANYNonNull Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ANYNonNull;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.ANYNonNull();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IBINCollection interface.
    /// </summary>

    [Guid("f42d28f1-2c16-4687-bc21-c7a07469edb2")]

    public partial interface IBIN : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA BIN object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The BIN class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IBIN))]
    [Guid("e4e50447-2e1b-4dd4-8a9d-4306679029ec")]
    public abstract partial class BIN : HL7SDK.Cda.ANY, INotifyPropertyChanged, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// BIN finalizer.
        /// </summary>
        ~BIN()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// BIN constructor.
        /// </summary>
        public BIN()
        {
        }
        
        /// <summary>
        /// BIN constructor.
        /// </summary>
        internal BIN(HL7SDK.Xml.Cda.BIN element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type BIN
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.BIN Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.BIN;
            }
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        public HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get
            {
                return (HL7SDK.Cda.BinaryDataEncoding)Element.representation;
            }
            set
            {
                Element.representation = (HL7SDK.Xml.Cda.BinaryDataEncoding)value;
            }
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        public string Text
        {
            get
            {
                if (Element.Text == null) return String.Empty;
                return String.Join("", Element.Text);
            }
            set
            {
                Element.Text = new [] { value };
            }
        }
    }
    
    /// <summary>
    /// The IBLCollection interface.
    /// </summary>

    [Guid("209b37cc-1f8f-4622-8a98-3e6d4a8f9643")]

    public partial interface IBL : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA BL object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        bool Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valueSpecified property.
        /// </summary>
        bool ValueSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The BL class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IBL))]
    [Guid("886ca420-2fb0-4af3-9aa5-79d6f612b0c0")]
    public partial class BL : HL7SDK.Cda.ANY, INotifyPropertyChanged, IBL, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// BL finalizer.
        /// </summary>
        ~BL()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// BL constructor.
        /// </summary>
        public BL()
        {
            element = new HL7SDK.Xml.Cda.BL();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// BL constructor.
        /// </summary>
        internal BL(HL7SDK.Xml.Cda.BL element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type BL
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.BL Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.BL;
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public bool Value
        {
            get
            {
                return Element.value;
            }
            set
            {
                Element.value = value;
            }
        }
        
        /// <summary>
        /// The valueSpecified property.
        /// </summary>
        public bool ValueSpecified
        {
            get
            {
                return Element.valueSpecified;
            }
            set
            {
                Element.valueSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.BL();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IBNCollection interface.
    /// </summary>

    [Guid("005c30ab-7cf8-44cd-be71-f16ab188f7f1")]

    public partial interface IBN : IHL73Object, ICDAObject, IANYNonNull
    {
        
        /// <summary>
        /// Gets the XML text of the CDA BN object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        bool Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valueSpecified property.
        /// </summary>
        bool ValueSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The BN class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IBN))]
    [Guid("ac7edefd-086e-42d9-8605-2bb51c0aadbd")]
    public partial class BN : HL7SDK.Cda.ANYNonNull, INotifyPropertyChanged, IBN, IANYNonNull, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// BN finalizer.
        /// </summary>
        ~BN()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// BN constructor.
        /// </summary>
        public BN()
        {
            element = new HL7SDK.Xml.Cda.BN();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// BN constructor.
        /// </summary>
        internal BN(HL7SDK.Xml.Cda.BN element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type BN
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.BN Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.BN;
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public bool Value
        {
            get
            {
                return Element.value;
            }
            set
            {
                Element.value = value;
            }
        }
        
        /// <summary>
        /// The valueSpecified property.
        /// </summary>
        public bool ValueSpecified
        {
            get
            {
                return Element.valueSpecified;
            }
            set
            {
                Element.valueSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.BN();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IBXIT_CDCollection interface.
    /// </summary>

    [Guid("b9e75969-2453-4407-8adf-e251ed08db83")]

    public partial interface IBXIT_CD : IHL73Object, ICDAObject, ICD
    {
        
        /// <summary>
        /// Gets the XML text of the CDA BXIT_CD object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The BXIT_CD class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IBXIT_CD))]
    [Guid("01585001-bbc9-458f-a6cd-acb10687526b")]
    public partial class BXIT_CD : HL7SDK.Cda.CD, INotifyPropertyChanged, IBXIT_CD, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// BXIT_CD finalizer.
        /// </summary>
        ~BXIT_CD()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// BXIT_CD constructor.
        /// </summary>
        public BXIT_CD()
        {
            element = new HL7SDK.Xml.Cda.BXIT_CD();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// BXIT_CD constructor.
        /// </summary>
        internal BXIT_CD(HL7SDK.Xml.Cda.BXIT_CD element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type BXIT_CD
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.BXIT_CD Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.BXIT_CD;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.BXIT_CD();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IBXIT_IVL_PQCollection interface.
    /// </summary>

    [Guid("ee210e43-c7bc-43f0-a49e-4270c424181f")]

    public partial interface IBXIT_IVL_PQ : IHL73Object, ICDAObject, IIVL_PQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA BXIT_IVL_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        new IPQCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The BXIT_IVL_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IBXIT_IVL_PQ))]
    [Guid("d3f760f7-8ea8-43f0-b895-dadb3b9e5e41")]
    public partial class BXIT_IVL_PQ : HL7SDK.Cda.IVL_PQ, INotifyPropertyChanged, IBXIT_IVL_PQ, IIVL_PQ, ISXCM_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// BXIT_IVL_PQ finalizer.
        /// </summary>
        ~BXIT_IVL_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// BXIT_IVL_PQ constructor.
        /// </summary>
        public BXIT_IVL_PQ()
        {
            element = new HL7SDK.Xml.Cda.BXIT_IVL_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// BXIT_IVL_PQ constructor.
        /// </summary>
        internal BXIT_IVL_PQ(HL7SDK.Xml.Cda.BXIT_IVL_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type BXIT_IVL_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.BXIT_IVL_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.BXIT_IVL_PQ;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.BXIT_IVL_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICDCollection interface.
    /// </summary>

    [Guid("02e8f2b6-9c2d-4576-8d42-76147879b21b")]

    public partial interface ICD : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA CD object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The CD class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICD))]
    [Guid("6a4d21f4-f5d5-4c4f-8661-1a26346f9d78")]
    public partial class CD : HL7SDK.Cda.ANY, INotifyPropertyChanged, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// CD finalizer.
        /// </summary>
        ~CD()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// CD constructor.
        /// </summary>
        public CD()
        {
            element = new HL7SDK.Xml.Cda.CD();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// CD constructor.
        /// </summary>
        internal CD(HL7SDK.Xml.Cda.CD element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type CD
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.CD Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.CD;
            }
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        public HL7SDK.Cda.IED OriginalText
        {
            get
            {
                if (Element.originalText == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.originalText = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.originalText, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.originalText = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.originalText = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        public HL7SDK.Cda.ICRCollection Qualifier
        {
            get
            {
                return new HL7SDK.Cda.CRCollection(this, () => { return Element.qualifier; }, (x) => { Element.qualifier = x; });
            }
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        public HL7SDK.Cda.ICDCollection Translation
        {
            get
            {
                return new HL7SDK.Cda.CDCollection(this, () => { return Element.translation; }, (x) => { Element.translation = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public string Code
        {
            get
            {
                return Element.code;
            }
            set
            {
                Element.code = value;
            }
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        public string CodeSystem
        {
            get
            {
                return Element.codeSystem;
            }
            set
            {
                Element.codeSystem = value;
            }
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        public string CodeSystemName
        {
            get
            {
                return Element.codeSystemName;
            }
            set
            {
                Element.codeSystemName = value;
            }
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        public string CodeSystemVersion
        {
            get
            {
                return Element.codeSystemVersion;
            }
            set
            {
                Element.codeSystemVersion = value;
            }
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        public string DisplayName
        {
            get
            {
                return Element.displayName;
            }
            set
            {
                Element.displayName = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.CD();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICDCollection interface.
    /// </summary>


    [Guid("887932bf-6403-417b-b949-4bc9973f5e40")]
    public partial interface ICDCollection : ICDACollection, IEnumerable<ICD>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ICD this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ICD value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ICD value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ICD item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ICD item1, ICD item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ICD Append();
    }
    

    [Guid("74be34f5-feb9-440c-973a-90d5e718bb02")]
    internal partial class CDCollection : CDAFactoryCollection<HL7SDK.Cda.CD, HL7SDK.Xml.Cda.CD, HL7SDK.Cda.ICD>, HL7SDK.Cda.ICDCollection
    {
        
        internal CDCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.CD[]> getProp, Action<HL7SDK.Xml.Cda.CD[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ICECollection interface.
    /// </summary>

    [Guid("d1046221-eb1e-4a04-8588-0961c3c7e945")]

    public partial interface ICE : IHL73Object, ICDAObject, ICD
    {
        
        /// <summary>
        /// Gets the XML text of the CDA CE object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The CE class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICE))]
    [Guid("acbca79c-4a1f-4d19-90f8-8521f9906c4c")]
    public partial class CE : HL7SDK.Cda.CD, INotifyPropertyChanged, ICE, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// CE finalizer.
        /// </summary>
        ~CE()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// CE constructor.
        /// </summary>
        public CE()
        {
            element = new HL7SDK.Xml.Cda.CE();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// CE constructor.
        /// </summary>
        internal CE(HL7SDK.Xml.Cda.CE element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type CE
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.CE Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.CE;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.CE();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICECollection interface.
    /// </summary>


    [Guid("f23d9311-4171-49fa-bfdf-3ef2f0b95814")]
    public partial interface ICECollection : ICDACollection, IEnumerable<ICE>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ICE this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ICE value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ICE value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ICE item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ICE item1, ICE item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ICE Append();
    }
    

    [Guid("c65a8afc-4b67-4c8e-87a5-0a4c62b29642")]
    internal partial class CECollection : CDAFactoryCollection<HL7SDK.Cda.CE, HL7SDK.Xml.Cda.CE, HL7SDK.Cda.ICE>, HL7SDK.Cda.ICECollection
    {
        
        internal CECollection(CDAObject parent, Func<HL7SDK.Xml.Cda.CE[]> getProp, Action<HL7SDK.Xml.Cda.CE[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ICOCollection interface.
    /// </summary>

    [Guid("27e9e80b-9a32-4cbc-8882-b73555211ec8")]

    public partial interface ICO : IHL73Object, ICDAObject, ICV
    {
        
        /// <summary>
        /// Gets the XML text of the CDA CO object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The CO class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICO))]
    [Guid("87be5869-fe11-459e-9bbe-7ddbf043354d")]
    public partial class CO : HL7SDK.Cda.CV, INotifyPropertyChanged, ICO, ICV, ICE, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// CO finalizer.
        /// </summary>
        ~CO()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// CO constructor.
        /// </summary>
        public CO()
        {
            element = new HL7SDK.Xml.Cda.CO();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// CO constructor.
        /// </summary>
        internal CO(HL7SDK.Xml.Cda.CO element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type CO
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.CO Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.CO;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.CO();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICRCollection interface.
    /// </summary>

    [Guid("81103be9-b99b-4bba-b73c-30886cde68ba")]

    public partial interface ICR : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA CR object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        ICV Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        ICD Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inverted property.
        /// </summary>
        bool Inverted
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The CR class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICR))]
    [Guid("34c6bd19-53bd-4903-a33a-92e08c1702b0")]
    public partial class CR : HL7SDK.Cda.ANY, INotifyPropertyChanged, ICR, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// CR finalizer.
        /// </summary>
        ~CR()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// CR constructor.
        /// </summary>
        public CR()
        {
            element = new HL7SDK.Xml.Cda.CR();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// CR constructor.
        /// </summary>
        internal CR(HL7SDK.Xml.Cda.CR element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type CR
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.CR Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.CR;
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.ICV Name
        {
            get
            {
                if (Element.name == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.name = new HL7SDK.Xml.Cda.CV();
                    }
                }
                return ElementFactory.Wrap(Element.name, this) as HL7SDK.Cda.ICV;
            }
            set
            {
                if (value == null)
                {
                    Element.name = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CV)value;
                    t.Attach(this);
                    Element.name = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public HL7SDK.Cda.ICD Value
        {
            get
            {
                if (Element.value == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.value = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.value, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.value = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.value = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The inverted property.
        /// </summary>
        public bool Inverted
        {
            get
            {
                return Element.inverted;
            }
            set
            {
                Element.inverted = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.CR();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICRCollection interface.
    /// </summary>


    [Guid("dffa695d-9db7-46e5-9d42-a1b26c2fc4cb")]
    public partial interface ICRCollection : ICDACollection, IEnumerable<ICR>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ICR this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ICR value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ICR value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ICR item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ICR item1, ICR item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ICR Append();
    }
    

    [Guid("b9827d56-b5d5-4359-8efd-8848ba9e5a46")]
    internal partial class CRCollection : CDAFactoryCollection<HL7SDK.Cda.CR, HL7SDK.Xml.Cda.CR, HL7SDK.Cda.ICR>, HL7SDK.Cda.ICRCollection
    {
        
        internal CRCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.CR[]> getProp, Action<HL7SDK.Xml.Cda.CR[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ICSCollection interface.
    /// </summary>

    [Guid("3bb972db-6baf-43bd-95eb-64e39f49b12d")]

    public partial interface ICS : IHL73Object, ICDAObject, ICV
    {
        
        /// <summary>
        /// Gets the XML text of the CDA CS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The CS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICS))]
    [Guid("242db1cc-2fc6-47b1-9439-dd6a13e7f568")]
    public partial class CS : HL7SDK.Cda.CV, INotifyPropertyChanged, ICS, ICV, ICE, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// CS finalizer.
        /// </summary>
        ~CS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// CS constructor.
        /// </summary>
        public CS()
        {
            element = new HL7SDK.Xml.Cda.CS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// CS constructor.
        /// </summary>
        internal CS(HL7SDK.Xml.Cda.CS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type CS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.CS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.CS;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.CS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICSCollection interface.
    /// </summary>


    [Guid("405ed76a-bdcb-482b-b47b-43c55c14e877")]
    public partial interface ICSCollection : ICDACollection, IEnumerable<ICS>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ICS this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ICS value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ICS value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ICS item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ICS item1, ICS item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ICS Append();
    }
    

    [Guid("9872a6b9-5d5e-4a4a-bb0a-0ec1da0c7498")]
    internal partial class CSCollection : CDAFactoryCollection<HL7SDK.Cda.CS, HL7SDK.Xml.Cda.CS, HL7SDK.Cda.ICS>, HL7SDK.Cda.ICSCollection
    {
        
        internal CSCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.CS[]> getProp, Action<HL7SDK.Xml.Cda.CS[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ICVCollection interface.
    /// </summary>

    [Guid("1f9140bb-1ca3-465f-b513-facca77c8c5f")]

    public partial interface ICV : IHL73Object, ICDAObject, ICE
    {
        
        /// <summary>
        /// Gets the XML text of the CDA CV object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The CV class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICV))]
    [Guid("ba3712e7-1acf-44d4-891c-623412fad8f2")]
    public partial class CV : HL7SDK.Cda.CE, INotifyPropertyChanged, ICV, ICE, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// CV finalizer.
        /// </summary>
        ~CV()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// CV constructor.
        /// </summary>
        public CV()
        {
            element = new HL7SDK.Xml.Cda.CV();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// CV constructor.
        /// </summary>
        internal CV(HL7SDK.Xml.Cda.CV element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type CV
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.CV Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.CV;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.CV();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEDCollection interface.
    /// </summary>

    [Guid("ed6fdbff-0948-4680-827a-ae2976506156")]

    public partial interface IED : IHL73Object, ICDAObject, IBIN
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ED object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ED class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IED))]
    [Guid("239fef91-e33d-4202-aa6c-1336417060d8")]
    public partial class ED : HL7SDK.Cda.BIN, INotifyPropertyChanged, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ED finalizer.
        /// </summary>
        ~ED()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ED constructor.
        /// </summary>
        public ED()
        {
            element = new HL7SDK.Xml.Cda.ED();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ED constructor.
        /// </summary>
        internal ED(HL7SDK.Xml.Cda.ED element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ED
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ED Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ED;
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.ITEL Reference
        {
            get
            {
                if (Element.reference == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.reference = new HL7SDK.Xml.Cda.TEL();
                    }
                }
                return ElementFactory.Wrap(Element.reference, this) as HL7SDK.Cda.ITEL;
            }
            set
            {
                if (value == null)
                {
                    Element.reference = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TEL)value;
                    t.Attach(this);
                    Element.reference = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        public HL7SDK.Cda.Ithumbnail Thumbnail
        {
            get
            {
                if (Element.thumbnail == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.thumbnail = new HL7SDK.Xml.Cda.thumbnail();
                    }
                }
                return ElementFactory.Wrap(Element.thumbnail, this) as HL7SDK.Cda.Ithumbnail;
            }
            set
            {
                if (value == null)
                {
                    Element.thumbnail = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.thumbnail)value;
                    t.Attach(this);
                    Element.thumbnail = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        public string MediaType
        {
            get
            {
                return Element.mediaType;
            }
            set
            {
                Element.mediaType = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        public HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get
            {
                return (HL7SDK.Cda.CompressionAlgorithm)Element.compression;
            }
            set
            {
                Element.compression = (HL7SDK.Xml.Cda.CompressionAlgorithm)value;
                Element.compressionSpecified = true;
            }
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        public bool CompressionSpecified
        {
            get
            {
                return Element.compressionSpecified;
            }
            set
            {
                Element.compressionSpecified = value;
            }
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        public HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get
            {
                return (HL7SDK.Cda.IntegrityCheckAlgorithm)Element.integrityCheckAlgorithm;
            }
            set
            {
                Element.integrityCheckAlgorithm = (HL7SDK.Xml.Cda.IntegrityCheckAlgorithm)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.ED();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEIVL_PPD_TSCollection interface.
    /// </summary>

    [Guid("77750fb9-5679-4aec-b420-9de27a25ea99")]

    public partial interface IEIVL_PPD_TS : IHL73Object, ICDAObject, ISXCM_PPD_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA EIVL_PPD_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The event property.
        /// </summary>
        IEIVLevent Event
        {
            get;
            set;
        }
        
        /// <summary>
        /// The offset property.
        /// </summary>
        IIVL_PPD_PQ Offset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The EIVL_PPD_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEIVL_PPD_TS))]
    [Guid("d1384a5c-a920-471f-956b-cea55f318f20")]
    public partial class EIVL_PPD_TS : HL7SDK.Cda.SXCM_PPD_TS, INotifyPropertyChanged, IEIVL_PPD_TS, ISXCM_PPD_TS, IPPD_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// EIVL_PPD_TS finalizer.
        /// </summary>
        ~EIVL_PPD_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// EIVL_PPD_TS constructor.
        /// </summary>
        public EIVL_PPD_TS()
        {
            element = new HL7SDK.Xml.Cda.EIVL_PPD_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// EIVL_PPD_TS constructor.
        /// </summary>
        internal EIVL_PPD_TS(HL7SDK.Xml.Cda.EIVL_PPD_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type EIVL_PPD_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.EIVL_PPD_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.EIVL_PPD_TS;
            }
        }
        
        /// <summary>
        /// The event property.
        /// </summary>
        public HL7SDK.Cda.IEIVLevent Event
        {
            get
            {
                if (Element.@event == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.@event = new HL7SDK.Xml.Cda.EIVLevent();
                    }
                }
                return ElementFactory.Wrap(Element.@event, this) as HL7SDK.Cda.IEIVLevent;
            }
            set
            {
                if (value == null)
                {
                    Element.@event = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.EIVLevent)value;
                    t.Attach(this);
                    Element.@event = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The offset property.
        /// </summary>
        public HL7SDK.Cda.IIVL_PPD_PQ Offset
        {
            get
            {
                if (Element.offset == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.offset = new HL7SDK.Xml.Cda.IVL_PPD_PQ();
                    }
                }
                return ElementFactory.Wrap(Element.offset, this) as HL7SDK.Cda.IIVL_PPD_PQ;
            }
            set
            {
                if (value == null)
                {
                    Element.offset = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_PPD_PQ)value;
                    t.Attach(this);
                    Element.offset = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.EIVL_PPD_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEIVL_TSCollection interface.
    /// </summary>

    [Guid("2eced17a-bc80-41bc-b8d3-8573aa9981a7")]

    public partial interface IEIVL_TS : IHL73Object, ICDAObject, ISXCM_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA EIVL_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The event property.
        /// </summary>
        IEIVLevent Event
        {
            get;
            set;
        }
        
        /// <summary>
        /// The offset property.
        /// </summary>
        IIVL_PQ Offset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The EIVL_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEIVL_TS))]
    [Guid("ed0347d8-cb29-4321-a1b0-d3dd031eddee")]
    public partial class EIVL_TS : HL7SDK.Cda.SXCM_TS, INotifyPropertyChanged, IEIVL_TS, ISXCM_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// EIVL_TS finalizer.
        /// </summary>
        ~EIVL_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// EIVL_TS constructor.
        /// </summary>
        public EIVL_TS()
        {
            element = new HL7SDK.Xml.Cda.EIVL_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// EIVL_TS constructor.
        /// </summary>
        internal EIVL_TS(HL7SDK.Xml.Cda.EIVL_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type EIVL_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.EIVL_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.EIVL_TS;
            }
        }
        
        /// <summary>
        /// The event property.
        /// </summary>
        public HL7SDK.Cda.IEIVLevent Event
        {
            get
            {
                if (Element.@event == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.@event = new HL7SDK.Xml.Cda.EIVLevent();
                    }
                }
                return ElementFactory.Wrap(Element.@event, this) as HL7SDK.Cda.IEIVLevent;
            }
            set
            {
                if (value == null)
                {
                    Element.@event = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.EIVLevent)value;
                    t.Attach(this);
                    Element.@event = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The offset property.
        /// </summary>
        public HL7SDK.Cda.IIVL_PQ Offset
        {
            get
            {
                if (Element.offset == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.offset = new HL7SDK.Xml.Cda.IVL_PQ();
                    }
                }
                return ElementFactory.Wrap(Element.offset, this) as HL7SDK.Cda.IIVL_PQ;
            }
            set
            {
                if (value == null)
                {
                    Element.offset = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_PQ)value;
                    t.Attach(this);
                    Element.offset = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.EIVL_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEIVLeventCollection interface.
    /// </summary>

    [Guid("d553e4b3-49ab-4631-98b1-84a7385bb334")]

    public partial interface IEIVLevent : IHL73Object, ICDAObject, ICE
    {
        
        /// <summary>
        /// Gets the XML text of the CDA EIVLevent object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The EIVLevent class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEIVLevent))]
    [Guid("64a8465a-7fe4-4a97-b558-5d66c3bc7c2a")]
    public partial class EIVLevent : HL7SDK.Cda.CE, INotifyPropertyChanged, IEIVLevent, ICE, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// EIVLevent finalizer.
        /// </summary>
        ~EIVLevent()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// EIVLevent constructor.
        /// </summary>
        public EIVLevent()
        {
            element = new HL7SDK.Xml.Cda.EIVLevent();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// EIVLevent constructor.
        /// </summary>
        internal EIVLevent(HL7SDK.Xml.Cda.EIVLevent element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type EIVLevent
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.EIVLevent Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.EIVLevent;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.EIVLevent();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IENCollection interface.
    /// </summary>

    [Guid("e85dd8be-619d-49df-bf83-7abe64aa3828")]

    public partial interface IEN : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA EN object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IENXPCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        IIVL_TS ValidTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        string Use
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The EN class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEN))]
    [Guid("99471099-226a-4363-84af-3839cd346528")]
    public partial class EN : HL7SDK.Cda.ANY, INotifyPropertyChanged, IEN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// EN finalizer.
        /// </summary>
        ~EN()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// EN constructor.
        /// </summary>
        public EN()
        {
            element = new HL7SDK.Xml.Cda.EN();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// EN constructor.
        /// </summary>
        internal EN(HL7SDK.Xml.Cda.EN element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type EN
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.EN Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.EN;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IENXPCollection Items
        {
            get
            {
                return new HL7SDK.Cda.ENXPCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS ValidTime
        {
            get
            {
                if (Element.validTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.validTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.validTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.validTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.validTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        public string Text
        {
            get
            {
                if (Element.Text == null) return String.Empty;
                return String.Join("", Element.Text);
            }
            set
            {
                Element.Text = new [] { value };
            }
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        public string Use
        {
            get
            {
                if (Element.use == null) return String.Empty;
                return String.Join("", Element.use);
            }
            set
            {
                Element.use = new [] { value };
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.EN();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IendelimiterCollection interface.
    /// </summary>

    [Guid("b02ec59f-2740-4d51-9f24-992e947eefa0")]

    public partial interface Iendelimiter : IHL73Object, ICDAObject, IENXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA endelimiter object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new string Qualifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The endelimiter class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iendelimiter))]
    [Guid("c256d346-a630-46d8-93f3-410677928ac9")]
    public partial class endelimiter : HL7SDK.Cda.ENXP, INotifyPropertyChanged, Iendelimiter, IENXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// endelimiter finalizer.
        /// </summary>
        ~endelimiter()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// endelimiter constructor.
        /// </summary>
        public endelimiter()
        {
            element = new HL7SDK.Xml.Cda.endelimiter();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// endelimiter constructor.
        /// </summary>
        internal endelimiter(HL7SDK.Xml.Cda.endelimiter element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type endelimiter
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.endelimiter Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.endelimiter;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.endelimiter();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IenfamilyCollection interface.
    /// </summary>

    [Guid("34b06435-cd14-4190-97b2-86a5098b22f5")]

    public partial interface Ienfamily : IHL73Object, ICDAObject, IENXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA enfamily object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new string Qualifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The enfamily class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Ienfamily))]
    [Guid("35dac098-d7aa-4bbd-be5d-f36e51721eec")]
    public partial class enfamily : HL7SDK.Cda.ENXP, INotifyPropertyChanged, Ienfamily, IENXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// enfamily finalizer.
        /// </summary>
        ~enfamily()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// enfamily constructor.
        /// </summary>
        public enfamily()
        {
            element = new HL7SDK.Xml.Cda.enfamily();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// enfamily constructor.
        /// </summary>
        internal enfamily(HL7SDK.Xml.Cda.enfamily element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type enfamily
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.enfamily Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.enfamily;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.enfamily();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IengivenCollection interface.
    /// </summary>

    [Guid("4b44a9cd-a8d9-4456-abc4-fb8ffa9fcb65")]

    public partial interface Iengiven : IHL73Object, ICDAObject, IENXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA engiven object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new string Qualifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The engiven class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iengiven))]
    [Guid("39655456-1022-4255-aa32-8b6a1d92c672")]
    public partial class engiven : HL7SDK.Cda.ENXP, INotifyPropertyChanged, Iengiven, IENXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// engiven finalizer.
        /// </summary>
        ~engiven()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// engiven constructor.
        /// </summary>
        public engiven()
        {
            element = new HL7SDK.Xml.Cda.engiven();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// engiven constructor.
        /// </summary>
        internal engiven(HL7SDK.Xml.Cda.engiven element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type engiven
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.engiven Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.engiven;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.engiven();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IenprefixCollection interface.
    /// </summary>

    [Guid("ebe6c1b7-9da8-4a9b-b723-aca2493dc662")]

    public partial interface Ienprefix : IHL73Object, ICDAObject, IENXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA enprefix object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new string Qualifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The enprefix class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Ienprefix))]
    [Guid("35bca8f1-e4e9-4d08-a0bb-e831669a45c2")]
    public partial class enprefix : HL7SDK.Cda.ENXP, INotifyPropertyChanged, Ienprefix, IENXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// enprefix finalizer.
        /// </summary>
        ~enprefix()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// enprefix constructor.
        /// </summary>
        public enprefix()
        {
            element = new HL7SDK.Xml.Cda.enprefix();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// enprefix constructor.
        /// </summary>
        internal enprefix(HL7SDK.Xml.Cda.enprefix element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type enprefix
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.enprefix Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.enprefix;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.enprefix();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IensuffixCollection interface.
    /// </summary>

    [Guid("0056c952-060c-40b7-92b0-8144dcba374a")]

    public partial interface Iensuffix : IHL73Object, ICDAObject, IENXP
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ensuffix object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        new string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new string Qualifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ensuffix class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Iensuffix))]
    [Guid("daf6f677-4110-443f-a743-0e0796c75583")]
    public partial class ensuffix : HL7SDK.Cda.ENXP, INotifyPropertyChanged, Iensuffix, IENXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ensuffix finalizer.
        /// </summary>
        ~ensuffix()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ensuffix constructor.
        /// </summary>
        public ensuffix()
        {
            element = new HL7SDK.Xml.Cda.ensuffix();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ensuffix constructor.
        /// </summary>
        internal ensuffix(HL7SDK.Xml.Cda.ensuffix element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ensuffix
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ensuffix Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ensuffix;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.ensuffix();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IENXPCollection interface.
    /// </summary>

    [Guid("dc23286f-d685-4619-ae46-7c81bb65724d")]

    public partial interface IENXP : IHL73Object, ICDAObject, IST
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ENXP object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        string PartType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        string Qualifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ENXP class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IENXP))]
    [Guid("f3af0df4-af1b-4735-aa40-af647f3cf31a")]
    public partial class ENXP : HL7SDK.Cda.ST, INotifyPropertyChanged, IENXP, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ENXP finalizer.
        /// </summary>
        ~ENXP()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ENXP constructor.
        /// </summary>
        public ENXP()
        {
            element = new HL7SDK.Xml.Cda.ENXP();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ENXP constructor.
        /// </summary>
        internal ENXP(HL7SDK.Xml.Cda.ENXP element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ENXP
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ENXP Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ENXP;
            }
        }
        
        /// <summary>
        /// The partType property.
        /// </summary>
        public string PartType
        {
            get
            {
                return Element.partType;
            }
            set
            {
                Element.partType = value;
            }
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        public string Qualifier
        {
            get
            {
                if (Element.qualifier == null) return String.Empty;
                return String.Join("", Element.qualifier);
            }
            set
            {
                Element.qualifier = new [] { value };
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.ENXP();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IENXPCollection interface.
    /// </summary>


    [Guid("5a09100b-eebe-4fb4-ae4a-7bac62611c65")]
    public partial interface IENXPCollection : ICDACollection, IEnumerable<IENXP>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IENXP this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IENXP value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IENXP value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IENXP item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IENXP item1, IENXP item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IENXP Append();
    }
    

    [Guid("5e3d46b9-7740-4217-a3a0-4e952730188e")]
    internal partial class ENXPCollection : CDAFactoryCollection<HL7SDK.Cda.ENXP, HL7SDK.Xml.Cda.ENXP, HL7SDK.Cda.IENXP>, HL7SDK.Cda.IENXPCollection
    {
        
        internal ENXPCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.ENXP[]> getProp, Action<HL7SDK.Xml.Cda.ENXP[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IGLIST_PQCollection interface.
    /// </summary>

    [Guid("2b2fac73-3eb8-46b7-91fb-c94a9bc3fd30")]

    public partial interface IGLIST_PQ : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA GLIST_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The head property.
        /// </summary>
        IPQ Head
        {
            get;
            set;
        }
        
        /// <summary>
        /// The increment property.
        /// </summary>
        IPQ Increment
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The GLIST_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IGLIST_PQ))]
    [Guid("61c32f3a-feb0-43e9-8b45-38091622d7fe")]
    public partial class GLIST_PQ : HL7SDK.Cda.ANY, INotifyPropertyChanged, IGLIST_PQ, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// GLIST_PQ finalizer.
        /// </summary>
        ~GLIST_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// GLIST_PQ constructor.
        /// </summary>
        public GLIST_PQ()
        {
            element = new HL7SDK.Xml.Cda.GLIST_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// GLIST_PQ constructor.
        /// </summary>
        internal GLIST_PQ(HL7SDK.Xml.Cda.GLIST_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type GLIST_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.GLIST_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.GLIST_PQ;
            }
        }
        
        /// <summary>
        /// The head property.
        /// </summary>
        public HL7SDK.Cda.IPQ Head
        {
            get
            {
                if (Element.head == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.head = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.head, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.head = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.head = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The increment property.
        /// </summary>
        public HL7SDK.Cda.IPQ Increment
        {
            get
            {
                if (Element.increment == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.increment = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.increment, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.increment = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.increment = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.GLIST_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IGLIST_TSCollection interface.
    /// </summary>

    [Guid("e3b7cfa3-cef5-4858-b4ab-decf4f7b3666")]

    public partial interface IGLIST_TS : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA GLIST_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The head property.
        /// </summary>
        ITS Head
        {
            get;
            set;
        }
        
        /// <summary>
        /// The increment property.
        /// </summary>
        IPQ Increment
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The GLIST_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IGLIST_TS))]
    [Guid("ff01fb4d-474a-4b61-9d0c-d020bfaacdcd")]
    public partial class GLIST_TS : HL7SDK.Cda.ANY, INotifyPropertyChanged, IGLIST_TS, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// GLIST_TS finalizer.
        /// </summary>
        ~GLIST_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// GLIST_TS constructor.
        /// </summary>
        public GLIST_TS()
        {
            element = new HL7SDK.Xml.Cda.GLIST_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// GLIST_TS constructor.
        /// </summary>
        internal GLIST_TS(HL7SDK.Xml.Cda.GLIST_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type GLIST_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.GLIST_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.GLIST_TS;
            }
        }
        
        /// <summary>
        /// The head property.
        /// </summary>
        public HL7SDK.Cda.ITS Head
        {
            get
            {
                if (Element.head == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.head = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.head, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.head = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.head = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The increment property.
        /// </summary>
        public HL7SDK.Cda.IPQ Increment
        {
            get
            {
                if (Element.increment == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.increment = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.increment, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.increment = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.increment = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.GLIST_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IHXIT_CECollection interface.
    /// </summary>

    [Guid("e2abe422-76f4-494f-8aeb-f5f90d39807e")]

    public partial interface IHXIT_CE : IHL73Object, ICDAObject, ICE
    {
        
        /// <summary>
        /// Gets the XML text of the CDA HXIT_CE object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        IIVL_TS ValidTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The HXIT_CE class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IHXIT_CE))]
    [Guid("bf717091-d5bb-48e2-8a63-6cdf0193a07b")]
    public partial class HXIT_CE : HL7SDK.Cda.CE, INotifyPropertyChanged, IHXIT_CE, ICE, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// HXIT_CE finalizer.
        /// </summary>
        ~HXIT_CE()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// HXIT_CE constructor.
        /// </summary>
        public HXIT_CE()
        {
            element = new HL7SDK.Xml.Cda.HXIT_CE();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// HXIT_CE constructor.
        /// </summary>
        internal HXIT_CE(HL7SDK.Xml.Cda.HXIT_CE element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type HXIT_CE
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.HXIT_CE Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.HXIT_CE;
            }
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS ValidTime
        {
            get
            {
                if (Element.validTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.validTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.validTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.validTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.validTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.HXIT_CE();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IHXIT_PQCollection interface.
    /// </summary>

    [Guid("534d371e-28d6-464c-ba00-388331544f20")]

    public partial interface IHXIT_PQ : IHL73Object, ICDAObject, IPQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA HXIT_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        IIVL_TS ValidTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The HXIT_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IHXIT_PQ))]
    [Guid("2c8006a6-8eb5-4033-af7c-b8ea552385a2")]
    public partial class HXIT_PQ : HL7SDK.Cda.PQ, INotifyPropertyChanged, IHXIT_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// HXIT_PQ finalizer.
        /// </summary>
        ~HXIT_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// HXIT_PQ constructor.
        /// </summary>
        public HXIT_PQ()
        {
            element = new HL7SDK.Xml.Cda.HXIT_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// HXIT_PQ constructor.
        /// </summary>
        internal HXIT_PQ(HL7SDK.Xml.Cda.HXIT_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type HXIT_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.HXIT_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.HXIT_PQ;
            }
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS ValidTime
        {
            get
            {
                if (Element.validTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.validTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.validTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.validTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.validTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.HXIT_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIICollection interface.
    /// </summary>

    [Guid("e85b7676-cf2d-4465-9267-365a9325fb8b")]

    public partial interface III : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA II object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The root property.
        /// </summary>
        string Root
        {
            get;
            set;
        }
        
        /// <summary>
        /// The extension property.
        /// </summary>
        string Extension
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assigningAuthorityName property.
        /// </summary>
        string AssigningAuthorityName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayable property.
        /// </summary>
        bool Displayable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayableSpecified property.
        /// </summary>
        bool DisplayableSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The II class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.III))]
    [Guid("dc8435ea-6b1a-4ee6-8a08-354b503d3b5f")]
    public partial class II : HL7SDK.Cda.ANY, INotifyPropertyChanged, III, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// II finalizer.
        /// </summary>
        ~II()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// II constructor.
        /// </summary>
        public II()
        {
            element = new HL7SDK.Xml.Cda.II();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// II constructor.
        /// </summary>
        internal II(HL7SDK.Xml.Cda.II element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type II
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.II Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.II;
            }
        }
        
        /// <summary>
        /// The root property.
        /// </summary>
        public string Root
        {
            get
            {
                return Element.root;
            }
            set
            {
                Element.root = value;
            }
        }
        
        /// <summary>
        /// The extension property.
        /// </summary>
        public string Extension
        {
            get
            {
                return Element.extension;
            }
            set
            {
                Element.extension = value;
            }
        }
        
        /// <summary>
        /// The assigningAuthorityName property.
        /// </summary>
        public string AssigningAuthorityName
        {
            get
            {
                return Element.assigningAuthorityName;
            }
            set
            {
                Element.assigningAuthorityName = value;
            }
        }
        
        /// <summary>
        /// The displayable property.
        /// </summary>
        public bool Displayable
        {
            get
            {
                return Element.displayable;
            }
            set
            {
                Element.displayable = value;
            }
        }
        
        /// <summary>
        /// The displayableSpecified property.
        /// </summary>
        public bool DisplayableSpecified
        {
            get
            {
                return Element.displayableSpecified;
            }
            set
            {
                Element.displayableSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.II();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIICollection interface.
    /// </summary>


    [Guid("0a237d75-fb1d-4f35-ab35-a4d3aa48499e")]
    public partial interface IIICollection : ICDACollection, IEnumerable<III>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        III this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(III value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(III value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(III item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(III item1, III item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        III Append();
    }
    

    [Guid("9a157ccc-2fb7-40d3-9e35-133c5ca88061")]
    internal partial class IICollection : CDAFactoryCollection<HL7SDK.Cda.II, HL7SDK.Xml.Cda.II, HL7SDK.Cda.III>, HL7SDK.Cda.IIICollection
    {
        
        internal IICollection(CDAObject parent, Func<HL7SDK.Xml.Cda.II[]> getProp, Action<HL7SDK.Xml.Cda.II[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IINTCollection interface.
    /// </summary>

    [Guid("0dccaed5-9056-4a16-b52f-8080e12e9485")]

    public partial interface IINT : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA INT object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The INT class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IINT))]
    [Guid("c03b3ac8-5f7a-42ec-9282-d5dcac36e1e2")]
    public partial class INT : HL7SDK.Cda.QTY, INotifyPropertyChanged, IINT, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// INT finalizer.
        /// </summary>
        ~INT()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// INT constructor.
        /// </summary>
        public INT()
        {
            element = new HL7SDK.Xml.Cda.INT();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// INT constructor.
        /// </summary>
        internal INT(HL7SDK.Xml.Cda.INT element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type INT
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.INT Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.INT;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.INT();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IINTCollection interface.
    /// </summary>


    [Guid("a8e8e253-484c-43d4-ab1e-dc673cae260b")]
    public partial interface IINTCollection : ICDACollection, IEnumerable<IINT>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IINT this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IINT value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IINT value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IINT item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IINT item1, IINT item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IINT Append();
    }
    

    [Guid("3ea1ec33-0b0d-4945-82e7-cacbb71f6a26")]
    internal partial class INTCollection : CDAFactoryCollection<HL7SDK.Cda.INT, HL7SDK.Xml.Cda.INT, HL7SDK.Cda.IINT>, HL7SDK.Cda.IINTCollection
    {
        
        internal INTCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.INT[]> getProp, Action<HL7SDK.Xml.Cda.INT[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IIVL_INTCollection interface.
    /// </summary>

    [Guid("bc8df292-cfbb-4d11-ba8a-d181dc78c91a")]

    public partial interface IIVL_INT : IHL73Object, ICDAObject, ISXCM_INT
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVL_INT object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IINTCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVL_INT class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVL_INT))]
    [Guid("96013b40-e8fd-421f-a97d-f717c99c75d9")]
    public partial class IVL_INT : HL7SDK.Cda.SXCM_INT, INotifyPropertyChanged, IIVL_INT, ISXCM_INT, IINT, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVL_INT finalizer.
        /// </summary>
        ~IVL_INT()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVL_INT constructor.
        /// </summary>
        public IVL_INT()
        {
            element = new HL7SDK.Xml.Cda.IVL_INT();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVL_INT constructor.
        /// </summary>
        internal IVL_INT(HL7SDK.Xml.Cda.IVL_INT element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVL_INT
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVL_INT Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVL_INT;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IINTCollection Items
        {
            get
            {
                return new HL7SDK.Cda.INTCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVL_INT();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVL_MOCollection interface.
    /// </summary>

    [Guid("9420bdee-600c-4f06-ad48-de7d6d5ce552")]

    public partial interface IIVL_MO : IHL73Object, ICDAObject, ISXCM_MO
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVL_MO object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IMOCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The currency property.
        /// </summary>
        new string Currency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVL_MO class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVL_MO))]
    [Guid("40b2aabf-e967-4973-a931-c6e5dcfa116f")]
    public partial class IVL_MO : HL7SDK.Cda.SXCM_MO, INotifyPropertyChanged, IIVL_MO, ISXCM_MO, IMO, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVL_MO finalizer.
        /// </summary>
        ~IVL_MO()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVL_MO constructor.
        /// </summary>
        public IVL_MO()
        {
            element = new HL7SDK.Xml.Cda.IVL_MO();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVL_MO constructor.
        /// </summary>
        internal IVL_MO(HL7SDK.Xml.Cda.IVL_MO element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVL_MO
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVL_MO Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVL_MO;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IMOCollection Items
        {
            get
            {
                return new HL7SDK.Cda.MOCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVL_MO();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVL_PPD_PQCollection interface.
    /// </summary>

    [Guid("fdaea434-9257-47c5-ad24-402d2236d82c")]

    public partial interface IIVL_PPD_PQ : IHL73Object, ICDAObject, ISXCM_PPD_PQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVL_PPD_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IPPD_PQCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVL_PPD_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVL_PPD_PQ))]
    [Guid("b0dd4b04-eae7-483a-8c53-dbc2ec15534b")]
    public partial class IVL_PPD_PQ : HL7SDK.Cda.SXCM_PPD_PQ, INotifyPropertyChanged, IIVL_PPD_PQ, ISXCM_PPD_PQ, IPPD_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVL_PPD_PQ finalizer.
        /// </summary>
        ~IVL_PPD_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVL_PPD_PQ constructor.
        /// </summary>
        public IVL_PPD_PQ()
        {
            element = new HL7SDK.Xml.Cda.IVL_PPD_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVL_PPD_PQ constructor.
        /// </summary>
        internal IVL_PPD_PQ(HL7SDK.Xml.Cda.IVL_PPD_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVL_PPD_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVL_PPD_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVL_PPD_PQ;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IPPD_PQCollection Items
        {
            get
            {
                return new HL7SDK.Cda.PPD_PQCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVL_PPD_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVL_PPD_TSCollection interface.
    /// </summary>

    [Guid("f82472cb-6a5e-4963-9ad5-28766777abf1")]

    public partial interface IIVL_PPD_TS : IHL73Object, ICDAObject, ISXCM_PPD_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVL_PPD_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IQTYCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVL_PPD_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVL_PPD_TS))]
    [Guid("9a2da3e2-66bb-4a65-b88e-ad5b2ae345ce")]
    public partial class IVL_PPD_TS : HL7SDK.Cda.SXCM_PPD_TS, INotifyPropertyChanged, IIVL_PPD_TS, ISXCM_PPD_TS, IPPD_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVL_PPD_TS finalizer.
        /// </summary>
        ~IVL_PPD_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVL_PPD_TS constructor.
        /// </summary>
        public IVL_PPD_TS()
        {
            element = new HL7SDK.Xml.Cda.IVL_PPD_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVL_PPD_TS constructor.
        /// </summary>
        internal IVL_PPD_TS(HL7SDK.Xml.Cda.IVL_PPD_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVL_PPD_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVL_PPD_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVL_PPD_TS;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IQTYCollection Items
        {
            get
            {
                return new HL7SDK.Cda.QTYCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVL_PPD_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVL_PQCollection interface.
    /// </summary>

    [Guid("bfa9d2b7-6d67-43ac-8162-ed1f29d959b8")]

    public partial interface IIVL_PQ : IHL73Object, ICDAObject, ISXCM_PQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVL_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IPQCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVL_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVL_PQ))]
    [Guid("9651f965-a8e1-417c-a2c2-71a0a3238f86")]
    public partial class IVL_PQ : HL7SDK.Cda.SXCM_PQ, INotifyPropertyChanged, IIVL_PQ, ISXCM_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVL_PQ finalizer.
        /// </summary>
        ~IVL_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVL_PQ constructor.
        /// </summary>
        public IVL_PQ()
        {
            element = new HL7SDK.Xml.Cda.IVL_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVL_PQ constructor.
        /// </summary>
        internal IVL_PQ(HL7SDK.Xml.Cda.IVL_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVL_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVL_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVL_PQ;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IPQCollection Items
        {
            get
            {
                return new HL7SDK.Cda.PQCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVL_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVL_REALCollection interface.
    /// </summary>

    [Guid("bf300e5b-73af-486b-a587-9bf13ecccf0b")]

    public partial interface IIVL_REAL : IHL73Object, ICDAObject, ISXCM_REAL
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVL_REAL object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        IREALCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVL_REAL class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVL_REAL))]
    [Guid("c6f9db12-521d-4573-bc2f-d33ebeaba52c")]
    public partial class IVL_REAL : HL7SDK.Cda.SXCM_REAL, INotifyPropertyChanged, IIVL_REAL, ISXCM_REAL, IREAL, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVL_REAL finalizer.
        /// </summary>
        ~IVL_REAL()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVL_REAL constructor.
        /// </summary>
        public IVL_REAL()
        {
            element = new HL7SDK.Xml.Cda.IVL_REAL();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVL_REAL constructor.
        /// </summary>
        internal IVL_REAL(HL7SDK.Xml.Cda.IVL_REAL element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVL_REAL
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVL_REAL Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVL_REAL;
            }
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        public HL7SDK.Cda.IREALCollection Items
        {
            get
            {
                return new HL7SDK.Cda.REALCollection(this, () => { return Element.Items; }, (x) => { Element.Items = x; });
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVL_REAL();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVL_TSCollection interface.
    /// </summary>

    [Guid("8bd205fa-77e8-4176-84e2-953b5c98cdbe")]

    public partial interface IIVL_TS : IHL73Object, ICDAObject, ISXCM_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVL_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVL_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVL_TS))]
    [Guid("db0ee6ab-ef65-404c-8288-2ceb8cb325e8")]
    public partial class IVL_TS : HL7SDK.Cda.SXCM_TS, INotifyPropertyChanged, IIVL_TS, ISXCM_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVL_TS finalizer.
        /// </summary>
        ~IVL_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVL_TS constructor.
        /// </summary>
        public IVL_TS()
        {
            element = new HL7SDK.Xml.Cda.IVL_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVL_TS constructor.
        /// </summary>
        internal IVL_TS(HL7SDK.Xml.Cda.IVL_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVL_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVL_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVL_TS;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVL_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVXB_INTCollection interface.
    /// </summary>

    [Guid("106bd861-0cc7-4013-a74f-727224fe1106")]

    public partial interface IIVXB_INT : IHL73Object, ICDAObject, IINT
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVXB_INT object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        bool Inclusive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVXB_INT class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVXB_INT))]
    [Guid("a53580d5-9f44-434e-88b5-eb872834334c")]
    public partial class IVXB_INT : HL7SDK.Cda.INT, INotifyPropertyChanged, IIVXB_INT, IINT, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVXB_INT finalizer.
        /// </summary>
        ~IVXB_INT()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVXB_INT constructor.
        /// </summary>
        public IVXB_INT()
        {
            element = new HL7SDK.Xml.Cda.IVXB_INT();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVXB_INT constructor.
        /// </summary>
        internal IVXB_INT(HL7SDK.Xml.Cda.IVXB_INT element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVXB_INT
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVXB_INT Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVXB_INT;
            }
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        public bool Inclusive
        {
            get
            {
                return Element.inclusive;
            }
            set
            {
                Element.inclusive = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVXB_INT();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVXB_MOCollection interface.
    /// </summary>

    [Guid("9f7e0cc2-c743-446f-9533-4a6f1e2a17a2")]

    public partial interface IIVXB_MO : IHL73Object, ICDAObject, IMO
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVXB_MO object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        bool Inclusive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The currency property.
        /// </summary>
        new string Currency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVXB_MO class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVXB_MO))]
    [Guid("19167a09-91b3-4825-baf9-dbb28c57a0f2")]
    public partial class IVXB_MO : HL7SDK.Cda.MO, INotifyPropertyChanged, IIVXB_MO, IMO, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVXB_MO finalizer.
        /// </summary>
        ~IVXB_MO()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVXB_MO constructor.
        /// </summary>
        public IVXB_MO()
        {
            element = new HL7SDK.Xml.Cda.IVXB_MO();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVXB_MO constructor.
        /// </summary>
        internal IVXB_MO(HL7SDK.Xml.Cda.IVXB_MO element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVXB_MO
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVXB_MO Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVXB_MO;
            }
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        public bool Inclusive
        {
            get
            {
                return Element.inclusive;
            }
            set
            {
                Element.inclusive = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVXB_MO();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVXB_PPD_PQCollection interface.
    /// </summary>

    [Guid("9da124b8-941b-4caa-9d43-23cc8c1cff49")]

    public partial interface IIVXB_PPD_PQ : IHL73Object, ICDAObject, IPPD_PQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVXB_PPD_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        bool Inclusive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVXB_PPD_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVXB_PPD_PQ))]
    [Guid("a5227839-ba87-4d60-ba88-d7da0b67ff69")]
    public partial class IVXB_PPD_PQ : HL7SDK.Cda.PPD_PQ, INotifyPropertyChanged, IIVXB_PPD_PQ, IPPD_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVXB_PPD_PQ finalizer.
        /// </summary>
        ~IVXB_PPD_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVXB_PPD_PQ constructor.
        /// </summary>
        public IVXB_PPD_PQ()
        {
            element = new HL7SDK.Xml.Cda.IVXB_PPD_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVXB_PPD_PQ constructor.
        /// </summary>
        internal IVXB_PPD_PQ(HL7SDK.Xml.Cda.IVXB_PPD_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVXB_PPD_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVXB_PPD_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVXB_PPD_PQ;
            }
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        public bool Inclusive
        {
            get
            {
                return Element.inclusive;
            }
            set
            {
                Element.inclusive = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVXB_PPD_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVXB_PPD_TSCollection interface.
    /// </summary>

    [Guid("6fbab4cd-a824-4a93-ba70-26fbe1e0f989")]

    public partial interface IIVXB_PPD_TS : IHL73Object, ICDAObject, IPPD_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVXB_PPD_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        bool Inclusive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVXB_PPD_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVXB_PPD_TS))]
    [Guid("f399a11f-3f2f-4ff9-a432-314a30df4d8b")]
    public partial class IVXB_PPD_TS : HL7SDK.Cda.PPD_TS, INotifyPropertyChanged, IIVXB_PPD_TS, IPPD_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVXB_PPD_TS finalizer.
        /// </summary>
        ~IVXB_PPD_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVXB_PPD_TS constructor.
        /// </summary>
        public IVXB_PPD_TS()
        {
            element = new HL7SDK.Xml.Cda.IVXB_PPD_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVXB_PPD_TS constructor.
        /// </summary>
        internal IVXB_PPD_TS(HL7SDK.Xml.Cda.IVXB_PPD_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVXB_PPD_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVXB_PPD_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVXB_PPD_TS;
            }
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        public bool Inclusive
        {
            get
            {
                return Element.inclusive;
            }
            set
            {
                Element.inclusive = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVXB_PPD_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVXB_PQCollection interface.
    /// </summary>

    [Guid("71cf8385-a387-459b-8088-1daa93aa1523")]

    public partial interface IIVXB_PQ : IHL73Object, ICDAObject, IPQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVXB_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        bool Inclusive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVXB_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVXB_PQ))]
    [Guid("f3b4ecf9-0b05-4921-8537-f91a7e7d4da7")]
    public partial class IVXB_PQ : HL7SDK.Cda.PQ, INotifyPropertyChanged, IIVXB_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVXB_PQ finalizer.
        /// </summary>
        ~IVXB_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVXB_PQ constructor.
        /// </summary>
        public IVXB_PQ()
        {
            element = new HL7SDK.Xml.Cda.IVXB_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVXB_PQ constructor.
        /// </summary>
        internal IVXB_PQ(HL7SDK.Xml.Cda.IVXB_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVXB_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVXB_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVXB_PQ;
            }
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        public bool Inclusive
        {
            get
            {
                return Element.inclusive;
            }
            set
            {
                Element.inclusive = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVXB_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVXB_REALCollection interface.
    /// </summary>

    [Guid("00c773a9-7ab8-413d-8465-73db9103f9c0")]

    public partial interface IIVXB_REAL : IHL73Object, ICDAObject, IREAL
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVXB_REAL object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        bool Inclusive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVXB_REAL class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVXB_REAL))]
    [Guid("fa1ffe9e-f11a-4ced-93ce-34d81635dfca")]
    public partial class IVXB_REAL : HL7SDK.Cda.REAL, INotifyPropertyChanged, IIVXB_REAL, IREAL, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVXB_REAL finalizer.
        /// </summary>
        ~IVXB_REAL()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVXB_REAL constructor.
        /// </summary>
        public IVXB_REAL()
        {
            element = new HL7SDK.Xml.Cda.IVXB_REAL();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVXB_REAL constructor.
        /// </summary>
        internal IVXB_REAL(HL7SDK.Xml.Cda.IVXB_REAL element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVXB_REAL
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVXB_REAL Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVXB_REAL;
            }
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        public bool Inclusive
        {
            get
            {
                return Element.inclusive;
            }
            set
            {
                Element.inclusive = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVXB_REAL();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIVXB_TSCollection interface.
    /// </summary>

    [Guid("bfb5c446-0f4f-42a9-89f2-830cddbe82d2")]

    public partial interface IIVXB_TS : IHL73Object, ICDAObject, ITS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA IVXB_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        bool Inclusive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IVXB_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIVXB_TS))]
    [Guid("27a33b5e-16fd-4fe4-855c-57a5891bcf1c")]
    public partial class IVXB_TS : HL7SDK.Cda.TS, INotifyPropertyChanged, IIVXB_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IVXB_TS finalizer.
        /// </summary>
        ~IVXB_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IVXB_TS constructor.
        /// </summary>
        public IVXB_TS()
        {
            element = new HL7SDK.Xml.Cda.IVXB_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IVXB_TS constructor.
        /// </summary>
        internal IVXB_TS(HL7SDK.Xml.Cda.IVXB_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type IVXB_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.IVXB_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.IVXB_TS;
            }
        }
        
        /// <summary>
        /// The inclusive property.
        /// </summary>
        public bool Inclusive
        {
            get
            {
                return Element.inclusive;
            }
            set
            {
                Element.inclusive = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.IVXB_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IMOCollection interface.
    /// </summary>

    [Guid("fd939f74-ba8f-4cca-855d-f182302a0107")]

    public partial interface IMO : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA MO object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The currency property.
        /// </summary>
        string Currency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The MO class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IMO))]
    [Guid("8d146f29-4afb-472e-bcd9-45ca822336a0")]
    public partial class MO : HL7SDK.Cda.QTY, INotifyPropertyChanged, IMO, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// MO finalizer.
        /// </summary>
        ~MO()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// MO constructor.
        /// </summary>
        public MO()
        {
            element = new HL7SDK.Xml.Cda.MO();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// MO constructor.
        /// </summary>
        internal MO(HL7SDK.Xml.Cda.MO element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type MO
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.MO Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.MO;
            }
        }
        
        /// <summary>
        /// The currency property.
        /// </summary>
        public string Currency
        {
            get
            {
                return Element.currency;
            }
            set
            {
                Element.currency = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.MO();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IMOCollection interface.
    /// </summary>


    [Guid("20423b83-4b60-43b4-91bd-0a2ff3f00eff")]
    public partial interface IMOCollection : ICDACollection, IEnumerable<IMO>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IMO this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IMO value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IMO value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IMO item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IMO item1, IMO item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IMO Append();
    }
    

    [Guid("8779b690-4813-4c85-97f5-9617cf7aec85")]
    internal partial class MOCollection : CDAFactoryCollection<HL7SDK.Cda.MO, HL7SDK.Xml.Cda.MO, HL7SDK.Cda.IMO>, HL7SDK.Cda.IMOCollection
    {
        
        internal MOCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.MO[]> getProp, Action<HL7SDK.Xml.Cda.MO[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IONCollection interface.
    /// </summary>

    [Guid("001f7e93-c895-4478-a9c4-963df8e6cd9c")]

    public partial interface ION : IHL73Object, ICDAObject, IEN
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ON object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        new IENXPCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        new IIVL_TS ValidTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        new string Use
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ON class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ION))]
    [Guid("e52b81d2-015f-494f-9e85-37654d2c4e3a")]
    public partial class ON : HL7SDK.Cda.EN, INotifyPropertyChanged, ION, IEN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ON finalizer.
        /// </summary>
        ~ON()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ON constructor.
        /// </summary>
        public ON()
        {
            element = new HL7SDK.Xml.Cda.ON();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ON constructor.
        /// </summary>
        internal ON(HL7SDK.Xml.Cda.ON element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ON
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ON Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ON;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.ON();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IONCollection interface.
    /// </summary>


    [Guid("54ae3ddc-1b51-419a-baa8-cad3699e3502")]
    public partial interface IONCollection : ICDACollection, IEnumerable<ION>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ION this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ION value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ION value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ION item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ION item1, ION item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ION Append();
    }
    

    [Guid("9198319e-03c8-42eb-af91-a95a93e51704")]
    internal partial class ONCollection : CDAFactoryCollection<HL7SDK.Cda.ON, HL7SDK.Xml.Cda.ON, HL7SDK.Cda.ION>, HL7SDK.Cda.IONCollection
    {
        
        internal ONCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.ON[]> getProp, Action<HL7SDK.Xml.Cda.ON[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPIVL_PPD_TSCollection interface.
    /// </summary>

    [Guid("caf6c7fd-af5a-43d0-a592-c824b5a05a91")]

    public partial interface IPIVL_PPD_TS : IHL73Object, ICDAObject, ISXCM_PPD_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA PIVL_PPD_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The phase property.
        /// </summary>
        IIVL_PPD_TS Phase
        {
            get;
            set;
        }
        
        /// <summary>
        /// The period property.
        /// </summary>
        IPPD_PQ Period
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignment property.
        /// </summary>
        string Alignment
        {
            get;
            set;
        }
        
        /// <summary>
        /// The institutionSpecified1 property.
        /// </summary>
        bool InstitutionSpecified1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PIVL_PPD_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPIVL_PPD_TS))]
    [Guid("e06e22b8-26df-4b5b-8fc9-4584a4e7c347")]
    public partial class PIVL_PPD_TS : HL7SDK.Cda.SXCM_PPD_TS, INotifyPropertyChanged, IPIVL_PPD_TS, ISXCM_PPD_TS, IPPD_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PIVL_PPD_TS finalizer.
        /// </summary>
        ~PIVL_PPD_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PIVL_PPD_TS constructor.
        /// </summary>
        public PIVL_PPD_TS()
        {
            element = new HL7SDK.Xml.Cda.PIVL_PPD_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PIVL_PPD_TS constructor.
        /// </summary>
        internal PIVL_PPD_TS(HL7SDK.Xml.Cda.PIVL_PPD_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type PIVL_PPD_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.PIVL_PPD_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.PIVL_PPD_TS;
            }
        }
        
        /// <summary>
        /// The phase property.
        /// </summary>
        public HL7SDK.Cda.IIVL_PPD_TS Phase
        {
            get
            {
                if (Element.phase == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.phase = new HL7SDK.Xml.Cda.IVL_PPD_TS();
                    }
                }
                return ElementFactory.Wrap(Element.phase, this) as HL7SDK.Cda.IIVL_PPD_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.phase = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_PPD_TS)value;
                    t.Attach(this);
                    Element.phase = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The period property.
        /// </summary>
        public HL7SDK.Cda.IPPD_PQ Period
        {
            get
            {
                if (Element.period == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.period = new HL7SDK.Xml.Cda.PPD_PQ();
                    }
                }
                return ElementFactory.Wrap(Element.period, this) as HL7SDK.Cda.IPPD_PQ;
            }
            set
            {
                if (value == null)
                {
                    Element.period = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PPD_PQ)value;
                    t.Attach(this);
                    Element.period = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The alignment property.
        /// </summary>
        public string Alignment
        {
            get
            {
                return Element.alignment;
            }
            set
            {
                Element.alignment = value;
            }
        }
        
        /// <summary>
        /// The institutionSpecified1 property.
        /// </summary>
        public bool InstitutionSpecified1
        {
            get
            {
                return Element.institutionSpecified1;
            }
            set
            {
                Element.institutionSpecified1 = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.PIVL_PPD_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPIVL_TSCollection interface.
    /// </summary>

    [Guid("220f6b94-ec21-42f2-aa9a-41574de31f41")]

    public partial interface IPIVL_TS : IHL73Object, ICDAObject, ISXCM_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA PIVL_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The phase property.
        /// </summary>
        IIVL_TS Phase
        {
            get;
            set;
        }
        
        /// <summary>
        /// The period property.
        /// </summary>
        IPQ Period
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignment property.
        /// </summary>
        string Alignment
        {
            get;
            set;
        }
        
        /// <summary>
        /// The institutionSpecified1 property.
        /// </summary>
        bool InstitutionSpecified1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PIVL_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPIVL_TS))]
    [Guid("a79918d9-251b-494e-ad27-c0beb181a663")]
    public partial class PIVL_TS : HL7SDK.Cda.SXCM_TS, INotifyPropertyChanged, IPIVL_TS, ISXCM_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PIVL_TS finalizer.
        /// </summary>
        ~PIVL_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PIVL_TS constructor.
        /// </summary>
        public PIVL_TS()
        {
            element = new HL7SDK.Xml.Cda.PIVL_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PIVL_TS constructor.
        /// </summary>
        internal PIVL_TS(HL7SDK.Xml.Cda.PIVL_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type PIVL_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.PIVL_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.PIVL_TS;
            }
        }
        
        /// <summary>
        /// The phase property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS Phase
        {
            get
            {
                if (Element.phase == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.phase = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.phase, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.phase = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.phase = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The period property.
        /// </summary>
        public HL7SDK.Cda.IPQ Period
        {
            get
            {
                if (Element.period == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.period = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.period, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.period = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.period = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The alignment property.
        /// </summary>
        public string Alignment
        {
            get
            {
                return Element.alignment;
            }
            set
            {
                Element.alignment = value;
            }
        }
        
        /// <summary>
        /// The institutionSpecified1 property.
        /// </summary>
        public bool InstitutionSpecified1
        {
            get
            {
                return Element.institutionSpecified1;
            }
            set
            {
                Element.institutionSpecified1 = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.PIVL_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPNCollection interface.
    /// </summary>

    [Guid("9727bf95-9f32-42f7-a40a-58f3f00ce481")]

    public partial interface IPN : IHL73Object, ICDAObject, IEN
    {
        
        /// <summary>
        /// Gets the XML text of the CDA PN object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        new IENXPCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        new IIVL_TS ValidTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        new string Use
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PN class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPN))]
    [Guid("6e10d987-21db-49f2-9bc0-474c935aa649")]
    public partial class PN : HL7SDK.Cda.EN, INotifyPropertyChanged, IPN, IEN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PN finalizer.
        /// </summary>
        ~PN()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PN constructor.
        /// </summary>
        public PN()
        {
            element = new HL7SDK.Xml.Cda.PN();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PN constructor.
        /// </summary>
        internal PN(HL7SDK.Xml.Cda.PN element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type PN
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.PN Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.PN;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.PN();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPNCollection interface.
    /// </summary>


    [Guid("1364a9b3-44cf-458d-8b78-3a07ef220c97")]
    public partial interface IPNCollection : ICDACollection, IEnumerable<IPN>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPN this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPN value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPN value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPN item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPN item1, IPN item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPN Append();
    }
    

    [Guid("8ee0d373-84ad-4677-98b8-c10510b104a5")]
    internal partial class PNCollection : CDAFactoryCollection<HL7SDK.Cda.PN, HL7SDK.Xml.Cda.PN, HL7SDK.Cda.IPN>, HL7SDK.Cda.IPNCollection
    {
        
        internal PNCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.PN[]> getProp, Action<HL7SDK.Xml.Cda.PN[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IActCollection interface.
    /// </summary>

    [Guid("859fbbfd-8067-4c9b-b408-5c371412269c")]

    public partial interface IAct : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Act object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        ICE PriorityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.x_ActClassDocumentEntryAct ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        HL7SDK.Cda.x_DocumentActMood MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        bool NegationInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        bool NegationIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Act class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAct))]
    [Guid("d1ed9268-493c-47b3-819d-7dacbd9e977a")]
    public partial class Act : CDAElement, INotifyPropertyChanged, IAct, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Act finalizer.
        /// </summary>
        ~Act()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Act constructor.
        /// </summary>
        public Act()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Act();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Act constructor.
        /// </summary>
        internal Act(HL7SDK.Xml.Cda.POCD_MT000040Act element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Act
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Act Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Act;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE PriorityCode
        {
            get
            {
                if (Element.priorityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.priorityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.priorityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.priorityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.priorityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.x_ActClassDocumentEntryAct ClassCode
        {
            get
            {
                return (HL7SDK.Cda.x_ActClassDocumentEntryAct)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.x_ActClassDocumentEntryAct)value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public HL7SDK.Cda.x_DocumentActMood MoodCode
        {
            get
            {
                return (HL7SDK.Cda.x_DocumentActMood)Element.moodCode;
            }
            set
            {
                Element.moodCode = (HL7SDK.Xml.Cda.x_DocumentActMood)value;
            }
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        public bool NegationInd
        {
            get
            {
                return Element.negationInd;
            }
            set
            {
                Element.negationInd = value;
            }
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        public bool NegationIndSpecified
        {
            get
            {
                return Element.negationIndSpecified;
            }
            set
            {
                Element.negationIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Act();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IActCollection interface.
    /// </summary>


    [Guid("f6b649f2-75d8-4a24-a0a8-a7047715bc9d")]
    public partial interface IActCollection : ICDACollection, IEnumerable<IAct>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAct this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAct value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAct value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAct item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAct item1, IAct item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAct Append();
    }
    

    [Guid("81162999-02cd-4a37-9462-76f876a1d04d")]
    internal partial class ActCollection : CDAFactoryCollection<HL7SDK.Cda.Act, HL7SDK.Xml.Cda.POCD_MT000040Act, HL7SDK.Cda.IAct>, HL7SDK.Cda.IActCollection
    {
        
        internal ActCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Act[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Act[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAssignedAuthorCollection interface.
    /// </summary>

    [Guid("9c11e104-0e3e-4d6f-ba48-2300b896316c")]

    public partial interface IAssignedAuthor : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040AssignedAuthor object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// Represents the AssignedAuthor.Item value as IPerson.
        /// </summary>
        IPerson AsPerson
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the AssignedAuthor.Item value as IAuthoringDevice.
        /// </summary>
        IAuthoringDevice AsAuthoringDevice
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representedOrganization property.
        /// </summary>
        IOrganization RepresentedOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The AssignedAuthor class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAssignedAuthor))]
    [Guid("9fb0bc22-0b52-43a2-be06-0538966b3979")]
    public partial class AssignedAuthor : CDAElement, INotifyPropertyChanged, IAssignedAuthor, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// AssignedAuthor finalizer.
        /// </summary>
        ~AssignedAuthor()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// AssignedAuthor constructor.
        /// </summary>
        public AssignedAuthor()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// AssignedAuthor constructor.
        /// </summary>
        internal AssignedAuthor(HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040AssignedAuthor
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// Represents the AssignedAuthor.Item value as IPerson.
        /// </summary>
        public virtual IPerson AsPerson
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                        return ElementFactory.Wrap(Element.Item, this) as IPerson;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Person)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IPerson;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Person)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IPerson;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Person)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Person expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the AssignedAuthor.Item value as IAuthoringDevice.
        /// </summary>
        public virtual IAuthoringDevice AsAuthoringDevice
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice();
                        return ElementFactory.Wrap(Element.Item, this) as IAuthoringDevice;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAuthoringDevice;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAuthoringDevice;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040AuthoringDevice expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Person)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Person, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.Person)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Person).Element;
                    return;
                }
                if (value is HL7SDK.Cda.AuthoringDevice)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.AuthoringDevice).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The representedOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization RepresentedOrganization
        {
            get
            {
                if (Element.representedOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.representedOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.representedOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.representedOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.representedOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAssignedAuthorCollection interface.
    /// </summary>


    [Guid("84e1f401-ea00-460d-99fc-8d4b70d5a6fe")]
    public partial interface IAssignedAuthorCollection : ICDACollection, IEnumerable<IAssignedAuthor>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAssignedAuthor this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAssignedAuthor value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAssignedAuthor value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAssignedAuthor item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAssignedAuthor item1, IAssignedAuthor item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAssignedAuthor Append();
    }
    

    [Guid("82f42f6b-bae2-4ca4-a44f-245527dff13a")]
    internal partial class AssignedAuthorCollection : CDAFactoryCollection<HL7SDK.Cda.AssignedAuthor, HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor, HL7SDK.Cda.IAssignedAuthor>, HL7SDK.Cda.IAssignedAuthorCollection
    {
        
        internal AssignedAuthorCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAssignedCustodianCollection interface.
    /// </summary>

    [Guid("84815780-0cd6-4cbd-9189-a020d1228831")]

    public partial interface IAssignedCustodian : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040AssignedCustodian object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The representedCustodianOrganization property.
        /// </summary>
        ICustodianOrganization RepresentedCustodianOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The AssignedCustodian class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAssignedCustodian))]
    [Guid("cd4bf244-bbf8-4969-b4e5-d5b533572a2e")]
    public partial class AssignedCustodian : CDAElement, INotifyPropertyChanged, IAssignedCustodian, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// AssignedCustodian finalizer.
        /// </summary>
        ~AssignedCustodian()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// AssignedCustodian constructor.
        /// </summary>
        public AssignedCustodian()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// AssignedCustodian constructor.
        /// </summary>
        internal AssignedCustodian(HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040AssignedCustodian
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The representedCustodianOrganization property.
        /// </summary>
        public HL7SDK.Cda.ICustodianOrganization RepresentedCustodianOrganization
        {
            get
            {
                if (Element.representedCustodianOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.representedCustodianOrganization = new HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization();
                    }
                }
                return ElementFactory.Wrap(Element.representedCustodianOrganization, this) as HL7SDK.Cda.ICustodianOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.representedCustodianOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CustodianOrganization)value;
                    t.Attach(this);
                    Element.representedCustodianOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAssignedCustodianCollection interface.
    /// </summary>


    [Guid("976c8c71-54b5-4962-9fc7-7090fa7a5472")]
    public partial interface IAssignedCustodianCollection : ICDACollection, IEnumerable<IAssignedCustodian>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAssignedCustodian this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAssignedCustodian value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAssignedCustodian value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAssignedCustodian item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAssignedCustodian item1, IAssignedCustodian item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAssignedCustodian Append();
    }
    

    [Guid("7360d6b1-bc67-446d-9124-ba13b1e3438c")]
    internal partial class AssignedCustodianCollection : CDAFactoryCollection<HL7SDK.Cda.AssignedCustodian, HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian, HL7SDK.Cda.IAssignedCustodian>, HL7SDK.Cda.IAssignedCustodianCollection
    {
        
        internal AssignedCustodianCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAssignedEntityCollection interface.
    /// </summary>

    [Guid("242ab12f-dbe5-4e58-b5b1-b77031e85660")]

    public partial interface IAssignedEntity : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040AssignedEntity object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// The assignedPerson property.
        /// </summary>
        IPerson AssignedPerson
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representedOrganization property.
        /// </summary>
        IOrganization RepresentedOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The AssignedEntity class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAssignedEntity))]
    [Guid("eee5bbce-53b0-42e1-8add-3f014449c559")]
    public partial class AssignedEntity : CDAElement, INotifyPropertyChanged, IAssignedEntity, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// AssignedEntity finalizer.
        /// </summary>
        ~AssignedEntity()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// AssignedEntity constructor.
        /// </summary>
        public AssignedEntity()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// AssignedEntity constructor.
        /// </summary>
        internal AssignedEntity(HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040AssignedEntity
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// The assignedPerson property.
        /// </summary>
        public HL7SDK.Cda.IPerson AssignedPerson
        {
            get
            {
                if (Element.assignedPerson == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedPerson = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                    }
                }
                return ElementFactory.Wrap(Element.assignedPerson, this) as HL7SDK.Cda.IPerson;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedPerson = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Person)value;
                    t.Attach(this);
                    Element.assignedPerson = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The representedOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization RepresentedOrganization
        {
            get
            {
                if (Element.representedOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.representedOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.representedOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.representedOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.representedOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAssignedEntityCollection interface.
    /// </summary>


    [Guid("fbb7ec83-4bd2-457f-b443-8d46b8f26af8")]
    public partial interface IAssignedEntityCollection : ICDACollection, IEnumerable<IAssignedEntity>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAssignedEntity this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAssignedEntity value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAssignedEntity value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAssignedEntity item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAssignedEntity item1, IAssignedEntity item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAssignedEntity Append();
    }
    

    [Guid("96b14849-5e84-43ac-bb32-0add6051c7fd")]
    internal partial class AssignedEntityCollection : CDAFactoryCollection<HL7SDK.Cda.AssignedEntity, HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity, HL7SDK.Cda.IAssignedEntity>, HL7SDK.Cda.IAssignedEntityCollection
    {
        
        internal AssignedEntityCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAssociatedEntityCollection interface.
    /// </summary>

    [Guid("db91f11f-d138-4a94-9308-4f70fb3ba4a8")]

    public partial interface IAssociatedEntity : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040AssociatedEntity object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// The associatedPerson property.
        /// </summary>
        IPerson AssociatedPerson
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scopingOrganization property.
        /// </summary>
        IOrganization ScopingOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The AssociatedEntity class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAssociatedEntity))]
    [Guid("9c47988c-a548-4e17-80dc-bded6c4838c3")]
    public partial class AssociatedEntity : CDAElement, INotifyPropertyChanged, IAssociatedEntity, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// AssociatedEntity finalizer.
        /// </summary>
        ~AssociatedEntity()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// AssociatedEntity constructor.
        /// </summary>
        public AssociatedEntity()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// AssociatedEntity constructor.
        /// </summary>
        internal AssociatedEntity(HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040AssociatedEntity
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// The associatedPerson property.
        /// </summary>
        public HL7SDK.Cda.IPerson AssociatedPerson
        {
            get
            {
                if (Element.associatedPerson == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.associatedPerson = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                    }
                }
                return ElementFactory.Wrap(Element.associatedPerson, this) as HL7SDK.Cda.IPerson;
            }
            set
            {
                if (value == null)
                {
                    Element.associatedPerson = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Person)value;
                    t.Attach(this);
                    Element.associatedPerson = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The scopingOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization ScopingOrganization
        {
            get
            {
                if (Element.scopingOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.scopingOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.scopingOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.scopingOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.scopingOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAssociatedEntityCollection interface.
    /// </summary>


    [Guid("3a836cd1-d042-479e-8c35-0afdee27c77a")]
    public partial interface IAssociatedEntityCollection : ICDACollection, IEnumerable<IAssociatedEntity>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAssociatedEntity this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAssociatedEntity value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAssociatedEntity value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAssociatedEntity item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAssociatedEntity item1, IAssociatedEntity item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAssociatedEntity Append();
    }
    

    [Guid("07e98662-d783-490e-a28c-a5d07d2ec281")]
    internal partial class AssociatedEntityCollection : CDAFactoryCollection<HL7SDK.Cda.AssociatedEntity, HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity, HL7SDK.Cda.IAssociatedEntity>, HL7SDK.Cda.IAssociatedEntityCollection
    {
        
        internal AssociatedEntityCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAuthenticatorCollection interface.
    /// </summary>

    [Guid("99c03162-6b5d-4c78-99ba-95ba49eb7e14")]

    public partial interface IAuthenticator : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Authenticator object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        ITS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The signatureCode property.
        /// </summary>
        ICS SignatureCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        IAssignedEntity AssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Authenticator class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAuthenticator))]
    [Guid("b717490f-c041-45d6-afbd-45bb58c2af2a")]
    public partial class Authenticator : CDAElement, INotifyPropertyChanged, IAuthenticator, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Authenticator finalizer.
        /// </summary>
        ~Authenticator()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Authenticator constructor.
        /// </summary>
        public Authenticator()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Authenticator();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Authenticator constructor.
        /// </summary>
        internal Authenticator(HL7SDK.Xml.Cda.POCD_MT000040Authenticator element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Authenticator
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Authenticator Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Authenticator;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.ITS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The signatureCode property.
        /// </summary>
        public HL7SDK.Cda.ICS SignatureCode
        {
            get
            {
                if (Element.signatureCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.signatureCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.signatureCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.signatureCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.signatureCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssignedEntity AssignedEntity
        {
            get
            {
                if (Element.assignedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.assignedEntity, this) as HL7SDK.Cda.IAssignedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedEntity)value;
                    t.Attach(this);
                    Element.assignedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Authenticator();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAuthenticatorCollection interface.
    /// </summary>


    [Guid("945597cb-02a1-4a3a-9acd-521503980453")]
    public partial interface IAuthenticatorCollection : ICDACollection, IEnumerable<IAuthenticator>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAuthenticator this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAuthenticator value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAuthenticator value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAuthenticator item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAuthenticator item1, IAuthenticator item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAuthenticator Append();
    }
    

    [Guid("20dcc07a-f1be-44b2-9942-8560a3f93692")]
    internal partial class AuthenticatorCollection : CDAFactoryCollection<HL7SDK.Cda.Authenticator, HL7SDK.Xml.Cda.POCD_MT000040Authenticator, HL7SDK.Cda.IAuthenticator>, HL7SDK.Cda.IAuthenticatorCollection
    {
        
        internal AuthenticatorCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Authenticator[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Authenticator[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAuthorCollection interface.
    /// </summary>

    [Guid("984e6d66-8318-430a-9315-590c18e8fa22")]

    public partial interface IAuthor : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Author object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The functionCode property.
        /// </summary>
        ICE FunctionCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        ITS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assignedAuthor property.
        /// </summary>
        IAssignedAuthor AssignedAuthor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Author class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAuthor))]
    [Guid("55b4f31f-8b03-4eda-8988-71e95de3d031")]
    public partial class Author : CDAElement, INotifyPropertyChanged, IAuthor, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Author finalizer.
        /// </summary>
        ~Author()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Author constructor.
        /// </summary>
        public Author()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Author();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Author constructor.
        /// </summary>
        internal Author(HL7SDK.Xml.Cda.POCD_MT000040Author element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Author
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Author Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Author;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The functionCode property.
        /// </summary>
        public HL7SDK.Cda.ICE FunctionCode
        {
            get
            {
                if (Element.functionCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.functionCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.functionCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.functionCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.functionCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.ITS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The assignedAuthor property.
        /// </summary>
        public HL7SDK.Cda.IAssignedAuthor AssignedAuthor
        {
            get
            {
                if (Element.assignedAuthor == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedAuthor = new HL7SDK.Xml.Cda.POCD_MT000040AssignedAuthor();
                    }
                }
                return ElementFactory.Wrap(Element.assignedAuthor, this) as HL7SDK.Cda.IAssignedAuthor;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedAuthor = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedAuthor)value;
                    t.Attach(this);
                    Element.assignedAuthor = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Author();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAuthorCollection interface.
    /// </summary>


    [Guid("229c49c7-e030-4a7b-bcca-6363bd4fc1a4")]
    public partial interface IAuthorCollection : ICDACollection, IEnumerable<IAuthor>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAuthor this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAuthor value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAuthor value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAuthor item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAuthor item1, IAuthor item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAuthor Append();
    }
    

    [Guid("316f96e1-e8ad-48da-a92e-98db38fd0ef0")]
    internal partial class AuthorCollection : CDAFactoryCollection<HL7SDK.Cda.Author, HL7SDK.Xml.Cda.POCD_MT000040Author, HL7SDK.Cda.IAuthor>, HL7SDK.Cda.IAuthorCollection
    {
        
        internal AuthorCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Author[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Author[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAuthoringDeviceCollection interface.
    /// </summary>

    [Guid("8b6213b9-d7db-4590-9968-05acda87bfdb")]

    public partial interface IAuthoringDevice : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040AuthoringDevice object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The manufacturerModelName property.
        /// </summary>
        ISC ManufacturerModelName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The softwareName property.
        /// </summary>
        ISC SoftwareName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The asMaintainedEntity property.
        /// </summary>
        IMaintainedEntityCollection AsMaintainedEntity
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.EntityClassDevice ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        bool ClassCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The AuthoringDevice class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAuthoringDevice))]
    [Guid("4dc301b5-a8cf-44e9-8a2e-bacfb55f065a")]
    public partial class AuthoringDevice : CDAElement, INotifyPropertyChanged, IAuthoringDevice, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// AuthoringDevice finalizer.
        /// </summary>
        ~AuthoringDevice()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// AuthoringDevice constructor.
        /// </summary>
        public AuthoringDevice()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// AuthoringDevice constructor.
        /// </summary>
        internal AuthoringDevice(HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040AuthoringDevice
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The manufacturerModelName property.
        /// </summary>
        public HL7SDK.Cda.ISC ManufacturerModelName
        {
            get
            {
                if (Element.manufacturerModelName == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.manufacturerModelName = new HL7SDK.Xml.Cda.SC();
                    }
                }
                return ElementFactory.Wrap(Element.manufacturerModelName, this) as HL7SDK.Cda.ISC;
            }
            set
            {
                if (value == null)
                {
                    Element.manufacturerModelName = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.SC)value;
                    t.Attach(this);
                    Element.manufacturerModelName = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The softwareName property.
        /// </summary>
        public HL7SDK.Cda.ISC SoftwareName
        {
            get
            {
                if (Element.softwareName == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.softwareName = new HL7SDK.Xml.Cda.SC();
                    }
                }
                return ElementFactory.Wrap(Element.softwareName, this) as HL7SDK.Cda.ISC;
            }
            set
            {
                if (value == null)
                {
                    Element.softwareName = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.SC)value;
                    t.Attach(this);
                    Element.softwareName = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The asMaintainedEntity property.
        /// </summary>
        public HL7SDK.Cda.IMaintainedEntityCollection AsMaintainedEntity
        {
            get
            {
                return new HL7SDK.Cda.MaintainedEntityCollection(this, () => { return Element.asMaintainedEntity; }, (x) => { Element.asMaintainedEntity = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.EntityClassDevice ClassCode
        {
            get
            {
                return (HL7SDK.Cda.EntityClassDevice)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.EntityClassDevice)value;
                Element.classCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        public bool ClassCodeSpecified
        {
            get
            {
                return Element.classCodeSpecified;
            }
            set
            {
                Element.classCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAuthoringDeviceCollection interface.
    /// </summary>


    [Guid("bed7a963-61ec-4926-bf10-c0db00b19a02")]
    public partial interface IAuthoringDeviceCollection : ICDACollection, IEnumerable<IAuthoringDevice>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAuthoringDevice this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAuthoringDevice value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAuthoringDevice value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAuthoringDevice item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAuthoringDevice item1, IAuthoringDevice item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAuthoringDevice Append();
    }
    

    [Guid("4500e96d-de3c-4436-b729-bcde9a935294")]
    internal partial class AuthoringDeviceCollection : CDAFactoryCollection<HL7SDK.Cda.AuthoringDevice, HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice, HL7SDK.Cda.IAuthoringDevice>, HL7SDK.Cda.IAuthoringDeviceCollection
    {
        
        internal AuthoringDeviceCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040AuthoringDevice[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IAuthorizationCollection interface.
    /// </summary>

    [Guid("9f61008f-8983-4b32-9ecd-a776b3a79a43")]

    public partial interface IAuthorization : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Authorization object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The consent property.
        /// </summary>
        IConsent Consent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Authorization class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IAuthorization))]
    [Guid("2d6e4900-0ba2-49b4-aff2-17a12649c675")]
    public partial class Authorization : CDAElement, INotifyPropertyChanged, IAuthorization, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Authorization finalizer.
        /// </summary>
        ~Authorization()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Authorization constructor.
        /// </summary>
        public Authorization()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Authorization();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Authorization constructor.
        /// </summary>
        internal Authorization(HL7SDK.Xml.Cda.POCD_MT000040Authorization element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Authorization
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Authorization Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Authorization;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The consent property.
        /// </summary>
        public HL7SDK.Cda.IConsent Consent
        {
            get
            {
                if (Element.consent == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.consent = new HL7SDK.Xml.Cda.POCD_MT000040Consent();
                    }
                }
                return ElementFactory.Wrap(Element.consent, this) as HL7SDK.Cda.IConsent;
            }
            set
            {
                if (value == null)
                {
                    Element.consent = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Consent)value;
                    t.Attach(this);
                    Element.consent = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Authorization();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IAuthorizationCollection interface.
    /// </summary>


    [Guid("ad2b0a4f-e83f-4e29-aa04-e0a575b25724")]
    public partial interface IAuthorizationCollection : ICDACollection, IEnumerable<IAuthorization>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IAuthorization this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IAuthorization value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IAuthorization value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IAuthorization item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IAuthorization item1, IAuthorization item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IAuthorization Append();
    }
    

    [Guid("95cf61d6-e90c-4d5a-8216-60149fe2c086")]
    internal partial class AuthorizationCollection : CDAFactoryCollection<HL7SDK.Cda.Authorization, HL7SDK.Xml.Cda.POCD_MT000040Authorization, HL7SDK.Cda.IAuthorization>, HL7SDK.Cda.IAuthorizationCollection
    {
        
        internal AuthorizationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Authorization[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Authorization[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IBirthplaceCollection interface.
    /// </summary>

    [Guid("de03e8de-3643-42c9-8fcc-3c67812dcf36")]

    public partial interface IBirthplace : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Birthplace object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The place property.
        /// </summary>
        IPlace Place
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Birthplace class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IBirthplace))]
    [Guid("149590e3-16f5-4533-8ef7-6ef6e1bcdfb1")]
    public partial class Birthplace : CDAElement, INotifyPropertyChanged, IBirthplace, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Birthplace finalizer.
        /// </summary>
        ~Birthplace()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Birthplace constructor.
        /// </summary>
        public Birthplace()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Birthplace();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Birthplace constructor.
        /// </summary>
        internal Birthplace(HL7SDK.Xml.Cda.POCD_MT000040Birthplace element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Birthplace
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Birthplace Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Birthplace;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The place property.
        /// </summary>
        public HL7SDK.Cda.IPlace Place
        {
            get
            {
                if (Element.place == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.place = new HL7SDK.Xml.Cda.POCD_MT000040Place();
                    }
                }
                return ElementFactory.Wrap(Element.place, this) as HL7SDK.Cda.IPlace;
            }
            set
            {
                if (value == null)
                {
                    Element.place = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Place)value;
                    t.Attach(this);
                    Element.place = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Birthplace();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IBirthplaceCollection interface.
    /// </summary>


    [Guid("4f463380-55e0-4b97-9859-03c3cbf7a034")]
    public partial interface IBirthplaceCollection : ICDACollection, IEnumerable<IBirthplace>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IBirthplace this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IBirthplace value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IBirthplace value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IBirthplace item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IBirthplace item1, IBirthplace item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IBirthplace Append();
    }
    

    [Guid("8ea18558-5709-49cd-b28f-48b690684b6c")]
    internal partial class BirthplaceCollection : CDAFactoryCollection<HL7SDK.Cda.Birthplace, HL7SDK.Xml.Cda.POCD_MT000040Birthplace, HL7SDK.Cda.IBirthplace>, HL7SDK.Cda.IBirthplaceCollection
    {
        
        internal BirthplaceCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Birthplace[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Birthplace[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IClinicalDocumentCollection interface.
    /// </summary>

    [Guid("665c46e9-aeb3-4743-8b67-78faea222d84")]

    public partial interface IClinicalDocument : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ClinicalDocument object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        III Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The title property.
        /// </summary>
        IST Title
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        ITS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        ICE ConfidentialityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The setId property.
        /// </summary>
        III SetId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The versionNumber property.
        /// </summary>
        IINT VersionNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The copyTime property.
        /// </summary>
        ITS CopyTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The recordTarget property.
        /// </summary>
        IRecordTargetCollection RecordTarget
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The dataEnterer property.
        /// </summary>
        IDataEnterer DataEnterer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The custodian property.
        /// </summary>
        ICustodian Custodian
        {
            get;
            set;
        }
        
        /// <summary>
        /// The informationRecipient property.
        /// </summary>
        IInformationRecipientCollection InformationRecipient
        {
            get;
        }
        
        /// <summary>
        /// The legalAuthenticator property.
        /// </summary>
        ILegalAuthenticator LegalAuthenticator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The authenticator property.
        /// </summary>
        IAuthenticatorCollection Authenticator
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant1Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The inFulfillmentOf property.
        /// </summary>
        IInFulfillmentOfCollection InFulfillmentOf
        {
            get;
        }
        
        /// <summary>
        /// The documentationOf property.
        /// </summary>
        IDocumentationOfCollection DocumentationOf
        {
            get;
        }
        
        /// <summary>
        /// The relatedDocument property.
        /// </summary>
        IRelatedDocumentCollection RelatedDocument
        {
            get;
        }
        
        /// <summary>
        /// The authorization property.
        /// </summary>
        IAuthorizationCollection Authorization
        {
            get;
        }
        
        /// <summary>
        /// The componentOf property.
        /// </summary>
        IComponent1 ComponentOf
        {
            get;
            set;
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        IComponent2 Component
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.ActClinicalDocument ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        bool ClassCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ClinicalDocument class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IClinicalDocument))]
    [Guid("dccf8ec3-3264-4ede-80a2-79dd5dbda532")]
    public partial class ClinicalDocument : CDAElement, INotifyPropertyChanged, IClinicalDocument, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ClinicalDocument finalizer.
        /// </summary>
        ~ClinicalDocument()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ClinicalDocument constructor.
        /// </summary>
        public ClinicalDocument()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ClinicalDocument();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ClinicalDocument constructor.
        /// </summary>
        internal ClinicalDocument(HL7SDK.Xml.Cda.POCD_MT000040ClinicalDocument element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ClinicalDocument
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ClinicalDocument Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ClinicalDocument;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.III Id
        {
            get
            {
                if (Element.id == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.id = new HL7SDK.Xml.Cda.II();
                    }
                }
                return ElementFactory.Wrap(Element.id, this) as HL7SDK.Cda.III;
            }
            set
            {
                if (value == null)
                {
                    Element.id = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.II)value;
                    t.Attach(this);
                    Element.id = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The title property.
        /// </summary>
        public HL7SDK.Cda.IST Title
        {
            get
            {
                if (Element.title == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.title = new HL7SDK.Xml.Cda.ST();
                    }
                }
                return ElementFactory.Wrap(Element.title, this) as HL7SDK.Cda.IST;
            }
            set
            {
                if (value == null)
                {
                    Element.title = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ST)value;
                    t.Attach(this);
                    Element.title = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.ITS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ConfidentialityCode
        {
            get
            {
                if (Element.confidentialityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.confidentialityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.confidentialityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.confidentialityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.confidentialityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The setId property.
        /// </summary>
        public HL7SDK.Cda.III SetId
        {
            get
            {
                if (Element.setId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.setId = new HL7SDK.Xml.Cda.II();
                    }
                }
                return ElementFactory.Wrap(Element.setId, this) as HL7SDK.Cda.III;
            }
            set
            {
                if (value == null)
                {
                    Element.setId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.II)value;
                    t.Attach(this);
                    Element.setId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The versionNumber property.
        /// </summary>
        public HL7SDK.Cda.IINT VersionNumber
        {
            get
            {
                if (Element.versionNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.versionNumber = new HL7SDK.Xml.Cda.INT();
                    }
                }
                return ElementFactory.Wrap(Element.versionNumber, this) as HL7SDK.Cda.IINT;
            }
            set
            {
                if (value == null)
                {
                    Element.versionNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.INT)value;
                    t.Attach(this);
                    Element.versionNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The copyTime property.
        /// </summary>
        public HL7SDK.Cda.ITS CopyTime
        {
            get
            {
                if (Element.copyTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.copyTime = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.copyTime, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.copyTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.copyTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The recordTarget property.
        /// </summary>
        public HL7SDK.Cda.IRecordTargetCollection RecordTarget
        {
            get
            {
                return new HL7SDK.Cda.RecordTargetCollection(this, () => { return Element.recordTarget; }, (x) => { Element.recordTarget = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The dataEnterer property.
        /// </summary>
        public HL7SDK.Cda.IDataEnterer DataEnterer
        {
            get
            {
                if (Element.dataEnterer == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.dataEnterer = new HL7SDK.Xml.Cda.POCD_MT000040DataEnterer();
                    }
                }
                return ElementFactory.Wrap(Element.dataEnterer, this) as HL7SDK.Cda.IDataEnterer;
            }
            set
            {
                if (value == null)
                {
                    Element.dataEnterer = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.DataEnterer)value;
                    t.Attach(this);
                    Element.dataEnterer = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The custodian property.
        /// </summary>
        public HL7SDK.Cda.ICustodian Custodian
        {
            get
            {
                if (Element.custodian == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.custodian = new HL7SDK.Xml.Cda.POCD_MT000040Custodian();
                    }
                }
                return ElementFactory.Wrap(Element.custodian, this) as HL7SDK.Cda.ICustodian;
            }
            set
            {
                if (value == null)
                {
                    Element.custodian = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Custodian)value;
                    t.Attach(this);
                    Element.custodian = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The informationRecipient property.
        /// </summary>
        public HL7SDK.Cda.IInformationRecipientCollection InformationRecipient
        {
            get
            {
                return new HL7SDK.Cda.InformationRecipientCollection(this, () => { return Element.informationRecipient; }, (x) => { Element.informationRecipient = x; });
            }
        }
        
        /// <summary>
        /// The legalAuthenticator property.
        /// </summary>
        public HL7SDK.Cda.ILegalAuthenticator LegalAuthenticator
        {
            get
            {
                if (Element.legalAuthenticator == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.legalAuthenticator = new HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator();
                    }
                }
                return ElementFactory.Wrap(Element.legalAuthenticator, this) as HL7SDK.Cda.ILegalAuthenticator;
            }
            set
            {
                if (value == null)
                {
                    Element.legalAuthenticator = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.LegalAuthenticator)value;
                    t.Attach(this);
                    Element.legalAuthenticator = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The authenticator property.
        /// </summary>
        public HL7SDK.Cda.IAuthenticatorCollection Authenticator
        {
            get
            {
                return new HL7SDK.Cda.AuthenticatorCollection(this, () => { return Element.authenticator; }, (x) => { Element.authenticator = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant1Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant1Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The inFulfillmentOf property.
        /// </summary>
        public HL7SDK.Cda.IInFulfillmentOfCollection InFulfillmentOf
        {
            get
            {
                return new HL7SDK.Cda.InFulfillmentOfCollection(this, () => { return Element.inFulfillmentOf; }, (x) => { Element.inFulfillmentOf = x; });
            }
        }
        
        /// <summary>
        /// The documentationOf property.
        /// </summary>
        public HL7SDK.Cda.IDocumentationOfCollection DocumentationOf
        {
            get
            {
                return new HL7SDK.Cda.DocumentationOfCollection(this, () => { return Element.documentationOf; }, (x) => { Element.documentationOf = x; });
            }
        }
        
        /// <summary>
        /// The relatedDocument property.
        /// </summary>
        public HL7SDK.Cda.IRelatedDocumentCollection RelatedDocument
        {
            get
            {
                return new HL7SDK.Cda.RelatedDocumentCollection(this, () => { return Element.relatedDocument; }, (x) => { Element.relatedDocument = x; });
            }
        }
        
        /// <summary>
        /// The authorization property.
        /// </summary>
        public HL7SDK.Cda.IAuthorizationCollection Authorization
        {
            get
            {
                return new HL7SDK.Cda.AuthorizationCollection(this, () => { return Element.authorization; }, (x) => { Element.authorization = x; });
            }
        }
        
        /// <summary>
        /// The componentOf property.
        /// </summary>
        public HL7SDK.Cda.IComponent1 ComponentOf
        {
            get
            {
                if (Element.componentOf == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.componentOf = new HL7SDK.Xml.Cda.POCD_MT000040Component1();
                    }
                }
                return ElementFactory.Wrap(Element.componentOf, this) as HL7SDK.Cda.IComponent1;
            }
            set
            {
                if (value == null)
                {
                    Element.componentOf = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Component1)value;
                    t.Attach(this);
                    Element.componentOf = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        public HL7SDK.Cda.IComponent2 Component
        {
            get
            {
                if (Element.component == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.component = new HL7SDK.Xml.Cda.POCD_MT000040Component2();
                    }
                }
                return ElementFactory.Wrap(Element.component, this) as HL7SDK.Cda.IComponent2;
            }
            set
            {
                if (value == null)
                {
                    Element.component = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Component2)value;
                    t.Attach(this);
                    Element.component = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.ActClinicalDocument ClassCode
        {
            get
            {
                return (HL7SDK.Cda.ActClinicalDocument)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.ActClinicalDocument)value;
                Element.classCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        public bool ClassCodeSpecified
        {
            get
            {
                return Element.classCodeSpecified;
            }
            set
            {
                Element.classCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ClinicalDocument();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IComponent1Collection interface.
    /// </summary>

    [Guid("0eb2e7da-f15a-4777-99e3-ca885ebca863")]

    public partial interface IComponent1 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Component1 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The encompassingEncounter property.
        /// </summary>
        IEncompassingEncounter EncompassingEncounter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Component1 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IComponent1))]
    [Guid("2eed6bfd-e9f8-4e8a-a74c-2e17d5b6f9ae")]
    public partial class Component1 : CDAElement, INotifyPropertyChanged, IComponent1, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Component1 finalizer.
        /// </summary>
        ~Component1()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Component1 constructor.
        /// </summary>
        public Component1()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Component1();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Component1 constructor.
        /// </summary>
        internal Component1(HL7SDK.Xml.Cda.POCD_MT000040Component1 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Component1
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Component1 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Component1;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The encompassingEncounter property.
        /// </summary>
        public HL7SDK.Cda.IEncompassingEncounter EncompassingEncounter
        {
            get
            {
                if (Element.encompassingEncounter == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.encompassingEncounter = new HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter();
                    }
                }
                return ElementFactory.Wrap(Element.encompassingEncounter, this) as HL7SDK.Cda.IEncompassingEncounter;
            }
            set
            {
                if (value == null)
                {
                    Element.encompassingEncounter = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.EncompassingEncounter)value;
                    t.Attach(this);
                    Element.encompassingEncounter = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ActRelationshipHasComponent)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ActRelationshipHasComponent)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Component1();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IComponent1Collection interface.
    /// </summary>


    [Guid("405f1063-c213-47fd-915d-0bc01bc3fc51")]
    public partial interface IComponent1Collection : ICDACollection, IEnumerable<IComponent1>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IComponent1 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IComponent1 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IComponent1 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IComponent1 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IComponent1 item1, IComponent1 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IComponent1 Append();
    }
    

    [Guid("785509df-c876-455b-a861-14ea5cbf3e7c")]
    internal partial class Component1Collection : CDAFactoryCollection<HL7SDK.Cda.Component1, HL7SDK.Xml.Cda.POCD_MT000040Component1, HL7SDK.Cda.IComponent1>, HL7SDK.Cda.IComponent1Collection
    {
        
        internal Component1Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Component1[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Component1[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IComponent2Collection interface.
    /// </summary>

    [Guid("5c80f7be-3a60-4ca4-b3bc-54012ea20f24")]

    public partial interface IComponent2 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Component2 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// Represents the Component2.Item value as IStructuredBody.
        /// </summary>
        IStructuredBody AsStructuredBody
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component2.Item value as INonXMLBody.
        /// </summary>
        INonXMLBody AsNonXMLBody
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        bool ContextConductionInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        bool ContextConductionIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Component2 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IComponent2))]
    [Guid("855d86d1-3229-45ef-9c92-ab02fe23a971")]
    public partial class Component2 : CDAElement, INotifyPropertyChanged, IComponent2, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Component2 finalizer.
        /// </summary>
        ~Component2()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Component2 constructor.
        /// </summary>
        public Component2()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Component2();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Component2 constructor.
        /// </summary>
        internal Component2(HL7SDK.Xml.Cda.POCD_MT000040Component2 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Component2
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Component2 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Component2;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// Represents the Component2.Item value as IStructuredBody.
        /// </summary>
        public virtual IStructuredBody AsStructuredBody
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040StructuredBody();
                        return ElementFactory.Wrap(Element.Item, this) as IStructuredBody;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040StructuredBody)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IStructuredBody;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040StructuredBody)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IStructuredBody;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040StructuredBody)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040StructuredBody expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component2.Item value as INonXMLBody.
        /// </summary>
        public virtual INonXMLBody AsNonXMLBody
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody();
                        return ElementFactory.Wrap(Element.Item, this) as INonXMLBody;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as INonXMLBody;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as INonXMLBody;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040NonXMLBody expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040StructuredBody)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040StructuredBody, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.StructuredBody)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.StructuredBody).Element;
                    return;
                }
                if (value is HL7SDK.Cda.NonXMLBody)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.NonXMLBody).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ActRelationshipHasComponent)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ActRelationshipHasComponent)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        public bool ContextConductionInd
        {
            get
            {
                return Element.contextConductionInd;
            }
            set
            {
                Element.contextConductionInd = value;
            }
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        public bool ContextConductionIndSpecified
        {
            get
            {
                return Element.contextConductionIndSpecified;
            }
            set
            {
                Element.contextConductionIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Component2();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IComponent2Collection interface.
    /// </summary>


    [Guid("49c85de7-ab9e-4585-8836-d09a389a06ee")]
    public partial interface IComponent2Collection : ICDACollection, IEnumerable<IComponent2>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IComponent2 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IComponent2 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IComponent2 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IComponent2 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IComponent2 item1, IComponent2 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IComponent2 Append();
    }
    

    [Guid("a5646b78-5307-4176-b437-6ff29ec3551d")]
    internal partial class Component2Collection : CDAFactoryCollection<HL7SDK.Cda.Component2, HL7SDK.Xml.Cda.POCD_MT000040Component2, HL7SDK.Cda.IComponent2>, HL7SDK.Cda.IComponent2Collection
    {
        
        internal Component2Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Component2[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Component2[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IComponent3Collection interface.
    /// </summary>

    [Guid("b732772d-e8ae-4a13-bfa0-41978ea8017f")]

    public partial interface IComponent3 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Component3 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The section property.
        /// </summary>
        ISection Section
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        bool ContextConductionInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        bool ContextConductionIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Component3 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IComponent3))]
    [Guid("0bc5ee73-c363-4976-90c8-cd4e6ac5a205")]
    public partial class Component3 : CDAElement, INotifyPropertyChanged, IComponent3, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Component3 finalizer.
        /// </summary>
        ~Component3()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Component3 constructor.
        /// </summary>
        public Component3()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Component3();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Component3 constructor.
        /// </summary>
        internal Component3(HL7SDK.Xml.Cda.POCD_MT000040Component3 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Component3
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Component3 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Component3;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The section property.
        /// </summary>
        public HL7SDK.Cda.ISection Section
        {
            get
            {
                if (Element.section == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.section = new HL7SDK.Xml.Cda.POCD_MT000040Section();
                    }
                }
                return ElementFactory.Wrap(Element.section, this) as HL7SDK.Cda.ISection;
            }
            set
            {
                if (value == null)
                {
                    Element.section = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Section)value;
                    t.Attach(this);
                    Element.section = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ActRelationshipHasComponent)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ActRelationshipHasComponent)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        public bool ContextConductionInd
        {
            get
            {
                return Element.contextConductionInd;
            }
            set
            {
                Element.contextConductionInd = value;
            }
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        public bool ContextConductionIndSpecified
        {
            get
            {
                return Element.contextConductionIndSpecified;
            }
            set
            {
                Element.contextConductionIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Component3();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IComponent3Collection interface.
    /// </summary>


    [Guid("28c5667c-ff18-4685-8f1a-d1fa9a3648cd")]
    public partial interface IComponent3Collection : ICDACollection, IEnumerable<IComponent3>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IComponent3 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IComponent3 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IComponent3 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IComponent3 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IComponent3 item1, IComponent3 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IComponent3 Append();
    }
    

    [Guid("6f51fe2a-21b4-411e-b382-ed4377321162")]
    internal partial class Component3Collection : CDAFactoryCollection<HL7SDK.Cda.Component3, HL7SDK.Xml.Cda.POCD_MT000040Component3, HL7SDK.Cda.IComponent3>, HL7SDK.Cda.IComponent3Collection
    {
        
        internal Component3Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Component3[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Component3[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IComponent4Collection interface.
    /// </summary>

    [Guid("e4ccbb53-f963-4d50-9f8d-246f4f580449")]

    public partial interface IComponent4 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Component4 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The sequenceNumber property.
        /// </summary>
        IINT SequenceNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The seperatableInd property.
        /// </summary>
        IBL SeperatableInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IAct.
        /// </summary>
        IAct AsAct
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as ISubstanceAdministration.
        /// </summary>
        ISubstanceAdministration AsSubstanceAdministration
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IOrganizer.
        /// </summary>
        IOrganizer AsOrganizer
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IProcedure.
        /// </summary>
        IProcedure AsProcedure
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IEncounter.
        /// </summary>
        IEncounter AsEncounter
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as ISupply.
        /// </summary>
        ISupply AsSupply
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IRegionOfInterest.
        /// </summary>
        IRegionOfInterest AsRegionOfInterest
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IObservation.
        /// </summary>
        IObservation AsObservation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IObservationMedia.
        /// </summary>
        IObservationMedia AsObservationMedia
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        bool ContextConductionInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        bool ContextConductionIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Component4 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IComponent4))]
    [Guid("9cdb00d3-9040-4cb1-911a-203b8ae6186f")]
    public partial class Component4 : CDAElement, INotifyPropertyChanged, IComponent4, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Component4 finalizer.
        /// </summary>
        ~Component4()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Component4 constructor.
        /// </summary>
        public Component4()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Component4();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Component4 constructor.
        /// </summary>
        internal Component4(HL7SDK.Xml.Cda.POCD_MT000040Component4 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Component4
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Component4 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Component4;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The sequenceNumber property.
        /// </summary>
        public HL7SDK.Cda.IINT SequenceNumber
        {
            get
            {
                if (Element.sequenceNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.sequenceNumber = new HL7SDK.Xml.Cda.INT();
                    }
                }
                return ElementFactory.Wrap(Element.sequenceNumber, this) as HL7SDK.Cda.IINT;
            }
            set
            {
                if (value == null)
                {
                    Element.sequenceNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.INT)value;
                    t.Attach(this);
                    Element.sequenceNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The seperatableInd property.
        /// </summary>
        public HL7SDK.Cda.IBL SeperatableInd
        {
            get
            {
                if (Element.seperatableInd == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.seperatableInd = new HL7SDK.Xml.Cda.BL();
                    }
                }
                return ElementFactory.Wrap(Element.seperatableInd, this) as HL7SDK.Cda.IBL;
            }
            set
            {
                if (value == null)
                {
                    Element.seperatableInd = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.BL)value;
                    t.Attach(this);
                    Element.seperatableInd = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IAct.
        /// </summary>
        public virtual IAct AsAct
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Act();
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Act)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Act expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as ISubstanceAdministration.
        /// </summary>
        public virtual ISubstanceAdministration AsSubstanceAdministration
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration();
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040SubstanceAdministration expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IOrganizer.
        /// </summary>
        public virtual IOrganizer AsOrganizer
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Organizer();
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Organizer)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Organizer expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IProcedure.
        /// </summary>
        public virtual IProcedure AsProcedure
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Procedure();
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Procedure)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Procedure expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IEncounter.
        /// </summary>
        public virtual IEncounter AsEncounter
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Encounter();
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Encounter)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Encounter expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as ISupply.
        /// </summary>
        public virtual ISupply AsSupply
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Supply();
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Supply)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Supply expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IRegionOfInterest.
        /// </summary>
        public virtual IRegionOfInterest AsRegionOfInterest
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest();
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040RegionOfInterest expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IObservation.
        /// </summary>
        public virtual IObservation AsObservation
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Observation();
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Observation)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Observation expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Component4.Item value as IObservationMedia.
        /// </summary>
        public virtual IObservationMedia AsObservationMedia
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia();
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040ObservationMedia expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Act, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Organizer, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Procedure, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Encounter, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Supply, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Observation, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.Act)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Act).Element;
                    return;
                }
                if (value is HL7SDK.Cda.SubstanceAdministration)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.SubstanceAdministration).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Organizer)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Organizer).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Procedure)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Procedure).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Encounter)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Encounter).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Supply)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Supply).Element;
                    return;
                }
                if (value is HL7SDK.Cda.RegionOfInterest)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.RegionOfInterest).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Observation)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Observation).Element;
                    return;
                }
                if (value is HL7SDK.Cda.ObservationMedia)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.ObservationMedia).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ActRelationshipHasComponent)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ActRelationshipHasComponent)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        public bool ContextConductionInd
        {
            get
            {
                return Element.contextConductionInd;
            }
            set
            {
                Element.contextConductionInd = value;
            }
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        public bool ContextConductionIndSpecified
        {
            get
            {
                return Element.contextConductionIndSpecified;
            }
            set
            {
                Element.contextConductionIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Component4();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IComponent4Collection interface.
    /// </summary>


    [Guid("cb6502d1-a5b7-4a30-9e12-c814cb564fb7")]
    public partial interface IComponent4Collection : ICDACollection, IEnumerable<IComponent4>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IComponent4 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IComponent4 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IComponent4 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IComponent4 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IComponent4 item1, IComponent4 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IComponent4 Append();
    }
    

    [Guid("bc40fbb2-2806-4a3b-b655-83c4ed689fbf")]
    internal partial class Component4Collection : CDAFactoryCollection<HL7SDK.Cda.Component4, HL7SDK.Xml.Cda.POCD_MT000040Component4, HL7SDK.Cda.IComponent4>, HL7SDK.Cda.IComponent4Collection
    {
        
        internal Component4Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Component4[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Component4[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IComponent5Collection interface.
    /// </summary>

    [Guid("0f991f32-19af-433f-b955-c49afe56c450")]

    public partial interface IComponent5 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Component5 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The section property.
        /// </summary>
        ISection Section
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        bool ContextConductionInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        bool ContextConductionIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Component5 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IComponent5))]
    [Guid("00d7404c-8cf6-4354-b153-ef44290d3aab")]
    public partial class Component5 : CDAElement, INotifyPropertyChanged, IComponent5, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Component5 finalizer.
        /// </summary>
        ~Component5()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Component5 constructor.
        /// </summary>
        public Component5()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Component5();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Component5 constructor.
        /// </summary>
        internal Component5(HL7SDK.Xml.Cda.POCD_MT000040Component5 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Component5
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Component5 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Component5;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The section property.
        /// </summary>
        public HL7SDK.Cda.ISection Section
        {
            get
            {
                if (Element.section == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.section = new HL7SDK.Xml.Cda.POCD_MT000040Section();
                    }
                }
                return ElementFactory.Wrap(Element.section, this) as HL7SDK.Cda.ISection;
            }
            set
            {
                if (value == null)
                {
                    Element.section = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Section)value;
                    t.Attach(this);
                    Element.section = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ActRelationshipHasComponent TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ActRelationshipHasComponent)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ActRelationshipHasComponent)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        public bool ContextConductionInd
        {
            get
            {
                return Element.contextConductionInd;
            }
            set
            {
                Element.contextConductionInd = value;
            }
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        public bool ContextConductionIndSpecified
        {
            get
            {
                return Element.contextConductionIndSpecified;
            }
            set
            {
                Element.contextConductionIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Component5();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IComponent5Collection interface.
    /// </summary>


    [Guid("b5727d81-199b-49d2-83ba-877b24038d47")]
    public partial interface IComponent5Collection : ICDACollection, IEnumerable<IComponent5>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IComponent5 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IComponent5 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IComponent5 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IComponent5 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IComponent5 item1, IComponent5 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IComponent5 Append();
    }
    

    [Guid("1751c9a3-4cfe-4a74-b14a-435fa007207e")]
    internal partial class Component5Collection : CDAFactoryCollection<HL7SDK.Cda.Component5, HL7SDK.Xml.Cda.POCD_MT000040Component5, HL7SDK.Cda.IComponent5>, HL7SDK.Cda.IComponent5Collection
    {
        
        internal Component5Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Component5[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Component5[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IConsentCollection interface.
    /// </summary>

    [Guid("bb222b48-43c8-4ed6-ba69-b7384175498a")]

    public partial interface IConsent : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Consent object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Consent class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IConsent))]
    [Guid("0b46b2dd-f974-46f1-bb8b-03e6bae3776b")]
    public partial class Consent : CDAElement, INotifyPropertyChanged, IConsent, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Consent finalizer.
        /// </summary>
        ~Consent()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Consent constructor.
        /// </summary>
        public Consent()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Consent();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Consent constructor.
        /// </summary>
        internal Consent(HL7SDK.Xml.Cda.POCD_MT000040Consent element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Consent
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Consent Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Consent;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Consent();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IConsentCollection interface.
    /// </summary>


    [Guid("b1781de3-c923-4299-9492-99160891c2b7")]
    public partial interface IConsentCollection : ICDACollection, IEnumerable<IConsent>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IConsent this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IConsent value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IConsent value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IConsent item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IConsent item1, IConsent item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IConsent Append();
    }
    

    [Guid("e3965d52-2c74-485a-bf8c-2fe09eebac6f")]
    internal partial class ConsentCollection : CDAFactoryCollection<HL7SDK.Cda.Consent, HL7SDK.Xml.Cda.POCD_MT000040Consent, HL7SDK.Cda.IConsent>, HL7SDK.Cda.IConsentCollection
    {
        
        internal ConsentCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Consent[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Consent[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IConsumableCollection interface.
    /// </summary>

    [Guid("7829e55d-522b-4fb1-99a0-9953655f04a5")]

    public partial interface IConsumable : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Consumable object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The manufacturedProduct property.
        /// </summary>
        IManufacturedProduct ManufacturedProduct
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Consumable class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IConsumable))]
    [Guid("8b1374dc-f5ce-48ef-8e65-0a760cf1290b")]
    public partial class Consumable : CDAElement, INotifyPropertyChanged, IConsumable, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Consumable finalizer.
        /// </summary>
        ~Consumable()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Consumable constructor.
        /// </summary>
        public Consumable()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Consumable();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Consumable constructor.
        /// </summary>
        internal Consumable(HL7SDK.Xml.Cda.POCD_MT000040Consumable element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Consumable
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Consumable Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Consumable;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The manufacturedProduct property.
        /// </summary>
        public HL7SDK.Cda.IManufacturedProduct ManufacturedProduct
        {
            get
            {
                if (Element.manufacturedProduct == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.manufacturedProduct = new HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct();
                    }
                }
                return ElementFactory.Wrap(Element.manufacturedProduct, this) as HL7SDK.Cda.IManufacturedProduct;
            }
            set
            {
                if (value == null)
                {
                    Element.manufacturedProduct = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ManufacturedProduct)value;
                    t.Attach(this);
                    Element.manufacturedProduct = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Consumable();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IConsumableCollection interface.
    /// </summary>


    [Guid("3bbf442c-5c30-4e75-a65f-57acaaa7f9ef")]
    public partial interface IConsumableCollection : ICDACollection, IEnumerable<IConsumable>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IConsumable this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IConsumable value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IConsumable value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IConsumable item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IConsumable item1, IConsumable item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IConsumable Append();
    }
    

    [Guid("cb4d1511-06d4-41fe-8b15-abda6c457670")]
    internal partial class ConsumableCollection : CDAFactoryCollection<HL7SDK.Cda.Consumable, HL7SDK.Xml.Cda.POCD_MT000040Consumable, HL7SDK.Cda.IConsumable>, HL7SDK.Cda.IConsumableCollection
    {
        
        internal ConsumableCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Consumable[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Consumable[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ICriterionCollection interface.
    /// </summary>

    [Guid("08b6f7e5-9806-4cd0-ba94-b9494ad982ea")]

    public partial interface ICriterion : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Criterion object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Criterion class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICriterion))]
    [Guid("55cc57a2-ce7d-4232-91b9-d260b2adddfa")]
    public partial class Criterion : CDAElement, INotifyPropertyChanged, ICriterion, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Criterion finalizer.
        /// </summary>
        ~Criterion()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Criterion constructor.
        /// </summary>
        public Criterion()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Criterion();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Criterion constructor.
        /// </summary>
        internal Criterion(HL7SDK.Xml.Cda.POCD_MT000040Criterion element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Criterion
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Criterion Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Criterion;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Criterion();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICriterionCollection interface.
    /// </summary>


    [Guid("7ffc5729-b480-4bca-9766-74ca5977a37b")]
    public partial interface ICriterionCollection : ICDACollection, IEnumerable<ICriterion>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ICriterion this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ICriterion value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ICriterion value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ICriterion item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ICriterion item1, ICriterion item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ICriterion Append();
    }
    

    [Guid("173bbe3d-b627-4527-98c2-78e6e2ebd0f8")]
    internal partial class CriterionCollection : CDAFactoryCollection<HL7SDK.Cda.Criterion, HL7SDK.Xml.Cda.POCD_MT000040Criterion, HL7SDK.Cda.ICriterion>, HL7SDK.Cda.ICriterionCollection
    {
        
        internal CriterionCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Criterion[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Criterion[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ICustodianCollection interface.
    /// </summary>

    [Guid("39f27172-b269-4d67-bcc9-03d3c388e479")]

    public partial interface ICustodian : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Custodian object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The assignedCustodian property.
        /// </summary>
        IAssignedCustodian AssignedCustodian
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Custodian class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICustodian))]
    [Guid("45466001-97e9-4730-a43b-57171db23532")]
    public partial class Custodian : CDAElement, INotifyPropertyChanged, ICustodian, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Custodian finalizer.
        /// </summary>
        ~Custodian()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Custodian constructor.
        /// </summary>
        public Custodian()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Custodian();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Custodian constructor.
        /// </summary>
        internal Custodian(HL7SDK.Xml.Cda.POCD_MT000040Custodian element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Custodian
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Custodian Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Custodian;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The assignedCustodian property.
        /// </summary>
        public HL7SDK.Cda.IAssignedCustodian AssignedCustodian
        {
            get
            {
                if (Element.assignedCustodian == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedCustodian = new HL7SDK.Xml.Cda.POCD_MT000040AssignedCustodian();
                    }
                }
                return ElementFactory.Wrap(Element.assignedCustodian, this) as HL7SDK.Cda.IAssignedCustodian;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedCustodian = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedCustodian)value;
                    t.Attach(this);
                    Element.assignedCustodian = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Custodian();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICustodianCollection interface.
    /// </summary>


    [Guid("0aed2535-f23a-425e-9cd1-ff8ce652b24b")]
    public partial interface ICustodianCollection : ICDACollection, IEnumerable<ICustodian>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ICustodian this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ICustodian value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ICustodian value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ICustodian item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ICustodian item1, ICustodian item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ICustodian Append();
    }
    

    [Guid("b7c8a078-417e-4d7f-a72d-951d4ea50263")]
    internal partial class CustodianCollection : CDAFactoryCollection<HL7SDK.Cda.Custodian, HL7SDK.Xml.Cda.POCD_MT000040Custodian, HL7SDK.Cda.ICustodian>, HL7SDK.Cda.ICustodianCollection
    {
        
        internal CustodianCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Custodian[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Custodian[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ICustodianOrganizationCollection interface.
    /// </summary>

    [Guid("a19549ef-2d24-4c59-8073-691b7c7d8902")]

    public partial interface ICustodianOrganization : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040CustodianOrganization object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        ION Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITEL Telecom
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IAD Addr
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The CustodianOrganization class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ICustodianOrganization))]
    [Guid("c7bb43dc-5797-4f4b-9d24-00c5fa9adecb")]
    public partial class CustodianOrganization : CDAElement, INotifyPropertyChanged, ICustodianOrganization, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// CustodianOrganization finalizer.
        /// </summary>
        ~CustodianOrganization()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// CustodianOrganization constructor.
        /// </summary>
        public CustodianOrganization()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// CustodianOrganization constructor.
        /// </summary>
        internal CustodianOrganization(HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040CustodianOrganization
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.ION Name
        {
            get
            {
                if (Element.name == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.name = new HL7SDK.Xml.Cda.ON();
                    }
                }
                return ElementFactory.Wrap(Element.name, this) as HL7SDK.Cda.ION;
            }
            set
            {
                if (value == null)
                {
                    Element.name = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ON)value;
                    t.Attach(this);
                    Element.name = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITEL Telecom
        {
            get
            {
                if (Element.telecom == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.telecom = new HL7SDK.Xml.Cda.TEL();
                    }
                }
                return ElementFactory.Wrap(Element.telecom, this) as HL7SDK.Cda.ITEL;
            }
            set
            {
                if (value == null)
                {
                    Element.telecom = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TEL)value;
                    t.Attach(this);
                    Element.telecom = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IAD Addr
        {
            get
            {
                if (Element.addr == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.addr = new HL7SDK.Xml.Cda.AD();
                    }
                }
                return ElementFactory.Wrap(Element.addr, this) as HL7SDK.Cda.IAD;
            }
            set
            {
                if (value == null)
                {
                    Element.addr = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AD)value;
                    t.Attach(this);
                    Element.addr = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ICustodianOrganizationCollection interface.
    /// </summary>


    [Guid("ad48920c-9936-4981-9bdf-fae72922cd02")]
    public partial interface ICustodianOrganizationCollection : ICDACollection, IEnumerable<ICustodianOrganization>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ICustodianOrganization this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ICustodianOrganization value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ICustodianOrganization value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ICustodianOrganization item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ICustodianOrganization item1, ICustodianOrganization item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ICustodianOrganization Append();
    }
    

    [Guid("39aac750-bbe0-4f7f-bfee-8414bd08d01d")]
    internal partial class CustodianOrganizationCollection : CDAFactoryCollection<HL7SDK.Cda.CustodianOrganization, HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization, HL7SDK.Cda.ICustodianOrganization>, HL7SDK.Cda.ICustodianOrganizationCollection
    {
        
        internal CustodianOrganizationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040CustodianOrganization[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IDataEntererCollection interface.
    /// </summary>

    [Guid("b582238e-c3fa-4f28-8658-53eb1a37bab7")]

    public partial interface IDataEnterer : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040DataEnterer object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        ITS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        IAssignedEntity AssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The DataEnterer class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IDataEnterer))]
    [Guid("69c3d807-3b15-41c2-a1e0-a224074f8c0b")]
    public partial class DataEnterer : CDAElement, INotifyPropertyChanged, IDataEnterer, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// DataEnterer finalizer.
        /// </summary>
        ~DataEnterer()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// DataEnterer constructor.
        /// </summary>
        public DataEnterer()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040DataEnterer();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// DataEnterer constructor.
        /// </summary>
        internal DataEnterer(HL7SDK.Xml.Cda.POCD_MT000040DataEnterer element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040DataEnterer
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040DataEnterer Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040DataEnterer;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.ITS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssignedEntity AssignedEntity
        {
            get
            {
                if (Element.assignedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.assignedEntity, this) as HL7SDK.Cda.IAssignedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedEntity)value;
                    t.Attach(this);
                    Element.assignedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040DataEnterer();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IDataEntererCollection interface.
    /// </summary>


    [Guid("d3d71c38-6fe9-4b0b-826f-af9b2949bf82")]
    public partial interface IDataEntererCollection : ICDACollection, IEnumerable<IDataEnterer>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IDataEnterer this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IDataEnterer value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IDataEnterer value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IDataEnterer item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IDataEnterer item1, IDataEnterer item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IDataEnterer Append();
    }
    

    [Guid("9d1b5ea2-4cac-4495-acc1-0566f662805c")]
    internal partial class DataEntererCollection : CDAFactoryCollection<HL7SDK.Cda.DataEnterer, HL7SDK.Xml.Cda.POCD_MT000040DataEnterer, HL7SDK.Cda.IDataEnterer>, HL7SDK.Cda.IDataEntererCollection
    {
        
        internal DataEntererCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040DataEnterer[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040DataEnterer[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IDeviceCollection interface.
    /// </summary>

    [Guid("545478db-9f37-489a-b21d-8bfcaf8556c5")]

    public partial interface IDevice : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Device object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The manufacturerModelName property.
        /// </summary>
        ISC ManufacturerModelName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The softwareName property.
        /// </summary>
        ISC SoftwareName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.EntityClassDevice ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Device class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IDevice))]
    [Guid("dca901e6-e1d0-499d-91cb-8c386553afc9")]
    public partial class Device : CDAElement, INotifyPropertyChanged, IDevice, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Device finalizer.
        /// </summary>
        ~Device()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Device constructor.
        /// </summary>
        public Device()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Device();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Device constructor.
        /// </summary>
        internal Device(HL7SDK.Xml.Cda.POCD_MT000040Device element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Device
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Device Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Device;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The manufacturerModelName property.
        /// </summary>
        public HL7SDK.Cda.ISC ManufacturerModelName
        {
            get
            {
                if (Element.manufacturerModelName == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.manufacturerModelName = new HL7SDK.Xml.Cda.SC();
                    }
                }
                return ElementFactory.Wrap(Element.manufacturerModelName, this) as HL7SDK.Cda.ISC;
            }
            set
            {
                if (value == null)
                {
                    Element.manufacturerModelName = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.SC)value;
                    t.Attach(this);
                    Element.manufacturerModelName = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The softwareName property.
        /// </summary>
        public HL7SDK.Cda.ISC SoftwareName
        {
            get
            {
                if (Element.softwareName == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.softwareName = new HL7SDK.Xml.Cda.SC();
                    }
                }
                return ElementFactory.Wrap(Element.softwareName, this) as HL7SDK.Cda.ISC;
            }
            set
            {
                if (value == null)
                {
                    Element.softwareName = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.SC)value;
                    t.Attach(this);
                    Element.softwareName = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.EntityClassDevice ClassCode
        {
            get
            {
                return (HL7SDK.Cda.EntityClassDevice)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.EntityClassDevice)value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Device();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IDeviceCollection interface.
    /// </summary>


    [Guid("92c0026f-656e-4be4-bbdc-12904b547f74")]
    public partial interface IDeviceCollection : ICDACollection, IEnumerable<IDevice>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IDevice this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IDevice value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IDevice value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IDevice item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IDevice item1, IDevice item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IDevice Append();
    }
    

    [Guid("12f7339e-ecdb-4efd-9bdf-fa551c2feac2")]
    internal partial class DeviceCollection : CDAFactoryCollection<HL7SDK.Cda.Device, HL7SDK.Xml.Cda.POCD_MT000040Device, HL7SDK.Cda.IDevice>, HL7SDK.Cda.IDeviceCollection
    {
        
        internal DeviceCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Device[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Device[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IDocumentationOfCollection interface.
    /// </summary>

    [Guid("8aca603a-cd0c-4e58-81a2-5442df9c2409")]

    public partial interface IDocumentationOf : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040DocumentationOf object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The serviceEvent property.
        /// </summary>
        IServiceEvent ServiceEvent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The DocumentationOf class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IDocumentationOf))]
    [Guid("eafff794-3864-4ada-908c-101f74fcb530")]
    public partial class DocumentationOf : CDAElement, INotifyPropertyChanged, IDocumentationOf, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// DocumentationOf finalizer.
        /// </summary>
        ~DocumentationOf()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// DocumentationOf constructor.
        /// </summary>
        public DocumentationOf()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// DocumentationOf constructor.
        /// </summary>
        internal DocumentationOf(HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040DocumentationOf
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The serviceEvent property.
        /// </summary>
        public HL7SDK.Cda.IServiceEvent ServiceEvent
        {
            get
            {
                if (Element.serviceEvent == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.serviceEvent = new HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent();
                    }
                }
                return ElementFactory.Wrap(Element.serviceEvent, this) as HL7SDK.Cda.IServiceEvent;
            }
            set
            {
                if (value == null)
                {
                    Element.serviceEvent = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ServiceEvent)value;
                    t.Attach(this);
                    Element.serviceEvent = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IDocumentationOfCollection interface.
    /// </summary>


    [Guid("e96006b0-d22e-4ab6-bd1d-ed416a94ba19")]
    public partial interface IDocumentationOfCollection : ICDACollection, IEnumerable<IDocumentationOf>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IDocumentationOf this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IDocumentationOf value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IDocumentationOf value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IDocumentationOf item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IDocumentationOf item1, IDocumentationOf item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IDocumentationOf Append();
    }
    

    [Guid("7e3ae38e-f765-40ef-9e20-92ee57b96b60")]
    internal partial class DocumentationOfCollection : CDAFactoryCollection<HL7SDK.Cda.DocumentationOf, HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf, HL7SDK.Cda.IDocumentationOf>, HL7SDK.Cda.IDocumentationOfCollection
    {
        
        internal DocumentationOfCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040DocumentationOf[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IEncompassingEncounterCollection interface.
    /// </summary>

    [Guid("8f294ae7-2696-4843-aa3b-c87997618366")]

    public partial interface IEncompassingEncounter : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040EncompassingEncounter object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dischargeDispositionCode property.
        /// </summary>
        ICE DischargeDispositionCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The responsibleParty property.
        /// </summary>
        IResponsibleParty ResponsibleParty
        {
            get;
            set;
        }
        
        /// <summary>
        /// The encounterParticipant property.
        /// </summary>
        IEncounterParticipantCollection EncounterParticipant
        {
            get;
        }
        
        /// <summary>
        /// The location property.
        /// </summary>
        ILocation Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The EncompassingEncounter class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEncompassingEncounter))]
    [Guid("24f18510-1a1f-43f5-9be7-95a4111cf8aa")]
    public partial class EncompassingEncounter : CDAElement, INotifyPropertyChanged, IEncompassingEncounter, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// EncompassingEncounter finalizer.
        /// </summary>
        ~EncompassingEncounter()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// EncompassingEncounter constructor.
        /// </summary>
        public EncompassingEncounter()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// EncompassingEncounter constructor.
        /// </summary>
        internal EncompassingEncounter(HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040EncompassingEncounter
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The dischargeDispositionCode property.
        /// </summary>
        public HL7SDK.Cda.ICE DischargeDispositionCode
        {
            get
            {
                if (Element.dischargeDispositionCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.dischargeDispositionCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.dischargeDispositionCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.dischargeDispositionCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.dischargeDispositionCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The responsibleParty property.
        /// </summary>
        public HL7SDK.Cda.IResponsibleParty ResponsibleParty
        {
            get
            {
                if (Element.responsibleParty == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.responsibleParty = new HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty();
                    }
                }
                return ElementFactory.Wrap(Element.responsibleParty, this) as HL7SDK.Cda.IResponsibleParty;
            }
            set
            {
                if (value == null)
                {
                    Element.responsibleParty = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ResponsibleParty)value;
                    t.Attach(this);
                    Element.responsibleParty = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The encounterParticipant property.
        /// </summary>
        public HL7SDK.Cda.IEncounterParticipantCollection EncounterParticipant
        {
            get
            {
                return new HL7SDK.Cda.EncounterParticipantCollection(this, () => { return Element.encounterParticipant; }, (x) => { Element.encounterParticipant = x; });
            }
        }
        
        /// <summary>
        /// The location property.
        /// </summary>
        public HL7SDK.Cda.ILocation Location
        {
            get
            {
                if (Element.location == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.location = new HL7SDK.Xml.Cda.POCD_MT000040Location();
                    }
                }
                return ElementFactory.Wrap(Element.location, this) as HL7SDK.Cda.ILocation;
            }
            set
            {
                if (value == null)
                {
                    Element.location = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Location)value;
                    t.Attach(this);
                    Element.location = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEncompassingEncounterCollection interface.
    /// </summary>


    [Guid("d532aa53-a7d9-4f5b-89d8-1a8a824ed3e5")]
    public partial interface IEncompassingEncounterCollection : ICDACollection, IEnumerable<IEncompassingEncounter>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IEncompassingEncounter this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IEncompassingEncounter value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IEncompassingEncounter value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IEncompassingEncounter item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IEncompassingEncounter item1, IEncompassingEncounter item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IEncompassingEncounter Append();
    }
    

    [Guid("f8beb332-6769-4cd9-8bd6-750405988a52")]
    internal partial class EncompassingEncounterCollection : CDAFactoryCollection<HL7SDK.Cda.EncompassingEncounter, HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter, HL7SDK.Cda.IEncompassingEncounter>, HL7SDK.Cda.IEncompassingEncounterCollection
    {
        
        internal EncompassingEncounterCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040EncompassingEncounter[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IEncounterCollection interface.
    /// </summary>

    [Guid("b803c650-babf-4cef-8e20-38cf50ef990e")]

    public partial interface IEncounter : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Encounter object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        ICE PriorityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        HL7SDK.Cda.x_DocumentEncounterMood MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Encounter class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEncounter))]
    [Guid("eda9c582-1add-4a33-a52c-666b03863427")]
    public partial class Encounter : CDAElement, INotifyPropertyChanged, IEncounter, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Encounter finalizer.
        /// </summary>
        ~Encounter()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Encounter constructor.
        /// </summary>
        public Encounter()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Encounter();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Encounter constructor.
        /// </summary>
        internal Encounter(HL7SDK.Xml.Cda.POCD_MT000040Encounter element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Encounter
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Encounter Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Encounter;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE PriorityCode
        {
            get
            {
                if (Element.priorityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.priorityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.priorityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.priorityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.priorityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public HL7SDK.Cda.x_DocumentEncounterMood MoodCode
        {
            get
            {
                return (HL7SDK.Cda.x_DocumentEncounterMood)Element.moodCode;
            }
            set
            {
                Element.moodCode = (HL7SDK.Xml.Cda.x_DocumentEncounterMood)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Encounter();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEncounterCollection interface.
    /// </summary>


    [Guid("a4c6b5eb-54f7-431e-89de-9f615ef7cc2b")]
    public partial interface IEncounterCollection : ICDACollection, IEnumerable<IEncounter>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IEncounter this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IEncounter value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IEncounter value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IEncounter item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IEncounter item1, IEncounter item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IEncounter Append();
    }
    

    [Guid("d6e43659-b3c8-4559-b323-666d4878bc38")]
    internal partial class EncounterCollection : CDAFactoryCollection<HL7SDK.Cda.Encounter, HL7SDK.Xml.Cda.POCD_MT000040Encounter, HL7SDK.Cda.IEncounter>, HL7SDK.Cda.IEncounterCollection
    {
        
        internal EncounterCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Encounter[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Encounter[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IEncounterParticipantCollection interface.
    /// </summary>

    [Guid("28135db0-deff-44c6-8bce-b043c1ebd0ef")]

    public partial interface IEncounterParticipant : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040EncounterParticipant object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        IIVL_TS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        IAssignedEntity AssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.x_EncounterParticipant TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The EncounterParticipant class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEncounterParticipant))]
    [Guid("c250fe84-1164-4c1f-be15-630372ce05f4")]
    public partial class EncounterParticipant : CDAElement, INotifyPropertyChanged, IEncounterParticipant, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// EncounterParticipant finalizer.
        /// </summary>
        ~EncounterParticipant()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// EncounterParticipant constructor.
        /// </summary>
        public EncounterParticipant()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// EncounterParticipant constructor.
        /// </summary>
        internal EncounterParticipant(HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040EncounterParticipant
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssignedEntity AssignedEntity
        {
            get
            {
                if (Element.assignedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.assignedEntity, this) as HL7SDK.Cda.IAssignedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedEntity)value;
                    t.Attach(this);
                    Element.assignedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.x_EncounterParticipant TypeCode
        {
            get
            {
                return (HL7SDK.Cda.x_EncounterParticipant)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.x_EncounterParticipant)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEncounterParticipantCollection interface.
    /// </summary>


    [Guid("6c1b8e0d-c5d9-4ea4-81e7-86826a6a55c3")]
    public partial interface IEncounterParticipantCollection : ICDACollection, IEnumerable<IEncounterParticipant>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IEncounterParticipant this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IEncounterParticipant value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IEncounterParticipant value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IEncounterParticipant item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IEncounterParticipant item1, IEncounterParticipant item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IEncounterParticipant Append();
    }
    

    [Guid("ecbae2ad-0df7-4c4d-830a-a6f3af3cac39")]
    internal partial class EncounterParticipantCollection : CDAFactoryCollection<HL7SDK.Cda.EncounterParticipant, HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant, HL7SDK.Cda.IEncounterParticipant>, HL7SDK.Cda.IEncounterParticipantCollection
    {
        
        internal EncounterParticipantCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040EncounterParticipant[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IEntityCollection interface.
    /// </summary>

    [Guid("4360b98c-445f-45c4-903b-8b7f481571d4")]

    public partial interface IEntity : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Entity object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The desc property.
        /// </summary>
        IED Desc
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Entity class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEntity))]
    [Guid("0dac69a3-07b8-4480-82f6-79c479aea7d5")]
    public partial class Entity : CDAElement, INotifyPropertyChanged, IEntity, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Entity finalizer.
        /// </summary>
        ~Entity()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Entity constructor.
        /// </summary>
        public Entity()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Entity();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Entity constructor.
        /// </summary>
        internal Entity(HL7SDK.Xml.Cda.POCD_MT000040Entity element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Entity
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Entity Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Entity;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The desc property.
        /// </summary>
        public HL7SDK.Cda.IED Desc
        {
            get
            {
                if (Element.desc == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.desc = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.desc, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.desc = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.desc = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Entity();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEntityCollection interface.
    /// </summary>


    [Guid("b3bb6fe8-ac60-43e0-aba0-bc2d37aea0c6")]
    public partial interface IEntityCollection : ICDACollection, IEnumerable<IEntity>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IEntity this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IEntity value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IEntity value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IEntity item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IEntity item1, IEntity item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IEntity Append();
    }
    

    [Guid("74e65eb4-60f0-4dcc-a123-51c53cc975e3")]
    internal partial class EntityCollection : CDAFactoryCollection<HL7SDK.Cda.Entity, HL7SDK.Xml.Cda.POCD_MT000040Entity, HL7SDK.Cda.IEntity>, HL7SDK.Cda.IEntityCollection
    {
        
        internal EntityCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Entity[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Entity[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IEntryCollection interface.
    /// </summary>

    [Guid("48e94811-a309-4fce-a021-1c4f2cf80189")]

    public partial interface IEntry : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Entry object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IObservationMedia.
        /// </summary>
        IObservationMedia AsObservationMedia
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IAct.
        /// </summary>
        IAct AsAct
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IOrganizer.
        /// </summary>
        IOrganizer AsOrganizer
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IProcedure.
        /// </summary>
        IProcedure AsProcedure
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IRegionOfInterest.
        /// </summary>
        IRegionOfInterest AsRegionOfInterest
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IObservation.
        /// </summary>
        IObservation AsObservation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as ISupply.
        /// </summary>
        ISupply AsSupply
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as ISubstanceAdministration.
        /// </summary>
        ISubstanceAdministration AsSubstanceAdministration
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IEncounter.
        /// </summary>
        IEncounter AsEncounter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.x_ActRelationshipEntry TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        bool ContextConductionInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        bool ContextConductionIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Entry class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEntry))]
    [Guid("a93adf15-1f36-4570-8916-7c50e876a173")]
    public partial class Entry : CDAElement, INotifyPropertyChanged, IEntry, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Entry finalizer.
        /// </summary>
        ~Entry()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Entry constructor.
        /// </summary>
        public Entry()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Entry();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Entry constructor.
        /// </summary>
        internal Entry(HL7SDK.Xml.Cda.POCD_MT000040Entry element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Entry
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Entry Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Entry;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IObservationMedia.
        /// </summary>
        public virtual IObservationMedia AsObservationMedia
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia();
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040ObservationMedia expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IAct.
        /// </summary>
        public virtual IAct AsAct
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Act();
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Act)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Act expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IOrganizer.
        /// </summary>
        public virtual IOrganizer AsOrganizer
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Organizer();
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Organizer)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Organizer expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IProcedure.
        /// </summary>
        public virtual IProcedure AsProcedure
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Procedure();
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Procedure)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Procedure expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IRegionOfInterest.
        /// </summary>
        public virtual IRegionOfInterest AsRegionOfInterest
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest();
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040RegionOfInterest expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IObservation.
        /// </summary>
        public virtual IObservation AsObservation
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Observation();
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Observation)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Observation expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as ISupply.
        /// </summary>
        public virtual ISupply AsSupply
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Supply();
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Supply)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Supply expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as ISubstanceAdministration.
        /// </summary>
        public virtual ISubstanceAdministration AsSubstanceAdministration
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration();
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040SubstanceAdministration expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Entry.Item value as IEncounter.
        /// </summary>
        public virtual IEncounter AsEncounter
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Encounter();
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Encounter)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Encounter expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Act, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Organizer, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Procedure, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Observation, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Supply, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Encounter, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.ObservationMedia)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.ObservationMedia).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Act)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Act).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Organizer)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Organizer).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Procedure)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Procedure).Element;
                    return;
                }
                if (value is HL7SDK.Cda.RegionOfInterest)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.RegionOfInterest).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Observation)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Observation).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Supply)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Supply).Element;
                    return;
                }
                if (value is HL7SDK.Cda.SubstanceAdministration)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.SubstanceAdministration).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Encounter)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Encounter).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.x_ActRelationshipEntry TypeCode
        {
            get
            {
                return (HL7SDK.Cda.x_ActRelationshipEntry)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.x_ActRelationshipEntry)value;
            }
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        public bool ContextConductionInd
        {
            get
            {
                return Element.contextConductionInd;
            }
            set
            {
                Element.contextConductionInd = value;
            }
        }
        
        /// <summary>
        /// The contextConductionIndSpecified property.
        /// </summary>
        public bool ContextConductionIndSpecified
        {
            get
            {
                return Element.contextConductionIndSpecified;
            }
            set
            {
                Element.contextConductionIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Entry();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEntryCollection interface.
    /// </summary>


    [Guid("35ea5712-e3e1-4b89-afdf-011e92e9650f")]
    public partial interface IEntryCollection : ICDACollection, IEnumerable<IEntry>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IEntry this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IEntry value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IEntry value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IEntry item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IEntry item1, IEntry item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IEntry Append();
    }
    

    [Guid("1bee64ad-e4a5-44b8-a1c8-ba7559a2407f")]
    internal partial class EntryCollection : CDAFactoryCollection<HL7SDK.Cda.Entry, HL7SDK.Xml.Cda.POCD_MT000040Entry, HL7SDK.Cda.IEntry>, HL7SDK.Cda.IEntryCollection
    {
        
        internal EntryCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Entry[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Entry[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IEntryRelationshipCollection interface.
    /// </summary>

    [Guid("c02c07f3-4ccb-436f-8fe1-9fe3d2a283ab")]

    public partial interface IEntryRelationship : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040EntryRelationship object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The sequenceNumber property.
        /// </summary>
        IINT SequenceNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The seperatableInd property.
        /// </summary>
        IBL SeperatableInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IRegionOfInterest.
        /// </summary>
        IRegionOfInterest AsRegionOfInterest
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as ISupply.
        /// </summary>
        ISupply AsSupply
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IObservation.
        /// </summary>
        IObservation AsObservation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IObservationMedia.
        /// </summary>
        IObservationMedia AsObservationMedia
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IAct.
        /// </summary>
        IAct AsAct
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IEncounter.
        /// </summary>
        IEncounter AsEncounter
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as ISubstanceAdministration.
        /// </summary>
        ISubstanceAdministration AsSubstanceAdministration
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IOrganizer.
        /// </summary>
        IOrganizer AsOrganizer
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IProcedure.
        /// </summary>
        IProcedure AsProcedure
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.x_ActRelationshipEntryRelationship TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inversionInd property.
        /// </summary>
        bool InversionInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inversionIndSpecified property.
        /// </summary>
        bool InversionIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        bool ContextConductionInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        bool NegationInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        bool NegationIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The EntryRelationship class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IEntryRelationship))]
    [Guid("cd4d0e1f-3241-4258-a4ec-87f352285c75")]
    public partial class EntryRelationship : CDAElement, INotifyPropertyChanged, IEntryRelationship, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// EntryRelationship finalizer.
        /// </summary>
        ~EntryRelationship()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// EntryRelationship constructor.
        /// </summary>
        public EntryRelationship()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// EntryRelationship constructor.
        /// </summary>
        internal EntryRelationship(HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040EntryRelationship
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The sequenceNumber property.
        /// </summary>
        public HL7SDK.Cda.IINT SequenceNumber
        {
            get
            {
                if (Element.sequenceNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.sequenceNumber = new HL7SDK.Xml.Cda.INT();
                    }
                }
                return ElementFactory.Wrap(Element.sequenceNumber, this) as HL7SDK.Cda.IINT;
            }
            set
            {
                if (value == null)
                {
                    Element.sequenceNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.INT)value;
                    t.Attach(this);
                    Element.sequenceNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The seperatableInd property.
        /// </summary>
        public HL7SDK.Cda.IBL SeperatableInd
        {
            get
            {
                if (Element.seperatableInd == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.seperatableInd = new HL7SDK.Xml.Cda.BL();
                    }
                }
                return ElementFactory.Wrap(Element.seperatableInd, this) as HL7SDK.Cda.IBL;
            }
            set
            {
                if (value == null)
                {
                    Element.seperatableInd = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.BL)value;
                    t.Attach(this);
                    Element.seperatableInd = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IRegionOfInterest.
        /// </summary>
        public virtual IRegionOfInterest AsRegionOfInterest
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest();
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRegionOfInterest;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040RegionOfInterest expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as ISupply.
        /// </summary>
        public virtual ISupply AsSupply
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Supply();
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISupply;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Supply)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Supply expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IObservation.
        /// </summary>
        public virtual IObservation AsObservation
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Observation();
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservation;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Observation)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Observation expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IObservationMedia.
        /// </summary>
        public virtual IObservationMedia AsObservationMedia
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia();
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IObservationMedia;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040ObservationMedia expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IAct.
        /// </summary>
        public virtual IAct AsAct
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Act();
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAct;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Act)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Act expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IEncounter.
        /// </summary>
        public virtual IEncounter AsEncounter
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Encounter();
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IEncounter;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Encounter)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Encounter expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as ISubstanceAdministration.
        /// </summary>
        public virtual ISubstanceAdministration AsSubstanceAdministration
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration();
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ISubstanceAdministration;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040SubstanceAdministration expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IOrganizer.
        /// </summary>
        public virtual IOrganizer AsOrganizer
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Organizer();
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganizer;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Organizer)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Organizer expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the EntryRelationship.Item value as IProcedure.
        /// </summary>
        public virtual IProcedure AsProcedure
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Procedure();
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IProcedure;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Procedure)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Procedure expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Supply)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Supply, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Observation)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Observation, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Act)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Act, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Encounter)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Encounter, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organizer)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Organizer, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Procedure)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Procedure, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.RegionOfInterest)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.RegionOfInterest).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Supply)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Supply).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Observation)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Observation).Element;
                    return;
                }
                if (value is HL7SDK.Cda.ObservationMedia)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.ObservationMedia).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Act)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Act).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Encounter)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Encounter).Element;
                    return;
                }
                if (value is HL7SDK.Cda.SubstanceAdministration)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.SubstanceAdministration).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Organizer)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Organizer).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Procedure)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Procedure).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.x_ActRelationshipEntryRelationship TypeCode
        {
            get
            {
                return (HL7SDK.Cda.x_ActRelationshipEntryRelationship)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.x_ActRelationshipEntryRelationship)value;
            }
        }
        
        /// <summary>
        /// The inversionInd property.
        /// </summary>
        public bool InversionInd
        {
            get
            {
                return Element.inversionInd;
            }
            set
            {
                Element.inversionInd = value;
            }
        }
        
        /// <summary>
        /// The inversionIndSpecified property.
        /// </summary>
        public bool InversionIndSpecified
        {
            get
            {
                return Element.inversionIndSpecified;
            }
            set
            {
                Element.inversionIndSpecified = value;
            }
        }
        
        /// <summary>
        /// The contextConductionInd property.
        /// </summary>
        public bool ContextConductionInd
        {
            get
            {
                return Element.contextConductionInd;
            }
            set
            {
                Element.contextConductionInd = value;
            }
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        public bool NegationInd
        {
            get
            {
                return Element.negationInd;
            }
            set
            {
                Element.negationInd = value;
            }
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        public bool NegationIndSpecified
        {
            get
            {
                return Element.negationIndSpecified;
            }
            set
            {
                Element.negationIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IEntryRelationshipCollection interface.
    /// </summary>


    [Guid("f53be0f9-5808-4e26-a4d2-c74176456587")]
    public partial interface IEntryRelationshipCollection : ICDACollection, IEnumerable<IEntryRelationship>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IEntryRelationship this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IEntryRelationship value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IEntryRelationship value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IEntryRelationship item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IEntryRelationship item1, IEntryRelationship item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IEntryRelationship Append();
    }
    

    [Guid("34a7eb3c-9012-4e38-91a6-de580b8466d4")]
    internal partial class EntryRelationshipCollection : CDAFactoryCollection<HL7SDK.Cda.EntryRelationship, HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship, HL7SDK.Cda.IEntryRelationship>, HL7SDK.Cda.IEntryRelationshipCollection
    {
        
        internal EntryRelationshipCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040EntryRelationship[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IExternalActCollection interface.
    /// </summary>

    [Guid("d9134595-a5c9-40a8-9cb0-37ecc89df5a4")]

    public partial interface IExternalAct : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ExternalAct object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ExternalAct class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IExternalAct))]
    [Guid("1ee7d5c6-f3aa-4e02-bd53-224e1a8d7a6b")]
    public partial class ExternalAct : CDAElement, INotifyPropertyChanged, IExternalAct, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ExternalAct finalizer.
        /// </summary>
        ~ExternalAct()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ExternalAct constructor.
        /// </summary>
        public ExternalAct()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalAct();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ExternalAct constructor.
        /// </summary>
        internal ExternalAct(HL7SDK.Xml.Cda.POCD_MT000040ExternalAct element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ExternalAct
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ExternalAct Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ExternalAct;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalAct();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IExternalActCollection interface.
    /// </summary>


    [Guid("0b887efc-1512-436f-a8f0-12ef743f5a66")]
    public partial interface IExternalActCollection : ICDACollection, IEnumerable<IExternalAct>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IExternalAct this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IExternalAct value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IExternalAct value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IExternalAct item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IExternalAct item1, IExternalAct item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IExternalAct Append();
    }
    

    [Guid("7d5c0d0c-6642-4caa-9cc6-2ead13dff071")]
    internal partial class ExternalActCollection : CDAFactoryCollection<HL7SDK.Cda.ExternalAct, HL7SDK.Xml.Cda.POCD_MT000040ExternalAct, HL7SDK.Cda.IExternalAct>, HL7SDK.Cda.IExternalActCollection
    {
        
        internal ExternalActCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ExternalAct[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ExternalAct[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IExternalDocumentCollection interface.
    /// </summary>

    [Guid("70f1d46b-7e1d-4e00-affe-ee489913856b")]

    public partial interface IExternalDocument : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ExternalDocument object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The setId property.
        /// </summary>
        III SetId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The versionNumber property.
        /// </summary>
        IINT VersionNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ExternalDocument class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IExternalDocument))]
    [Guid("adacae5c-65d7-47e6-aa15-5383575b9ea4")]
    public partial class ExternalDocument : CDAElement, INotifyPropertyChanged, IExternalDocument, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ExternalDocument finalizer.
        /// </summary>
        ~ExternalDocument()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ExternalDocument constructor.
        /// </summary>
        public ExternalDocument()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ExternalDocument constructor.
        /// </summary>
        internal ExternalDocument(HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ExternalDocument
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The setId property.
        /// </summary>
        public HL7SDK.Cda.III SetId
        {
            get
            {
                if (Element.setId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.setId = new HL7SDK.Xml.Cda.II();
                    }
                }
                return ElementFactory.Wrap(Element.setId, this) as HL7SDK.Cda.III;
            }
            set
            {
                if (value == null)
                {
                    Element.setId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.II)value;
                    t.Attach(this);
                    Element.setId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The versionNumber property.
        /// </summary>
        public HL7SDK.Cda.IINT VersionNumber
        {
            get
            {
                if (Element.versionNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.versionNumber = new HL7SDK.Xml.Cda.INT();
                    }
                }
                return ElementFactory.Wrap(Element.versionNumber, this) as HL7SDK.Cda.IINT;
            }
            set
            {
                if (value == null)
                {
                    Element.versionNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.INT)value;
                    t.Attach(this);
                    Element.versionNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IExternalDocumentCollection interface.
    /// </summary>


    [Guid("13b023ee-8881-4ec8-9c0e-9d56d0eb73fa")]
    public partial interface IExternalDocumentCollection : ICDACollection, IEnumerable<IExternalDocument>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IExternalDocument this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IExternalDocument value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IExternalDocument value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IExternalDocument item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IExternalDocument item1, IExternalDocument item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IExternalDocument Append();
    }
    

    [Guid("fdd2fd7b-b247-45b7-938b-d44eec6e619e")]
    internal partial class ExternalDocumentCollection : CDAFactoryCollection<HL7SDK.Cda.ExternalDocument, HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument, HL7SDK.Cda.IExternalDocument>, HL7SDK.Cda.IExternalDocumentCollection
    {
        
        internal ExternalDocumentCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IExternalObservationCollection interface.
    /// </summary>

    [Guid("e74dbc62-2d75-4965-b97a-7973335ba798")]

    public partial interface IExternalObservation : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ExternalObservation object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ExternalObservation class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IExternalObservation))]
    [Guid("746fdcd1-8906-4558-bac8-92066591595e")]
    public partial class ExternalObservation : CDAElement, INotifyPropertyChanged, IExternalObservation, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ExternalObservation finalizer.
        /// </summary>
        ~ExternalObservation()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ExternalObservation constructor.
        /// </summary>
        public ExternalObservation()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ExternalObservation constructor.
        /// </summary>
        internal ExternalObservation(HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ExternalObservation
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IExternalObservationCollection interface.
    /// </summary>


    [Guid("146ce815-e41d-49a2-861a-0f2968e88b8e")]
    public partial interface IExternalObservationCollection : ICDACollection, IEnumerable<IExternalObservation>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IExternalObservation this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IExternalObservation value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IExternalObservation value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IExternalObservation item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IExternalObservation item1, IExternalObservation item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IExternalObservation Append();
    }
    

    [Guid("dacd4330-e298-4ed0-9065-96a56f6a3892")]
    internal partial class ExternalObservationCollection : CDAFactoryCollection<HL7SDK.Cda.ExternalObservation, HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation, HL7SDK.Cda.IExternalObservation>, HL7SDK.Cda.IExternalObservationCollection
    {
        
        internal ExternalObservationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IExternalProcedureCollection interface.
    /// </summary>

    [Guid("079b8cbc-a1ae-4676-9199-7f56242e28e9")]

    public partial interface IExternalProcedure : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ExternalProcedure object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ExternalProcedure class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IExternalProcedure))]
    [Guid("bd48c1d8-9523-4ef4-ac2c-e9a88bf6d81a")]
    public partial class ExternalProcedure : CDAElement, INotifyPropertyChanged, IExternalProcedure, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ExternalProcedure finalizer.
        /// </summary>
        ~ExternalProcedure()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ExternalProcedure constructor.
        /// </summary>
        public ExternalProcedure()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ExternalProcedure constructor.
        /// </summary>
        internal ExternalProcedure(HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ExternalProcedure
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IExternalProcedureCollection interface.
    /// </summary>


    [Guid("8ea4e683-d214-4a11-8ccf-877fabbb74dc")]
    public partial interface IExternalProcedureCollection : ICDACollection, IEnumerable<IExternalProcedure>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IExternalProcedure this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IExternalProcedure value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IExternalProcedure value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IExternalProcedure item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IExternalProcedure item1, IExternalProcedure item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IExternalProcedure Append();
    }
    

    [Guid("3b8c2955-b5cf-4ccd-b449-60957222abe6")]
    internal partial class ExternalProcedureCollection : CDAFactoryCollection<HL7SDK.Cda.ExternalProcedure, HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure, HL7SDK.Cda.IExternalProcedure>, HL7SDK.Cda.IExternalProcedureCollection
    {
        
        internal ExternalProcedureCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IGuardianCollection interface.
    /// </summary>

    [Guid("084f14c2-f53d-42bb-8bed-6ffdaaadcd94")]

    public partial interface IGuardian : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Guardian object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// Represents the Guardian.Item value as IPerson.
        /// </summary>
        IPerson AsPerson
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Guardian.Item value as IOrganization.
        /// </summary>
        IOrganization AsOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Guardian class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IGuardian))]
    [Guid("e163b80e-f27e-4d69-8c92-81e3a5f2cac6")]
    public partial class Guardian : CDAElement, INotifyPropertyChanged, IGuardian, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Guardian finalizer.
        /// </summary>
        ~Guardian()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Guardian constructor.
        /// </summary>
        public Guardian()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Guardian();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Guardian constructor.
        /// </summary>
        internal Guardian(HL7SDK.Xml.Cda.POCD_MT000040Guardian element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Guardian
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Guardian Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Guardian;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// Represents the Guardian.Item value as IPerson.
        /// </summary>
        public virtual IPerson AsPerson
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                        return ElementFactory.Wrap(Element.Item, this) as IPerson;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Person)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IPerson;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Person)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IPerson;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Person)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Person expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Guardian.Item value as IOrganization.
        /// </summary>
        public virtual IOrganization AsOrganization
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                        return ElementFactory.Wrap(Element.Item, this) as IOrganization;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organization)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganization;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organization)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IOrganization;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Organization)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Organization expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Person)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Person, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Organization)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Organization, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.Person)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Person).Element;
                    return;
                }
                if (value is HL7SDK.Cda.Organization)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Organization).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Guardian();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IGuardianCollection interface.
    /// </summary>


    [Guid("989db215-14f6-4103-96a3-2def0337a87f")]
    public partial interface IGuardianCollection : ICDACollection, IEnumerable<IGuardian>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IGuardian this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IGuardian value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IGuardian value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IGuardian item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IGuardian item1, IGuardian item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IGuardian Append();
    }
    

    [Guid("73e55327-e32c-4391-b0ca-b1e5ddd665ed")]
    internal partial class GuardianCollection : CDAFactoryCollection<HL7SDK.Cda.Guardian, HL7SDK.Xml.Cda.POCD_MT000040Guardian, HL7SDK.Cda.IGuardian>, HL7SDK.Cda.IGuardianCollection
    {
        
        internal GuardianCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Guardian[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Guardian[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IHealthCareFacilityCollection interface.
    /// </summary>

    [Guid("49629d72-8d27-4db3-a17f-4a0f95ac49ba")]

    public partial interface IHealthCareFacility : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040HealthCareFacility object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The location property.
        /// </summary>
        IPlace Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// The serviceProviderOrganization property.
        /// </summary>
        IOrganization ServiceProviderOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.RoleClassServiceDeliveryLocation ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The HealthCareFacility class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IHealthCareFacility))]
    [Guid("0ab4a719-f40f-4031-ac1f-a2bf47698a7d")]
    public partial class HealthCareFacility : CDAElement, INotifyPropertyChanged, IHealthCareFacility, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// HealthCareFacility finalizer.
        /// </summary>
        ~HealthCareFacility()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// HealthCareFacility constructor.
        /// </summary>
        public HealthCareFacility()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// HealthCareFacility constructor.
        /// </summary>
        internal HealthCareFacility(HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040HealthCareFacility
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The location property.
        /// </summary>
        public HL7SDK.Cda.IPlace Location
        {
            get
            {
                if (Element.location == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.location = new HL7SDK.Xml.Cda.POCD_MT000040Place();
                    }
                }
                return ElementFactory.Wrap(Element.location, this) as HL7SDK.Cda.IPlace;
            }
            set
            {
                if (value == null)
                {
                    Element.location = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Place)value;
                    t.Attach(this);
                    Element.location = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The serviceProviderOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization ServiceProviderOrganization
        {
            get
            {
                if (Element.serviceProviderOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.serviceProviderOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.serviceProviderOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.serviceProviderOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.serviceProviderOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.RoleClassServiceDeliveryLocation ClassCode
        {
            get
            {
                return (HL7SDK.Cda.RoleClassServiceDeliveryLocation)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.RoleClassServiceDeliveryLocation)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IHealthCareFacilityCollection interface.
    /// </summary>


    [Guid("39c83c91-c940-4203-9542-52da8335ff45")]
    public partial interface IHealthCareFacilityCollection : ICDACollection, IEnumerable<IHealthCareFacility>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IHealthCareFacility this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IHealthCareFacility value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IHealthCareFacility value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IHealthCareFacility item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IHealthCareFacility item1, IHealthCareFacility item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IHealthCareFacility Append();
    }
    

    [Guid("2994a50d-d817-419f-8a05-f4aaa56246ea")]
    internal partial class HealthCareFacilityCollection : CDAFactoryCollection<HL7SDK.Cda.HealthCareFacility, HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility, HL7SDK.Cda.IHealthCareFacility>, HL7SDK.Cda.IHealthCareFacilityCollection
    {
        
        internal HealthCareFacilityCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IInformant12Collection interface.
    /// </summary>

    [Guid("4e4a8cf3-8558-4f1d-a8ca-df57407169e1")]

    public partial interface IInformant12 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Informant12 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// Represents the Informant12.Item value as IRelatedEntity.
        /// </summary>
        IRelatedEntity AsRelatedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Informant12.Item value as IAssignedEntity.
        /// </summary>
        IAssignedEntity AsAssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Informant12 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IInformant12))]
    [Guid("6ef5aa79-8bbc-45f8-9d11-081075ba9dda")]
    public partial class Informant12 : CDAElement, INotifyPropertyChanged, IInformant12, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Informant12 finalizer.
        /// </summary>
        ~Informant12()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Informant12 constructor.
        /// </summary>
        public Informant12()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Informant12();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Informant12 constructor.
        /// </summary>
        internal Informant12(HL7SDK.Xml.Cda.POCD_MT000040Informant12 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Informant12
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Informant12 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Informant12;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// Represents the Informant12.Item value as IRelatedEntity.
        /// </summary>
        public virtual IRelatedEntity AsRelatedEntity
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity();
                        return ElementFactory.Wrap(Element.Item, this) as IRelatedEntity;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRelatedEntity;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IRelatedEntity;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040RelatedEntity expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Informant12.Item value as IAssignedEntity.
        /// </summary>
        public virtual IAssignedEntity AsAssignedEntity
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                        return ElementFactory.Wrap(Element.Item, this) as IAssignedEntity;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAssignedEntity;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IAssignedEntity;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040AssignedEntity expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.RelatedEntity)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.RelatedEntity).Element;
                    return;
                }
                if (value is HL7SDK.Cda.AssignedEntity)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.AssignedEntity).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Informant12();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IInformant12Collection interface.
    /// </summary>


    [Guid("3008b2f5-5da2-4376-88b5-667dfdea2ab1")]
    public partial interface IInformant12Collection : ICDACollection, IEnumerable<IInformant12>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IInformant12 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IInformant12 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IInformant12 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IInformant12 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IInformant12 item1, IInformant12 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IInformant12 Append();
    }
    

    [Guid("129665da-87bb-4360-99bb-9add14fe888e")]
    internal partial class Informant12Collection : CDAFactoryCollection<HL7SDK.Cda.Informant12, HL7SDK.Xml.Cda.POCD_MT000040Informant12, HL7SDK.Cda.IInformant12>, HL7SDK.Cda.IInformant12Collection
    {
        
        internal Informant12Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Informant12[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Informant12[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IInformationRecipientCollection interface.
    /// </summary>

    [Guid("7a4a1dbe-ad74-4d1c-a0c3-41b1e95322aa")]

    public partial interface IInformationRecipient : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040InformationRecipient object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The intendedRecipient property.
        /// </summary>
        IIntendedRecipient IntendedRecipient
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.x_InformationRecipient TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The InformationRecipient class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IInformationRecipient))]
    [Guid("953536bd-acb9-48c3-8adb-c0c70722a8da")]
    public partial class InformationRecipient : CDAElement, INotifyPropertyChanged, IInformationRecipient, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// InformationRecipient finalizer.
        /// </summary>
        ~InformationRecipient()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// InformationRecipient constructor.
        /// </summary>
        public InformationRecipient()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// InformationRecipient constructor.
        /// </summary>
        internal InformationRecipient(HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040InformationRecipient
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The intendedRecipient property.
        /// </summary>
        public HL7SDK.Cda.IIntendedRecipient IntendedRecipient
        {
            get
            {
                if (Element.intendedRecipient == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.intendedRecipient = new HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient();
                    }
                }
                return ElementFactory.Wrap(Element.intendedRecipient, this) as HL7SDK.Cda.IIntendedRecipient;
            }
            set
            {
                if (value == null)
                {
                    Element.intendedRecipient = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IntendedRecipient)value;
                    t.Attach(this);
                    Element.intendedRecipient = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.x_InformationRecipient TypeCode
        {
            get
            {
                return (HL7SDK.Cda.x_InformationRecipient)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.x_InformationRecipient)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IInformationRecipientCollection interface.
    /// </summary>


    [Guid("5a634a90-88ce-49f9-ab08-6450a4b525eb")]
    public partial interface IInformationRecipientCollection : ICDACollection, IEnumerable<IInformationRecipient>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IInformationRecipient this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IInformationRecipient value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IInformationRecipient value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IInformationRecipient item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IInformationRecipient item1, IInformationRecipient item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IInformationRecipient Append();
    }
    

    [Guid("4a4657a4-125b-4b9e-8f57-ad43da8df2fd")]
    internal partial class InformationRecipientCollection : CDAFactoryCollection<HL7SDK.Cda.InformationRecipient, HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient, HL7SDK.Cda.IInformationRecipient>, HL7SDK.Cda.IInformationRecipientCollection
    {
        
        internal InformationRecipientCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040InformationRecipient[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IInfrastructureRoottypeIdCollection interface.
    /// </summary>

    [Guid("02b60edf-afb5-4f9f-9f30-1a09af03ae55")]

    public partial interface IInfrastructureRoottypeId : IHL73Object, ICDAObject, III
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040InfrastructureRoottypeId object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The root property.
        /// </summary>
        new string Root
        {
            get;
            set;
        }
        
        /// <summary>
        /// The extension property.
        /// </summary>
        new string Extension
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assigningAuthorityName property.
        /// </summary>
        new string AssigningAuthorityName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayable property.
        /// </summary>
        new bool Displayable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayableSpecified property.
        /// </summary>
        new bool DisplayableSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The InfrastructureRoottypeId class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IInfrastructureRoottypeId))]
    [Guid("6e2a9787-a11f-4072-82e4-669287368fa0")]
    public partial class InfrastructureRoottypeId : HL7SDK.Cda.II, INotifyPropertyChanged, IInfrastructureRoottypeId, III, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// InfrastructureRoottypeId finalizer.
        /// </summary>
        ~InfrastructureRoottypeId()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// InfrastructureRoottypeId constructor.
        /// </summary>
        public InfrastructureRoottypeId()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// InfrastructureRoottypeId constructor.
        /// </summary>
        internal InfrastructureRoottypeId(HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040InfrastructureRoottypeId
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IInFulfillmentOfCollection interface.
    /// </summary>

    [Guid("dc1e02fc-554f-40bc-a539-47bb906db7ba")]

    public partial interface IInFulfillmentOf : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040InFulfillmentOf object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The order property.
        /// </summary>
        IOrder Order
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ActRelationshipFulfills TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The InFulfillmentOf class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IInFulfillmentOf))]
    [Guid("2245d1b6-5ca0-4d0b-8b7c-a14c0a7537f2")]
    public partial class InFulfillmentOf : CDAElement, INotifyPropertyChanged, IInFulfillmentOf, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// InFulfillmentOf finalizer.
        /// </summary>
        ~InFulfillmentOf()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// InFulfillmentOf constructor.
        /// </summary>
        public InFulfillmentOf()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// InFulfillmentOf constructor.
        /// </summary>
        internal InFulfillmentOf(HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040InFulfillmentOf
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The order property.
        /// </summary>
        public HL7SDK.Cda.IOrder Order
        {
            get
            {
                if (Element.order == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.order = new HL7SDK.Xml.Cda.POCD_MT000040Order();
                    }
                }
                return ElementFactory.Wrap(Element.order, this) as HL7SDK.Cda.IOrder;
            }
            set
            {
                if (value == null)
                {
                    Element.order = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Order)value;
                    t.Attach(this);
                    Element.order = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ActRelationshipFulfills TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ActRelationshipFulfills)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ActRelationshipFulfills)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IInFulfillmentOfCollection interface.
    /// </summary>


    [Guid("b79ea58e-a5d2-4fd8-9472-a8d43b98f100")]
    public partial interface IInFulfillmentOfCollection : ICDACollection, IEnumerable<IInFulfillmentOf>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IInFulfillmentOf this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IInFulfillmentOf value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IInFulfillmentOf value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IInFulfillmentOf item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IInFulfillmentOf item1, IInFulfillmentOf item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IInFulfillmentOf Append();
    }
    

    [Guid("1acdc7b0-1729-44cd-ae28-0fd140f430b6")]
    internal partial class InFulfillmentOfCollection : CDAFactoryCollection<HL7SDK.Cda.InFulfillmentOf, HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf, HL7SDK.Cda.IInFulfillmentOf>, HL7SDK.Cda.IInFulfillmentOfCollection
    {
        
        internal InFulfillmentOfCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040InFulfillmentOf[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IIntendedRecipientCollection interface.
    /// </summary>

    [Guid("3842200f-424d-44fe-b4be-7467a469c739")]

    public partial interface IIntendedRecipient : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040IntendedRecipient object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// The informationRecipient property.
        /// </summary>
        IPerson InformationRecipient
        {
            get;
            set;
        }
        
        /// <summary>
        /// The receivedOrganization property.
        /// </summary>
        IOrganization ReceivedOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.x_InformationRecipientRole ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The IntendedRecipient class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IIntendedRecipient))]
    [Guid("ef0441ed-0b63-4d8e-a33c-a7c266a38703")]
    public partial class IntendedRecipient : CDAElement, INotifyPropertyChanged, IIntendedRecipient, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// IntendedRecipient finalizer.
        /// </summary>
        ~IntendedRecipient()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// IntendedRecipient constructor.
        /// </summary>
        public IntendedRecipient()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// IntendedRecipient constructor.
        /// </summary>
        internal IntendedRecipient(HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040IntendedRecipient
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// The informationRecipient property.
        /// </summary>
        public HL7SDK.Cda.IPerson InformationRecipient
        {
            get
            {
                if (Element.informationRecipient == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.informationRecipient = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                    }
                }
                return ElementFactory.Wrap(Element.informationRecipient, this) as HL7SDK.Cda.IPerson;
            }
            set
            {
                if (value == null)
                {
                    Element.informationRecipient = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Person)value;
                    t.Attach(this);
                    Element.informationRecipient = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The receivedOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization ReceivedOrganization
        {
            get
            {
                if (Element.receivedOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.receivedOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.receivedOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.receivedOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.receivedOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.x_InformationRecipientRole ClassCode
        {
            get
            {
                return (HL7SDK.Cda.x_InformationRecipientRole)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.x_InformationRecipientRole)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IIntendedRecipientCollection interface.
    /// </summary>


    [Guid("8a5bf498-766a-4756-9a0b-001c726d5840")]
    public partial interface IIntendedRecipientCollection : ICDACollection, IEnumerable<IIntendedRecipient>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IIntendedRecipient this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IIntendedRecipient value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IIntendedRecipient value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IIntendedRecipient item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IIntendedRecipient item1, IIntendedRecipient item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IIntendedRecipient Append();
    }
    

    [Guid("4163f3c1-40e2-47eb-85f7-cadbf0979bca")]
    internal partial class IntendedRecipientCollection : CDAFactoryCollection<HL7SDK.Cda.IntendedRecipient, HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient, HL7SDK.Cda.IIntendedRecipient>, HL7SDK.Cda.IIntendedRecipientCollection
    {
        
        internal IntendedRecipientCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040IntendedRecipient[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ILabeledDrugCollection interface.
    /// </summary>

    [Guid("bd2cc626-d56c-4e21-9cc6-f07b1369942f")]

    public partial interface ILabeledDrug : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040LabeledDrug object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IEN Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        HL7SDK.Cda.EntityDeterminerDetermined DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCodeSpecified property.
        /// </summary>
        bool DeterminerCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The LabeledDrug class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ILabeledDrug))]
    [Guid("94028944-bbce-4e85-b969-83491d33b407")]
    public partial class LabeledDrug : CDAElement, INotifyPropertyChanged, ILabeledDrug, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// LabeledDrug finalizer.
        /// </summary>
        ~LabeledDrug()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// LabeledDrug constructor.
        /// </summary>
        public LabeledDrug()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// LabeledDrug constructor.
        /// </summary>
        internal LabeledDrug(HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040LabeledDrug
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IEN Name
        {
            get
            {
                if (Element.name == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.name = new HL7SDK.Xml.Cda.EN();
                    }
                }
                return ElementFactory.Wrap(Element.name, this) as HL7SDK.Cda.IEN;
            }
            set
            {
                if (value == null)
                {
                    Element.name = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.EN)value;
                    t.Attach(this);
                    Element.name = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public HL7SDK.Cda.EntityDeterminerDetermined DeterminerCode
        {
            get
            {
                return (HL7SDK.Cda.EntityDeterminerDetermined)Element.determinerCode;
            }
            set
            {
                Element.determinerCode = (HL7SDK.Xml.Cda.EntityDeterminerDetermined)value;
                Element.determinerCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The determinerCodeSpecified property.
        /// </summary>
        public bool DeterminerCodeSpecified
        {
            get
            {
                return Element.determinerCodeSpecified;
            }
            set
            {
                Element.determinerCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ILabeledDrugCollection interface.
    /// </summary>


    [Guid("dfc7fd3c-01b5-4212-8955-76a594a9948d")]
    public partial interface ILabeledDrugCollection : ICDACollection, IEnumerable<ILabeledDrug>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ILabeledDrug this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ILabeledDrug value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ILabeledDrug value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ILabeledDrug item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ILabeledDrug item1, ILabeledDrug item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ILabeledDrug Append();
    }
    

    [Guid("9c3b1c2d-4c11-48ad-8a3f-5afc367ca769")]
    internal partial class LabeledDrugCollection : CDAFactoryCollection<HL7SDK.Cda.LabeledDrug, HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug, HL7SDK.Cda.ILabeledDrug>, HL7SDK.Cda.ILabeledDrugCollection
    {
        
        internal LabeledDrugCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ILanguageCommunicationCollection interface.
    /// </summary>

    [Guid("b778feb7-e1cd-42ae-9764-2561f2c26871")]

    public partial interface ILanguageCommunication : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040LanguageCommunication object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The modeCode property.
        /// </summary>
        ICE ModeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The proficiencyLevelCode property.
        /// </summary>
        ICE ProficiencyLevelCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The preferenceInd property.
        /// </summary>
        IBL PreferenceInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The LanguageCommunication class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ILanguageCommunication))]
    [Guid("600ec21a-dfb9-445d-a0d8-b5bc3deeab82")]
    public partial class LanguageCommunication : CDAElement, INotifyPropertyChanged, ILanguageCommunication, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// LanguageCommunication finalizer.
        /// </summary>
        ~LanguageCommunication()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// LanguageCommunication constructor.
        /// </summary>
        public LanguageCommunication()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// LanguageCommunication constructor.
        /// </summary>
        internal LanguageCommunication(HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040LanguageCommunication
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The modeCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ModeCode
        {
            get
            {
                if (Element.modeCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.modeCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.modeCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.modeCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.modeCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The proficiencyLevelCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ProficiencyLevelCode
        {
            get
            {
                if (Element.proficiencyLevelCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.proficiencyLevelCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.proficiencyLevelCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.proficiencyLevelCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.proficiencyLevelCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The preferenceInd property.
        /// </summary>
        public HL7SDK.Cda.IBL PreferenceInd
        {
            get
            {
                if (Element.preferenceInd == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.preferenceInd = new HL7SDK.Xml.Cda.BL();
                    }
                }
                return ElementFactory.Wrap(Element.preferenceInd, this) as HL7SDK.Cda.IBL;
            }
            set
            {
                if (value == null)
                {
                    Element.preferenceInd = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.BL)value;
                    t.Attach(this);
                    Element.preferenceInd = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ILanguageCommunicationCollection interface.
    /// </summary>


    [Guid("4524d5af-cf7e-4be5-98df-e708387cd1f2")]
    public partial interface ILanguageCommunicationCollection : ICDACollection, IEnumerable<ILanguageCommunication>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ILanguageCommunication this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ILanguageCommunication value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ILanguageCommunication value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ILanguageCommunication item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ILanguageCommunication item1, ILanguageCommunication item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ILanguageCommunication Append();
    }
    

    [Guid("6ae0572b-4d16-4ccb-a71e-2cef706d02b1")]
    internal partial class LanguageCommunicationCollection : CDAFactoryCollection<HL7SDK.Cda.LanguageCommunication, HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication, HL7SDK.Cda.ILanguageCommunication>, HL7SDK.Cda.ILanguageCommunicationCollection
    {
        
        internal LanguageCommunicationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040LanguageCommunication[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ILegalAuthenticatorCollection interface.
    /// </summary>

    [Guid("8b4f62b0-0aea-4886-8c21-0e6d0d1c3ffa")]

    public partial interface ILegalAuthenticator : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040LegalAuthenticator object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        ITS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The signatureCode property.
        /// </summary>
        ICS SignatureCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        IAssignedEntity AssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The LegalAuthenticator class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ILegalAuthenticator))]
    [Guid("b45fea6d-a464-48cd-9a36-5ba20ae14b6e")]
    public partial class LegalAuthenticator : CDAElement, INotifyPropertyChanged, ILegalAuthenticator, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// LegalAuthenticator finalizer.
        /// </summary>
        ~LegalAuthenticator()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// LegalAuthenticator constructor.
        /// </summary>
        public LegalAuthenticator()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// LegalAuthenticator constructor.
        /// </summary>
        internal LegalAuthenticator(HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040LegalAuthenticator
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.ITS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The signatureCode property.
        /// </summary>
        public HL7SDK.Cda.ICS SignatureCode
        {
            get
            {
                if (Element.signatureCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.signatureCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.signatureCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.signatureCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.signatureCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssignedEntity AssignedEntity
        {
            get
            {
                if (Element.assignedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.assignedEntity, this) as HL7SDK.Cda.IAssignedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedEntity)value;
                    t.Attach(this);
                    Element.assignedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ILegalAuthenticatorCollection interface.
    /// </summary>


    [Guid("5c6261c8-515b-4ddf-8f00-86b84214d228")]
    public partial interface ILegalAuthenticatorCollection : ICDACollection, IEnumerable<ILegalAuthenticator>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ILegalAuthenticator this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ILegalAuthenticator value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ILegalAuthenticator value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ILegalAuthenticator item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ILegalAuthenticator item1, ILegalAuthenticator item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ILegalAuthenticator Append();
    }
    

    [Guid("26cbcb29-f714-4880-963e-9809f7f19758")]
    internal partial class LegalAuthenticatorCollection : CDAFactoryCollection<HL7SDK.Cda.LegalAuthenticator, HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator, HL7SDK.Cda.ILegalAuthenticator>, HL7SDK.Cda.ILegalAuthenticatorCollection
    {
        
        internal LegalAuthenticatorCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040LegalAuthenticator[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ILocationCollection interface.
    /// </summary>

    [Guid("85a67e76-a7f8-4de3-9032-351d1d865aac")]

    public partial interface ILocation : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Location object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The healthCareFacility property.
        /// </summary>
        IHealthCareFacility HealthCareFacility
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ParticipationTargetLocation TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Location class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ILocation))]
    [Guid("7eb39e9b-31d1-4403-945d-aee3ec75cbed")]
    public partial class Location : CDAElement, INotifyPropertyChanged, ILocation, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Location finalizer.
        /// </summary>
        ~Location()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Location constructor.
        /// </summary>
        public Location()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Location();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Location constructor.
        /// </summary>
        internal Location(HL7SDK.Xml.Cda.POCD_MT000040Location element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Location
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Location Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Location;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The healthCareFacility property.
        /// </summary>
        public HL7SDK.Cda.IHealthCareFacility HealthCareFacility
        {
            get
            {
                if (Element.healthCareFacility == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.healthCareFacility = new HL7SDK.Xml.Cda.POCD_MT000040HealthCareFacility();
                    }
                }
                return ElementFactory.Wrap(Element.healthCareFacility, this) as HL7SDK.Cda.IHealthCareFacility;
            }
            set
            {
                if (value == null)
                {
                    Element.healthCareFacility = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.HealthCareFacility)value;
                    t.Attach(this);
                    Element.healthCareFacility = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ParticipationTargetLocation TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ParticipationTargetLocation)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ParticipationTargetLocation)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Location();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ILocationCollection interface.
    /// </summary>


    [Guid("2d215bca-554f-47dd-a17a-4e5432eb87a2")]
    public partial interface ILocationCollection : ICDACollection, IEnumerable<ILocation>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ILocation this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ILocation value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ILocation value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ILocation item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ILocation item1, ILocation item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ILocation Append();
    }
    

    [Guid("5707ebe3-2af3-439e-a694-4bfa3109974b")]
    internal partial class LocationCollection : CDAFactoryCollection<HL7SDK.Cda.Location, HL7SDK.Xml.Cda.POCD_MT000040Location, HL7SDK.Cda.ILocation>, HL7SDK.Cda.ILocationCollection
    {
        
        internal LocationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Location[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Location[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IMaintainedEntityCollection interface.
    /// </summary>

    [Guid("23c03499-ab15-46a4-901b-0a2b3d97d409")]

    public partial interface IMaintainedEntity : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040MaintainedEntity object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maintainingPerson property.
        /// </summary>
        IPerson MaintainingPerson
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The MaintainedEntity class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IMaintainedEntity))]
    [Guid("5874fc11-80d8-4326-bd52-8d6a7d4ce888")]
    public partial class MaintainedEntity : CDAElement, INotifyPropertyChanged, IMaintainedEntity, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// MaintainedEntity finalizer.
        /// </summary>
        ~MaintainedEntity()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// MaintainedEntity constructor.
        /// </summary>
        public MaintainedEntity()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// MaintainedEntity constructor.
        /// </summary>
        internal MaintainedEntity(HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040MaintainedEntity
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The maintainingPerson property.
        /// </summary>
        public HL7SDK.Cda.IPerson MaintainingPerson
        {
            get
            {
                if (Element.maintainingPerson == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.maintainingPerson = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                    }
                }
                return ElementFactory.Wrap(Element.maintainingPerson, this) as HL7SDK.Cda.IPerson;
            }
            set
            {
                if (value == null)
                {
                    Element.maintainingPerson = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Person)value;
                    t.Attach(this);
                    Element.maintainingPerson = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IMaintainedEntityCollection interface.
    /// </summary>


    [Guid("0bb34925-9ff0-4e68-a6b7-e9a7b9242099")]
    public partial interface IMaintainedEntityCollection : ICDACollection, IEnumerable<IMaintainedEntity>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IMaintainedEntity this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IMaintainedEntity value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IMaintainedEntity value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IMaintainedEntity item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IMaintainedEntity item1, IMaintainedEntity item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IMaintainedEntity Append();
    }
    

    [Guid("0c5ad580-c5f3-4908-8e20-ecc536902836")]
    internal partial class MaintainedEntityCollection : CDAFactoryCollection<HL7SDK.Cda.MaintainedEntity, HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity, HL7SDK.Cda.IMaintainedEntity>, HL7SDK.Cda.IMaintainedEntityCollection
    {
        
        internal MaintainedEntityCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040MaintainedEntity[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IManufacturedProductCollection interface.
    /// </summary>

    [Guid("a09d4675-471f-42bc-8726-083964064982")]

    public partial interface IManufacturedProduct : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ManufacturedProduct object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// Represents the ManufacturedProduct.Item value as IMaterial.
        /// </summary>
        IMaterial AsMaterial
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the ManufacturedProduct.Item value as ILabeledDrug.
        /// </summary>
        ILabeledDrug AsLabeledDrug
        {
            get;
            set;
        }
        
        /// <summary>
        /// The manufacturerOrganization property.
        /// </summary>
        IOrganization ManufacturerOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.RoleClassManufacturedProduct ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        bool ClassCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ManufacturedProduct class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IManufacturedProduct))]
    [Guid("69730b32-369e-4c05-83bf-fbc7269c0854")]
    public partial class ManufacturedProduct : CDAElement, INotifyPropertyChanged, IManufacturedProduct, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ManufacturedProduct finalizer.
        /// </summary>
        ~ManufacturedProduct()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ManufacturedProduct constructor.
        /// </summary>
        public ManufacturedProduct()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ManufacturedProduct constructor.
        /// </summary>
        internal ManufacturedProduct(HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ManufacturedProduct
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// Represents the ManufacturedProduct.Item value as IMaterial.
        /// </summary>
        public virtual IMaterial AsMaterial
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Material();
                        return ElementFactory.Wrap(Element.Item, this) as IMaterial;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Material)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IMaterial;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Material)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IMaterial;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Material)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Material expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the ManufacturedProduct.Item value as ILabeledDrug.
        /// </summary>
        public virtual ILabeledDrug AsLabeledDrug
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug();
                        return ElementFactory.Wrap(Element.Item, this) as ILabeledDrug;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ILabeledDrug;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as ILabeledDrug;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040LabeledDrug expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Material)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Material, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040LabeledDrug, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.Material)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Material).Element;
                    return;
                }
                if (value is HL7SDK.Cda.LabeledDrug)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.LabeledDrug).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The manufacturerOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization ManufacturerOrganization
        {
            get
            {
                if (Element.manufacturerOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.manufacturerOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.manufacturerOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.manufacturerOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.manufacturerOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.RoleClassManufacturedProduct ClassCode
        {
            get
            {
                return (HL7SDK.Cda.RoleClassManufacturedProduct)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.RoleClassManufacturedProduct)value;
                Element.classCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        public bool ClassCodeSpecified
        {
            get
            {
                return Element.classCodeSpecified;
            }
            set
            {
                Element.classCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IManufacturedProductCollection interface.
    /// </summary>


    [Guid("d041a595-cd12-4249-bf08-74cddb08d26f")]
    public partial interface IManufacturedProductCollection : ICDACollection, IEnumerable<IManufacturedProduct>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IManufacturedProduct this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IManufacturedProduct value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IManufacturedProduct value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IManufacturedProduct item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IManufacturedProduct item1, IManufacturedProduct item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IManufacturedProduct Append();
    }
    

    [Guid("b854253f-b1d9-46be-84df-d0db9a4c2939")]
    internal partial class ManufacturedProductCollection : CDAFactoryCollection<HL7SDK.Cda.ManufacturedProduct, HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct, HL7SDK.Cda.IManufacturedProduct>, HL7SDK.Cda.IManufacturedProductCollection
    {
        
        internal ManufacturedProductCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IMaterialCollection interface.
    /// </summary>

    [Guid("5b0c2d84-18b4-46fa-939c-57c3ac67e9cf")]

    public partial interface IMaterial : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Material object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IEN Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lotNumberText property.
        /// </summary>
        IST LotNumberText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        HL7SDK.Cda.EntityDeterminerDetermined DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCodeSpecified property.
        /// </summary>
        bool DeterminerCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Material class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IMaterial))]
    [Guid("8e22a68f-c058-4e1f-90a2-da43466d76a0")]
    public partial class Material : CDAElement, INotifyPropertyChanged, IMaterial, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Material finalizer.
        /// </summary>
        ~Material()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Material constructor.
        /// </summary>
        public Material()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Material();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Material constructor.
        /// </summary>
        internal Material(HL7SDK.Xml.Cda.POCD_MT000040Material element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Material
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Material Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Material;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IEN Name
        {
            get
            {
                if (Element.name == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.name = new HL7SDK.Xml.Cda.EN();
                    }
                }
                return ElementFactory.Wrap(Element.name, this) as HL7SDK.Cda.IEN;
            }
            set
            {
                if (value == null)
                {
                    Element.name = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.EN)value;
                    t.Attach(this);
                    Element.name = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The lotNumberText property.
        /// </summary>
        public HL7SDK.Cda.IST LotNumberText
        {
            get
            {
                if (Element.lotNumberText == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.lotNumberText = new HL7SDK.Xml.Cda.ST();
                    }
                }
                return ElementFactory.Wrap(Element.lotNumberText, this) as HL7SDK.Cda.IST;
            }
            set
            {
                if (value == null)
                {
                    Element.lotNumberText = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ST)value;
                    t.Attach(this);
                    Element.lotNumberText = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public HL7SDK.Cda.EntityDeterminerDetermined DeterminerCode
        {
            get
            {
                return (HL7SDK.Cda.EntityDeterminerDetermined)Element.determinerCode;
            }
            set
            {
                Element.determinerCode = (HL7SDK.Xml.Cda.EntityDeterminerDetermined)value;
                Element.determinerCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The determinerCodeSpecified property.
        /// </summary>
        public bool DeterminerCodeSpecified
        {
            get
            {
                return Element.determinerCodeSpecified;
            }
            set
            {
                Element.determinerCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Material();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IMaterialCollection interface.
    /// </summary>


    [Guid("39a5953f-58b4-42d5-8a0e-0383353d2c98")]
    public partial interface IMaterialCollection : ICDACollection, IEnumerable<IMaterial>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IMaterial this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IMaterial value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IMaterial value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IMaterial item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IMaterial item1, IMaterial item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IMaterial Append();
    }
    

    [Guid("cbbcb74c-6984-4eb6-9f86-2b3a33043da0")]
    internal partial class MaterialCollection : CDAFactoryCollection<HL7SDK.Cda.Material, HL7SDK.Xml.Cda.POCD_MT000040Material, HL7SDK.Cda.IMaterial>, HL7SDK.Cda.IMaterialCollection
    {
        
        internal MaterialCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Material[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Material[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The INonXMLBodyCollection interface.
    /// </summary>

    [Guid("9e115a53-c46c-4663-8ae7-d41ccf28dc36")]

    public partial interface INonXMLBody : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040NonXMLBody object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        ICE ConfidentialityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The NonXMLBody class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.INonXMLBody))]
    [Guid("3e2e2e15-de16-42f5-bed0-827318be5eed")]
    public partial class NonXMLBody : CDAElement, INotifyPropertyChanged, INonXMLBody, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// NonXMLBody finalizer.
        /// </summary>
        ~NonXMLBody()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// NonXMLBody constructor.
        /// </summary>
        public NonXMLBody()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// NonXMLBody constructor.
        /// </summary>
        internal NonXMLBody(HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040NonXMLBody
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ConfidentialityCode
        {
            get
            {
                if (Element.confidentialityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.confidentialityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.confidentialityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.confidentialityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.confidentialityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040NonXMLBody();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IObservationCollection interface.
    /// </summary>

    [Guid("6a368bfe-d208-4d31-9e30-754f45aee158")]

    public partial interface IObservation : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Observation object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The derivationExpr property.
        /// </summary>
        IST DerivationExpr
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        ICE PriorityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The repeatNumber property.
        /// </summary>
        IIVL_INT RepeatNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        IANYCollection Value
        {
            get;
        }
        
        /// <summary>
        /// The interpretationCode property.
        /// </summary>
        ICECollection InterpretationCode
        {
            get;
        }
        
        /// <summary>
        /// The methodCode property.
        /// </summary>
        ICECollection MethodCode
        {
            get;
        }
        
        /// <summary>
        /// The targetSiteCode property.
        /// </summary>
        ICDCollection TargetSiteCode
        {
            get;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The referenceRange property.
        /// </summary>
        IReferenceRangeCollection ReferenceRange
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        HL7SDK.Cda.x_ActMoodDocumentObservation MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        bool NegationInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        bool NegationIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Observation class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IObservation))]
    [Guid("8310e288-ae08-405f-9a0a-4642a0f591e6")]
    public partial class Observation : CDAElement, INotifyPropertyChanged, IObservation, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Observation finalizer.
        /// </summary>
        ~Observation()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Observation constructor.
        /// </summary>
        public Observation()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Observation();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Observation constructor.
        /// </summary>
        internal Observation(HL7SDK.Xml.Cda.POCD_MT000040Observation element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Observation
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Observation Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Observation;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The derivationExpr property.
        /// </summary>
        public HL7SDK.Cda.IST DerivationExpr
        {
            get
            {
                if (Element.derivationExpr == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.derivationExpr = new HL7SDK.Xml.Cda.ST();
                    }
                }
                return ElementFactory.Wrap(Element.derivationExpr, this) as HL7SDK.Cda.IST;
            }
            set
            {
                if (value == null)
                {
                    Element.derivationExpr = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ST)value;
                    t.Attach(this);
                    Element.derivationExpr = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE PriorityCode
        {
            get
            {
                if (Element.priorityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.priorityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.priorityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.priorityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.priorityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The repeatNumber property.
        /// </summary>
        public HL7SDK.Cda.IIVL_INT RepeatNumber
        {
            get
            {
                if (Element.repeatNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.repeatNumber = new HL7SDK.Xml.Cda.IVL_INT();
                    }
                }
                return ElementFactory.Wrap(Element.repeatNumber, this) as HL7SDK.Cda.IIVL_INT;
            }
            set
            {
                if (value == null)
                {
                    Element.repeatNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_INT)value;
                    t.Attach(this);
                    Element.repeatNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public HL7SDK.Cda.IANYCollection Value
        {
            get
            {
                return new HL7SDK.Cda.ANYCollection(this, () => { return Element.value; }, (x) => { Element.value = x; });
            }
        }
        
        /// <summary>
        /// The interpretationCode property.
        /// </summary>
        public HL7SDK.Cda.ICECollection InterpretationCode
        {
            get
            {
                return new HL7SDK.Cda.CECollection(this, () => { return Element.interpretationCode; }, (x) => { Element.interpretationCode = x; });
            }
        }
        
        /// <summary>
        /// The methodCode property.
        /// </summary>
        public HL7SDK.Cda.ICECollection MethodCode
        {
            get
            {
                return new HL7SDK.Cda.CECollection(this, () => { return Element.methodCode; }, (x) => { Element.methodCode = x; });
            }
        }
        
        /// <summary>
        /// The targetSiteCode property.
        /// </summary>
        public HL7SDK.Cda.ICDCollection TargetSiteCode
        {
            get
            {
                return new HL7SDK.Cda.CDCollection(this, () => { return Element.targetSiteCode; }, (x) => { Element.targetSiteCode = x; });
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The referenceRange property.
        /// </summary>
        public HL7SDK.Cda.IReferenceRangeCollection ReferenceRange
        {
            get
            {
                return new HL7SDK.Cda.ReferenceRangeCollection(this, () => { return Element.referenceRange; }, (x) => { Element.referenceRange = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public HL7SDK.Cda.x_ActMoodDocumentObservation MoodCode
        {
            get
            {
                return (HL7SDK.Cda.x_ActMoodDocumentObservation)Element.moodCode;
            }
            set
            {
                Element.moodCode = (HL7SDK.Xml.Cda.x_ActMoodDocumentObservation)value;
            }
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        public bool NegationInd
        {
            get
            {
                return Element.negationInd;
            }
            set
            {
                Element.negationInd = value;
            }
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        public bool NegationIndSpecified
        {
            get
            {
                return Element.negationIndSpecified;
            }
            set
            {
                Element.negationIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Observation();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IObservationCollection interface.
    /// </summary>


    [Guid("426d0f7d-f5b0-4e5b-9b1d-db59357ffbcd")]
    public partial interface IObservationCollection : ICDACollection, IEnumerable<IObservation>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IObservation this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IObservation value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IObservation value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IObservation item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IObservation item1, IObservation item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IObservation Append();
    }
    

    [Guid("1eb60437-02d1-4438-9576-5e121d765000")]
    internal partial class ObservationCollection : CDAFactoryCollection<HL7SDK.Cda.Observation, HL7SDK.Xml.Cda.POCD_MT000040Observation, HL7SDK.Cda.IObservation>, HL7SDK.Cda.IObservationCollection
    {
        
        internal ObservationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Observation[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Observation[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IObservationMediaCollection interface.
    /// </summary>

    [Guid("02879129-2fd3-48cb-b29c-961dd0c1fbc3")]

    public partial interface IObservationMedia : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ObservationMedia object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        IED Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ObservationMedia class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IObservationMedia))]
    [Guid("fd0bc3f2-d3fc-479e-a9fc-6a33fea9abd2")]
    public partial class ObservationMedia : CDAElement, INotifyPropertyChanged, IObservationMedia, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ObservationMedia finalizer.
        /// </summary>
        ~ObservationMedia()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ObservationMedia constructor.
        /// </summary>
        public ObservationMedia()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ObservationMedia constructor.
        /// </summary>
        internal ObservationMedia(HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ObservationMedia
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public HL7SDK.Cda.IED Value
        {
            get
            {
                if (Element.value == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.value = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.value, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.value = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.value = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IObservationMediaCollection interface.
    /// </summary>


    [Guid("93019e28-aa65-4591-800b-f5e39510264a")]
    public partial interface IObservationMediaCollection : ICDACollection, IEnumerable<IObservationMedia>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IObservationMedia this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IObservationMedia value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IObservationMedia value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IObservationMedia item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IObservationMedia item1, IObservationMedia item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IObservationMedia Append();
    }
    

    [Guid("021ec0d0-db58-4868-b35f-10e17ea55d54")]
    internal partial class ObservationMediaCollection : CDAFactoryCollection<HL7SDK.Cda.ObservationMedia, HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia, HL7SDK.Cda.IObservationMedia>, HL7SDK.Cda.IObservationMediaCollection
    {
        
        internal ObservationMediaCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ObservationMedia[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IObservationRangeCollection interface.
    /// </summary>

    [Guid("6e2a4598-2cd8-4d93-a079-4eb54cba45f8")]

    public partial interface IObservationRange : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ObservationRange object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The interpretationCode property.
        /// </summary>
        ICE InterpretationCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ObservationRange class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IObservationRange))]
    [Guid("3591345e-ec3a-4707-8886-1629c094c970")]
    public partial class ObservationRange : CDAElement, INotifyPropertyChanged, IObservationRange, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ObservationRange finalizer.
        /// </summary>
        ~ObservationRange()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ObservationRange constructor.
        /// </summary>
        public ObservationRange()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ObservationRange();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ObservationRange constructor.
        /// </summary>
        internal ObservationRange(HL7SDK.Xml.Cda.POCD_MT000040ObservationRange element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ObservationRange
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ObservationRange Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ObservationRange;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The interpretationCode property.
        /// </summary>
        public HL7SDK.Cda.ICE InterpretationCode
        {
            get
            {
                if (Element.interpretationCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.interpretationCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.interpretationCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.interpretationCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.interpretationCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ObservationRange();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IObservationRangeCollection interface.
    /// </summary>


    [Guid("a83930b1-0bad-4798-a600-4738c7a13dd1")]
    public partial interface IObservationRangeCollection : ICDACollection, IEnumerable<IObservationRange>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IObservationRange this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IObservationRange value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IObservationRange value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IObservationRange item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IObservationRange item1, IObservationRange item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IObservationRange Append();
    }
    

    [Guid("732253bc-8311-40df-beb3-aef553bbfef5")]
    internal partial class ObservationRangeCollection : CDAFactoryCollection<HL7SDK.Cda.ObservationRange, HL7SDK.Xml.Cda.POCD_MT000040ObservationRange, HL7SDK.Cda.IObservationRange>, HL7SDK.Cda.IObservationRangeCollection
    {
        
        internal ObservationRangeCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ObservationRange[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ObservationRange[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IOrderCollection interface.
    /// </summary>

    [Guid("986f5045-aba9-4418-b2e1-2b229468dd87")]

    public partial interface IOrder : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Order object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        ICE PriorityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Order class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IOrder))]
    [Guid("afefc770-eea3-427a-9afb-62a8ba44d4d4")]
    public partial class Order : CDAElement, INotifyPropertyChanged, IOrder, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Order finalizer.
        /// </summary>
        ~Order()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Order constructor.
        /// </summary>
        public Order()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Order();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Order constructor.
        /// </summary>
        internal Order(HL7SDK.Xml.Cda.POCD_MT000040Order element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Order
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Order Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Order;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE PriorityCode
        {
            get
            {
                if (Element.priorityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.priorityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.priorityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.priorityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.priorityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Order();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IOrderCollection interface.
    /// </summary>


    [Guid("1b791f50-4119-4877-909e-2731b7f61ee7")]
    public partial interface IOrderCollection : ICDACollection, IEnumerable<IOrder>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IOrder this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IOrder value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IOrder value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IOrder item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IOrder item1, IOrder item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IOrder Append();
    }
    

    [Guid("1c3e3b2c-f95c-460e-b48c-42fa16dee2e1")]
    internal partial class OrderCollection : CDAFactoryCollection<HL7SDK.Cda.Order, HL7SDK.Xml.Cda.POCD_MT000040Order, HL7SDK.Cda.IOrder>, HL7SDK.Cda.IOrderCollection
    {
        
        internal OrderCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Order[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Order[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IOrganizationCollection interface.
    /// </summary>

    [Guid("0de09288-6503-43b9-9bad-767f7acad058")]

    public partial interface IOrganization : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Organization object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IONCollection Name
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The standardIndustryClassCode property.
        /// </summary>
        ICE StandardIndustryClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The asOrganizationPartOf property.
        /// </summary>
        IOrganizationPartOf AsOrganizationPartOf
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Organization class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IOrganization))]
    [Guid("d77da8bf-6dc1-4eae-b042-de6dcbfbab46")]
    public partial class Organization : CDAElement, INotifyPropertyChanged, IOrganization, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Organization finalizer.
        /// </summary>
        ~Organization()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Organization constructor.
        /// </summary>
        public Organization()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Organization constructor.
        /// </summary>
        internal Organization(HL7SDK.Xml.Cda.POCD_MT000040Organization element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Organization
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Organization Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Organization;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IONCollection Name
        {
            get
            {
                return new HL7SDK.Cda.ONCollection(this, () => { return Element.name; }, (x) => { Element.name = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The standardIndustryClassCode property.
        /// </summary>
        public HL7SDK.Cda.ICE StandardIndustryClassCode
        {
            get
            {
                if (Element.standardIndustryClassCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.standardIndustryClassCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.standardIndustryClassCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.standardIndustryClassCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.standardIndustryClassCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The asOrganizationPartOf property.
        /// </summary>
        public HL7SDK.Cda.IOrganizationPartOf AsOrganizationPartOf
        {
            get
            {
                if (Element.asOrganizationPartOf == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.asOrganizationPartOf = new HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf();
                    }
                }
                return ElementFactory.Wrap(Element.asOrganizationPartOf, this) as HL7SDK.Cda.IOrganizationPartOf;
            }
            set
            {
                if (value == null)
                {
                    Element.asOrganizationPartOf = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.OrganizationPartOf)value;
                    t.Attach(this);
                    Element.asOrganizationPartOf = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IOrganizationCollection interface.
    /// </summary>


    [Guid("e9fb57ac-2d31-4ddd-97fb-2632f402e1e7")]
    public partial interface IOrganizationCollection : ICDACollection, IEnumerable<IOrganization>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IOrganization this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IOrganization value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IOrganization value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IOrganization item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IOrganization item1, IOrganization item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IOrganization Append();
    }
    

    [Guid("7339a76a-bb48-47bf-a776-af8922c64248")]
    internal partial class OrganizationCollection : CDAFactoryCollection<HL7SDK.Cda.Organization, HL7SDK.Xml.Cda.POCD_MT000040Organization, HL7SDK.Cda.IOrganization>, HL7SDK.Cda.IOrganizationCollection
    {
        
        internal OrganizationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Organization[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Organization[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IOrganizationPartOfCollection interface.
    /// </summary>

    [Guid("23ddb4a9-59be-43eb-94d3-c7229c6c933a")]

    public partial interface IOrganizationPartOf : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040OrganizationPartOf object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The wholeOrganization property.
        /// </summary>
        IOrganization WholeOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The OrganizationPartOf class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IOrganizationPartOf))]
    [Guid("24ed98fb-e346-47bd-9798-0606e67384e2")]
    public partial class OrganizationPartOf : CDAElement, INotifyPropertyChanged, IOrganizationPartOf, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// OrganizationPartOf finalizer.
        /// </summary>
        ~OrganizationPartOf()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// OrganizationPartOf constructor.
        /// </summary>
        public OrganizationPartOf()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// OrganizationPartOf constructor.
        /// </summary>
        internal OrganizationPartOf(HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040OrganizationPartOf
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The wholeOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization WholeOrganization
        {
            get
            {
                if (Element.wholeOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.wholeOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.wholeOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.wholeOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.wholeOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IOrganizationPartOfCollection interface.
    /// </summary>


    [Guid("24b884ff-123b-431e-9be8-b267de24d330")]
    public partial interface IOrganizationPartOfCollection : ICDACollection, IEnumerable<IOrganizationPartOf>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IOrganizationPartOf this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IOrganizationPartOf value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IOrganizationPartOf value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IOrganizationPartOf item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IOrganizationPartOf item1, IOrganizationPartOf item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IOrganizationPartOf Append();
    }
    

    [Guid("60d7ba4e-06dd-4458-9717-7858f98c08f0")]
    internal partial class OrganizationPartOfCollection : CDAFactoryCollection<HL7SDK.Cda.OrganizationPartOf, HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf, HL7SDK.Cda.IOrganizationPartOf>, HL7SDK.Cda.IOrganizationPartOfCollection
    {
        
        internal OrganizationPartOfCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040OrganizationPartOf[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IOrganizerCollection interface.
    /// </summary>

    [Guid("47c29b3b-0eaa-407c-819e-abe83a0a9e40")]

    public partial interface IOrganizer : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Organizer object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        IComponent4Collection Component
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.x_ActClassDocumentEntryOrganizer ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Organizer class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IOrganizer))]
    [Guid("263349dd-25b1-431e-9c8c-575da708caba")]
    public partial class Organizer : CDAElement, INotifyPropertyChanged, IOrganizer, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Organizer finalizer.
        /// </summary>
        ~Organizer()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Organizer constructor.
        /// </summary>
        public Organizer()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Organizer();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Organizer constructor.
        /// </summary>
        internal Organizer(HL7SDK.Xml.Cda.POCD_MT000040Organizer element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Organizer
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Organizer Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Organizer;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        public HL7SDK.Cda.IComponent4Collection Component
        {
            get
            {
                return new HL7SDK.Cda.Component4Collection(this, () => { return Element.component; }, (x) => { Element.component = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.x_ActClassDocumentEntryOrganizer ClassCode
        {
            get
            {
                return (HL7SDK.Cda.x_ActClassDocumentEntryOrganizer)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.x_ActClassDocumentEntryOrganizer)value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Organizer();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IOrganizerCollection interface.
    /// </summary>


    [Guid("3b7519e3-5575-48a9-b6c6-c7e10036db5b")]
    public partial interface IOrganizerCollection : ICDACollection, IEnumerable<IOrganizer>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IOrganizer this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IOrganizer value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IOrganizer value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IOrganizer item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IOrganizer item1, IOrganizer item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IOrganizer Append();
    }
    

    [Guid("238daa3a-1635-4f6d-b3b5-9135903ca52d")]
    internal partial class OrganizerCollection : CDAFactoryCollection<HL7SDK.Cda.Organizer, HL7SDK.Xml.Cda.POCD_MT000040Organizer, HL7SDK.Cda.IOrganizer>, HL7SDK.Cda.IOrganizerCollection
    {
        
        internal OrganizerCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Organizer[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Organizer[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IParentDocumentCollection interface.
    /// </summary>

    [Guid("4b2031c5-8ca6-4e95-ad69-9a9ce78c4256")]

    public partial interface IParentDocument : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ParentDocument object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The setId property.
        /// </summary>
        III SetId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The versionNumber property.
        /// </summary>
        IINT VersionNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.ActClinicalDocument ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        bool ClassCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ParentDocument class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IParentDocument))]
    [Guid("7ccb25cf-4f4b-4189-8b1a-236b01e17f2f")]
    public partial class ParentDocument : CDAElement, INotifyPropertyChanged, IParentDocument, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ParentDocument finalizer.
        /// </summary>
        ~ParentDocument()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ParentDocument constructor.
        /// </summary>
        public ParentDocument()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ParentDocument();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ParentDocument constructor.
        /// </summary>
        internal ParentDocument(HL7SDK.Xml.Cda.POCD_MT000040ParentDocument element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ParentDocument
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ParentDocument Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ParentDocument;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The setId property.
        /// </summary>
        public HL7SDK.Cda.III SetId
        {
            get
            {
                if (Element.setId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.setId = new HL7SDK.Xml.Cda.II();
                    }
                }
                return ElementFactory.Wrap(Element.setId, this) as HL7SDK.Cda.III;
            }
            set
            {
                if (value == null)
                {
                    Element.setId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.II)value;
                    t.Attach(this);
                    Element.setId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The versionNumber property.
        /// </summary>
        public HL7SDK.Cda.IINT VersionNumber
        {
            get
            {
                if (Element.versionNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.versionNumber = new HL7SDK.Xml.Cda.INT();
                    }
                }
                return ElementFactory.Wrap(Element.versionNumber, this) as HL7SDK.Cda.IINT;
            }
            set
            {
                if (value == null)
                {
                    Element.versionNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.INT)value;
                    t.Attach(this);
                    Element.versionNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.ActClinicalDocument ClassCode
        {
            get
            {
                return (HL7SDK.Cda.ActClinicalDocument)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.ActClinicalDocument)value;
                Element.classCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        public bool ClassCodeSpecified
        {
            get
            {
                return Element.classCodeSpecified;
            }
            set
            {
                Element.classCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ParentDocument();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IParentDocumentCollection interface.
    /// </summary>


    [Guid("66b4360a-c86c-4d81-a1d8-4661137b6e87")]
    public partial interface IParentDocumentCollection : ICDACollection, IEnumerable<IParentDocument>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IParentDocument this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IParentDocument value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IParentDocument value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IParentDocument item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IParentDocument item1, IParentDocument item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IParentDocument Append();
    }
    

    [Guid("6f35e834-8b6a-470e-8919-4244475aa42c")]
    internal partial class ParentDocumentCollection : CDAFactoryCollection<HL7SDK.Cda.ParentDocument, HL7SDK.Xml.Cda.POCD_MT000040ParentDocument, HL7SDK.Cda.IParentDocument>, HL7SDK.Cda.IParentDocumentCollection
    {
        
        internal ParentDocumentCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ParentDocument[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ParentDocument[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IParticipant1Collection interface.
    /// </summary>

    [Guid("704d4b54-e2c0-42e5-ab2a-134eee03d378")]

    public partial interface IParticipant1 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Participant1 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The functionCode property.
        /// </summary>
        ICE FunctionCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        IIVL_TS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The associatedEntity property.
        /// </summary>
        IAssociatedEntity AssociatedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Participant1 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IParticipant1))]
    [Guid("2cdd3f16-3383-4dfa-9044-0e14ca50faf4")]
    public partial class Participant1 : CDAElement, INotifyPropertyChanged, IParticipant1, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Participant1 finalizer.
        /// </summary>
        ~Participant1()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Participant1 constructor.
        /// </summary>
        public Participant1()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Participant1();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Participant1 constructor.
        /// </summary>
        internal Participant1(HL7SDK.Xml.Cda.POCD_MT000040Participant1 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Participant1
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Participant1 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Participant1;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The functionCode property.
        /// </summary>
        public HL7SDK.Cda.ICE FunctionCode
        {
            get
            {
                if (Element.functionCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.functionCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.functionCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.functionCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.functionCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The associatedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssociatedEntity AssociatedEntity
        {
            get
            {
                if (Element.associatedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.associatedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssociatedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.associatedEntity, this) as HL7SDK.Cda.IAssociatedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.associatedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssociatedEntity)value;
                    t.Attach(this);
                    Element.associatedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Participant1();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IParticipant1Collection interface.
    /// </summary>


    [Guid("145ddc51-1e6a-444d-a4d6-8b8bfcf34694")]
    public partial interface IParticipant1Collection : ICDACollection, IEnumerable<IParticipant1>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IParticipant1 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IParticipant1 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IParticipant1 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IParticipant1 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IParticipant1 item1, IParticipant1 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IParticipant1 Append();
    }
    

    [Guid("6bde54d0-4f26-4fee-ae43-f81983aa20fa")]
    internal partial class Participant1Collection : CDAFactoryCollection<HL7SDK.Cda.Participant1, HL7SDK.Xml.Cda.POCD_MT000040Participant1, HL7SDK.Cda.IParticipant1>, HL7SDK.Cda.IParticipant1Collection
    {
        
        internal Participant1Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Participant1[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Participant1[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IParticipant2Collection interface.
    /// </summary>

    [Guid("569f3e2f-5c7f-4611-8ecb-de65592374dd")]

    public partial interface IParticipant2 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Participant2 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        IIVL_TS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The awarenessCode property.
        /// </summary>
        ICE AwarenessCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The participantRole property.
        /// </summary>
        IParticipantRole ParticipantRole
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Participant2 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IParticipant2))]
    [Guid("f7c8778c-f0bd-4736-b2f9-c492f3a43059")]
    public partial class Participant2 : CDAElement, INotifyPropertyChanged, IParticipant2, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Participant2 finalizer.
        /// </summary>
        ~Participant2()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Participant2 constructor.
        /// </summary>
        public Participant2()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Participant2();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Participant2 constructor.
        /// </summary>
        internal Participant2(HL7SDK.Xml.Cda.POCD_MT000040Participant2 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Participant2
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Participant2 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Participant2;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The awarenessCode property.
        /// </summary>
        public HL7SDK.Cda.ICE AwarenessCode
        {
            get
            {
                if (Element.awarenessCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.awarenessCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.awarenessCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.awarenessCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.awarenessCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The participantRole property.
        /// </summary>
        public HL7SDK.Cda.IParticipantRole ParticipantRole
        {
            get
            {
                if (Element.participantRole == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.participantRole = new HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole();
                    }
                }
                return ElementFactory.Wrap(Element.participantRole, this) as HL7SDK.Cda.IParticipantRole;
            }
            set
            {
                if (value == null)
                {
                    Element.participantRole = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ParticipantRole)value;
                    t.Attach(this);
                    Element.participantRole = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Participant2();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IParticipant2Collection interface.
    /// </summary>


    [Guid("a4f6eff3-292c-4650-bfc2-5feab9c79e59")]
    public partial interface IParticipant2Collection : ICDACollection, IEnumerable<IParticipant2>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IParticipant2 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IParticipant2 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IParticipant2 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IParticipant2 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IParticipant2 item1, IParticipant2 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IParticipant2 Append();
    }
    

    [Guid("8bf397de-132e-4dc9-bc1d-f998602698c7")]
    internal partial class Participant2Collection : CDAFactoryCollection<HL7SDK.Cda.Participant2, HL7SDK.Xml.Cda.POCD_MT000040Participant2, HL7SDK.Cda.IParticipant2>, HL7SDK.Cda.IParticipant2Collection
    {
        
        internal Participant2Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Participant2[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Participant2[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IParticipantRoleCollection interface.
    /// </summary>

    [Guid("1f8765e7-7212-4f97-9cbd-5526842de8cb")]

    public partial interface IParticipantRole : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ParticipantRole object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// Represents the ParticipantRole.Item value as IDevice.
        /// </summary>
        IDevice AsDevice
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the ParticipantRole.Item value as IPlayingEntity.
        /// </summary>
        IPlayingEntity AsPlayingEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scopingEntity property.
        /// </summary>
        IEntity ScopingEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ParticipantRole class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IParticipantRole))]
    [Guid("78d2d87d-7ec7-474d-9623-c14c6c0a05c7")]
    public partial class ParticipantRole : CDAElement, INotifyPropertyChanged, IParticipantRole, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ParticipantRole finalizer.
        /// </summary>
        ~ParticipantRole()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ParticipantRole constructor.
        /// </summary>
        public ParticipantRole()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ParticipantRole constructor.
        /// </summary>
        internal ParticipantRole(HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ParticipantRole
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// Represents the ParticipantRole.Item value as IDevice.
        /// </summary>
        public virtual IDevice AsDevice
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040Device();
                        return ElementFactory.Wrap(Element.Item, this) as IDevice;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Device)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IDevice;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Device)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IDevice;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040Device)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040Device expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the ParticipantRole.Item value as IPlayingEntity.
        /// </summary>
        public virtual IPlayingEntity AsPlayingEntity
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity();
                        return ElementFactory.Wrap(Element.Item, this) as IPlayingEntity;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IPlayingEntity;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IPlayingEntity;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040PlayingEntity expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040Device)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040Device, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.Device)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.Device).Element;
                    return;
                }
                if (value is HL7SDK.Cda.PlayingEntity)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.PlayingEntity).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The scopingEntity property.
        /// </summary>
        public HL7SDK.Cda.IEntity ScopingEntity
        {
            get
            {
                if (Element.scopingEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.scopingEntity = new HL7SDK.Xml.Cda.POCD_MT000040Entity();
                    }
                }
                return ElementFactory.Wrap(Element.scopingEntity, this) as HL7SDK.Cda.IEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.scopingEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Entity)value;
                    t.Attach(this);
                    Element.scopingEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IParticipantRoleCollection interface.
    /// </summary>


    [Guid("f5c7e55f-14d1-4ead-ad54-988016dc8675")]
    public partial interface IParticipantRoleCollection : ICDACollection, IEnumerable<IParticipantRole>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IParticipantRole this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IParticipantRole value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IParticipantRole value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IParticipantRole item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IParticipantRole item1, IParticipantRole item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IParticipantRole Append();
    }
    

    [Guid("485861be-2bf6-49e5-b731-71f3b265c04c")]
    internal partial class ParticipantRoleCollection : CDAFactoryCollection<HL7SDK.Cda.ParticipantRole, HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole, HL7SDK.Cda.IParticipantRole>, HL7SDK.Cda.IParticipantRoleCollection
    {
        
        internal ParticipantRoleCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ParticipantRole[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPatientCollection interface.
    /// </summary>

    [Guid("e726c47a-4c2a-4b61-82ac-05e88f65e7fa")]

    public partial interface IPatient : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Patient object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        III Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IPNCollection Name
        {
            get;
        }
        
        /// <summary>
        /// The administrativeGenderCode property.
        /// </summary>
        ICE AdministrativeGenderCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The birthTime property.
        /// </summary>
        ITS BirthTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maritalStatusCode property.
        /// </summary>
        ICE MaritalStatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The religiousAffiliationCode property.
        /// </summary>
        ICE ReligiousAffiliationCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The raceCode property.
        /// </summary>
        ICE RaceCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ethnicGroupCode property.
        /// </summary>
        ICE EthnicGroupCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The guardian property.
        /// </summary>
        IGuardianCollection Guardian
        {
            get;
        }
        
        /// <summary>
        /// The birthplace property.
        /// </summary>
        IBirthplace Birthplace
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCommunication property.
        /// </summary>
        ILanguageCommunicationCollection LanguageCommunication
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Patient class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPatient))]
    [Guid("bfedb5c9-5011-4a5b-95d5-3d42c9a37959")]
    public partial class Patient : CDAElement, INotifyPropertyChanged, IPatient, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Patient finalizer.
        /// </summary>
        ~Patient()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Patient constructor.
        /// </summary>
        public Patient()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Patient();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Patient constructor.
        /// </summary>
        internal Patient(HL7SDK.Xml.Cda.POCD_MT000040Patient element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Patient
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Patient Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Patient;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.III Id
        {
            get
            {
                if (Element.id == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.id = new HL7SDK.Xml.Cda.II();
                    }
                }
                return ElementFactory.Wrap(Element.id, this) as HL7SDK.Cda.III;
            }
            set
            {
                if (value == null)
                {
                    Element.id = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.II)value;
                    t.Attach(this);
                    Element.id = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IPNCollection Name
        {
            get
            {
                return new HL7SDK.Cda.PNCollection(this, () => { return Element.name; }, (x) => { Element.name = x; });
            }
        }
        
        /// <summary>
        /// The administrativeGenderCode property.
        /// </summary>
        public HL7SDK.Cda.ICE AdministrativeGenderCode
        {
            get
            {
                if (Element.administrativeGenderCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.administrativeGenderCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.administrativeGenderCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.administrativeGenderCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.administrativeGenderCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The birthTime property.
        /// </summary>
        public HL7SDK.Cda.ITS BirthTime
        {
            get
            {
                if (Element.birthTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.birthTime = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.birthTime, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.birthTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.birthTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The maritalStatusCode property.
        /// </summary>
        public HL7SDK.Cda.ICE MaritalStatusCode
        {
            get
            {
                if (Element.maritalStatusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.maritalStatusCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.maritalStatusCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.maritalStatusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.maritalStatusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The religiousAffiliationCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ReligiousAffiliationCode
        {
            get
            {
                if (Element.religiousAffiliationCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.religiousAffiliationCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.religiousAffiliationCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.religiousAffiliationCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.religiousAffiliationCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The raceCode property.
        /// </summary>
        public HL7SDK.Cda.ICE RaceCode
        {
            get
            {
                if (Element.raceCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.raceCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.raceCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.raceCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.raceCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The ethnicGroupCode property.
        /// </summary>
        public HL7SDK.Cda.ICE EthnicGroupCode
        {
            get
            {
                if (Element.ethnicGroupCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.ethnicGroupCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.ethnicGroupCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.ethnicGroupCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.ethnicGroupCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The guardian property.
        /// </summary>
        public HL7SDK.Cda.IGuardianCollection Guardian
        {
            get
            {
                return new HL7SDK.Cda.GuardianCollection(this, () => { return Element.guardian; }, (x) => { Element.guardian = x; });
            }
        }
        
        /// <summary>
        /// The birthplace property.
        /// </summary>
        public HL7SDK.Cda.IBirthplace Birthplace
        {
            get
            {
                if (Element.birthplace == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.birthplace = new HL7SDK.Xml.Cda.POCD_MT000040Birthplace();
                    }
                }
                return ElementFactory.Wrap(Element.birthplace, this) as HL7SDK.Cda.IBirthplace;
            }
            set
            {
                if (value == null)
                {
                    Element.birthplace = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Birthplace)value;
                    t.Attach(this);
                    Element.birthplace = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCommunication property.
        /// </summary>
        public HL7SDK.Cda.ILanguageCommunicationCollection LanguageCommunication
        {
            get
            {
                return new HL7SDK.Cda.LanguageCommunicationCollection(this, () => { return Element.languageCommunication; }, (x) => { Element.languageCommunication = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Patient();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPatientCollection interface.
    /// </summary>


    [Guid("caa372d3-766a-4d49-9d7a-374e6feab9dd")]
    public partial interface IPatientCollection : ICDACollection, IEnumerable<IPatient>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPatient this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPatient value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPatient value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPatient item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPatient item1, IPatient item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPatient Append();
    }
    

    [Guid("afbffbd0-ccec-4a43-ae1e-bc724ec98ced")]
    internal partial class PatientCollection : CDAFactoryCollection<HL7SDK.Cda.Patient, HL7SDK.Xml.Cda.POCD_MT000040Patient, HL7SDK.Cda.IPatient>, HL7SDK.Cda.IPatientCollection
    {
        
        internal PatientCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Patient[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Patient[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPatientRoleCollection interface.
    /// </summary>

    [Guid("9bcbd3eb-01ab-46b8-9c22-9a5bedd42bd4")]

    public partial interface IPatientRole : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040PatientRole object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// The patient property.
        /// </summary>
        IPatient Patient
        {
            get;
            set;
        }
        
        /// <summary>
        /// The providerOrganization property.
        /// </summary>
        IOrganization ProviderOrganization
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PatientRole class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPatientRole))]
    [Guid("c3604d43-993c-413c-8b97-7a3bfcd2dfcd")]
    public partial class PatientRole : CDAElement, INotifyPropertyChanged, IPatientRole, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PatientRole finalizer.
        /// </summary>
        ~PatientRole()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PatientRole constructor.
        /// </summary>
        public PatientRole()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040PatientRole();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PatientRole constructor.
        /// </summary>
        internal PatientRole(HL7SDK.Xml.Cda.POCD_MT000040PatientRole element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040PatientRole
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040PatientRole Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040PatientRole;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// The patient property.
        /// </summary>
        public HL7SDK.Cda.IPatient Patient
        {
            get
            {
                if (Element.patient == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.patient = new HL7SDK.Xml.Cda.POCD_MT000040Patient();
                    }
                }
                return ElementFactory.Wrap(Element.patient, this) as HL7SDK.Cda.IPatient;
            }
            set
            {
                if (value == null)
                {
                    Element.patient = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Patient)value;
                    t.Attach(this);
                    Element.patient = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The providerOrganization property.
        /// </summary>
        public HL7SDK.Cda.IOrganization ProviderOrganization
        {
            get
            {
                if (Element.providerOrganization == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.providerOrganization = new HL7SDK.Xml.Cda.POCD_MT000040Organization();
                    }
                }
                return ElementFactory.Wrap(Element.providerOrganization, this) as HL7SDK.Cda.IOrganization;
            }
            set
            {
                if (value == null)
                {
                    Element.providerOrganization = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Organization)value;
                    t.Attach(this);
                    Element.providerOrganization = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040PatientRole();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPatientRoleCollection interface.
    /// </summary>


    [Guid("4036cc45-3089-4668-b593-363e39b4e61e")]
    public partial interface IPatientRoleCollection : ICDACollection, IEnumerable<IPatientRole>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPatientRole this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPatientRole value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPatientRole value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPatientRole item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPatientRole item1, IPatientRole item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPatientRole Append();
    }
    

    [Guid("ff1238cf-cef5-44eb-b432-8c57aca4c94a")]
    internal partial class PatientRoleCollection : CDAFactoryCollection<HL7SDK.Cda.PatientRole, HL7SDK.Xml.Cda.POCD_MT000040PatientRole, HL7SDK.Cda.IPatientRole>, HL7SDK.Cda.IPatientRoleCollection
    {
        
        internal PatientRoleCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040PatientRole[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040PatientRole[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPerformer1Collection interface.
    /// </summary>

    [Guid("e382c892-3a6d-407d-b6e2-72306cdffc1a")]

    public partial interface IPerformer1 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Performer1 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The functionCode property.
        /// </summary>
        ICE FunctionCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        IIVL_TS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        IAssignedEntity AssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.x_ServiceEventPerformer TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Performer1 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPerformer1))]
    [Guid("8e44ada2-50a8-4031-b6cc-a117c90ba2e2")]
    public partial class Performer1 : CDAElement, INotifyPropertyChanged, IPerformer1, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Performer1 finalizer.
        /// </summary>
        ~Performer1()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Performer1 constructor.
        /// </summary>
        public Performer1()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Performer1();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Performer1 constructor.
        /// </summary>
        internal Performer1(HL7SDK.Xml.Cda.POCD_MT000040Performer1 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Performer1
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Performer1 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Performer1;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The functionCode property.
        /// </summary>
        public HL7SDK.Cda.ICE FunctionCode
        {
            get
            {
                if (Element.functionCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.functionCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.functionCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.functionCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.functionCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssignedEntity AssignedEntity
        {
            get
            {
                if (Element.assignedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.assignedEntity, this) as HL7SDK.Cda.IAssignedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedEntity)value;
                    t.Attach(this);
                    Element.assignedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.x_ServiceEventPerformer TypeCode
        {
            get
            {
                return (HL7SDK.Cda.x_ServiceEventPerformer)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.x_ServiceEventPerformer)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Performer1();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPerformer1Collection interface.
    /// </summary>


    [Guid("efbbfc92-45ea-483d-8fe4-356bcc485a18")]
    public partial interface IPerformer1Collection : ICDACollection, IEnumerable<IPerformer1>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPerformer1 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPerformer1 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPerformer1 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPerformer1 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPerformer1 item1, IPerformer1 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPerformer1 Append();
    }
    

    [Guid("a236527e-2c23-49ff-8180-49da7dba0a33")]
    internal partial class Performer1Collection : CDAFactoryCollection<HL7SDK.Cda.Performer1, HL7SDK.Xml.Cda.POCD_MT000040Performer1, HL7SDK.Cda.IPerformer1>, HL7SDK.Cda.IPerformer1Collection
    {
        
        internal Performer1Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Performer1[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Performer1[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPerformer2Collection interface.
    /// </summary>

    [Guid("c9eef4b1-5a0c-4081-b03d-ad5486d94fbd")]

    public partial interface IPerformer2 : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Performer2 object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        IIVL_TS Time
        {
            get;
            set;
        }
        
        /// <summary>
        /// The modeCode property.
        /// </summary>
        ICE ModeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        IAssignedEntity AssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ParticipationPhysicalPerformer TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Performer2 class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPerformer2))]
    [Guid("39d6ea1b-28f6-4bb1-b5a5-592f7df30c78")]
    public partial class Performer2 : CDAElement, INotifyPropertyChanged, IPerformer2, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Performer2 finalizer.
        /// </summary>
        ~Performer2()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Performer2 constructor.
        /// </summary>
        public Performer2()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Performer2();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Performer2 constructor.
        /// </summary>
        internal Performer2(HL7SDK.Xml.Cda.POCD_MT000040Performer2 element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Performer2
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Performer2 Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Performer2;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The time property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS Time
        {
            get
            {
                if (Element.time == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.time = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.time, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.time = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.time = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The modeCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ModeCode
        {
            get
            {
                if (Element.modeCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.modeCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.modeCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.modeCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.modeCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssignedEntity AssignedEntity
        {
            get
            {
                if (Element.assignedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.assignedEntity, this) as HL7SDK.Cda.IAssignedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedEntity)value;
                    t.Attach(this);
                    Element.assignedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ParticipationPhysicalPerformer TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ParticipationPhysicalPerformer)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ParticipationPhysicalPerformer)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Performer2();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPerformer2Collection interface.
    /// </summary>


    [Guid("9d942c50-0886-4d95-9da5-f498b6320387")]
    public partial interface IPerformer2Collection : ICDACollection, IEnumerable<IPerformer2>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPerformer2 this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPerformer2 value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPerformer2 value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPerformer2 item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPerformer2 item1, IPerformer2 item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPerformer2 Append();
    }
    

    [Guid("ac769871-9dbe-48da-9669-49e59bafc17a")]
    internal partial class Performer2Collection : CDAFactoryCollection<HL7SDK.Cda.Performer2, HL7SDK.Xml.Cda.POCD_MT000040Performer2, HL7SDK.Cda.IPerformer2>, HL7SDK.Cda.IPerformer2Collection
    {
        
        internal Performer2Collection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Performer2[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Performer2[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPersonCollection interface.
    /// </summary>

    [Guid("145636d3-fa0d-402c-942b-0986ad547c8f")]

    public partial interface IPerson : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Person object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IPNCollection Name
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Person class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPerson))]
    [Guid("58bb9d22-eb89-4c19-9ac1-2879a929ce6e")]
    public partial class Person : CDAElement, INotifyPropertyChanged, IPerson, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Person finalizer.
        /// </summary>
        ~Person()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Person constructor.
        /// </summary>
        public Person()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Person();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Person constructor.
        /// </summary>
        internal Person(HL7SDK.Xml.Cda.POCD_MT000040Person element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Person
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Person Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Person;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IPNCollection Name
        {
            get
            {
                return new HL7SDK.Cda.PNCollection(this, () => { return Element.name; }, (x) => { Element.name = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPersonCollection interface.
    /// </summary>


    [Guid("d569b914-a6d7-4b37-a3bf-55456993d2c1")]
    public partial interface IPersonCollection : ICDACollection, IEnumerable<IPerson>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPerson this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPerson value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPerson value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPerson item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPerson item1, IPerson item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPerson Append();
    }
    

    [Guid("0212e65e-8f10-452a-9a8a-6fd2beb0116b")]
    internal partial class PersonCollection : CDAFactoryCollection<HL7SDK.Cda.Person, HL7SDK.Xml.Cda.POCD_MT000040Person, HL7SDK.Cda.IPerson>, HL7SDK.Cda.IPersonCollection
    {
        
        internal PersonCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Person[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Person[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPlaceCollection interface.
    /// </summary>

    [Guid("1468efd7-3378-4de0-8757-a879d126e7c3")]

    public partial interface IPlace : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Place object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IEN Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IAD Addr
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.EntityClassPlace ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        bool ClassCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Place class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPlace))]
    [Guid("c6c40ed2-70ab-46f9-9ddc-86bf4dfa193b")]
    public partial class Place : CDAElement, INotifyPropertyChanged, IPlace, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Place finalizer.
        /// </summary>
        ~Place()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Place constructor.
        /// </summary>
        public Place()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Place();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Place constructor.
        /// </summary>
        internal Place(HL7SDK.Xml.Cda.POCD_MT000040Place element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Place
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Place Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Place;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IEN Name
        {
            get
            {
                if (Element.name == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.name = new HL7SDK.Xml.Cda.EN();
                    }
                }
                return ElementFactory.Wrap(Element.name, this) as HL7SDK.Cda.IEN;
            }
            set
            {
                if (value == null)
                {
                    Element.name = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.EN)value;
                    t.Attach(this);
                    Element.name = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IAD Addr
        {
            get
            {
                if (Element.addr == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.addr = new HL7SDK.Xml.Cda.AD();
                    }
                }
                return ElementFactory.Wrap(Element.addr, this) as HL7SDK.Cda.IAD;
            }
            set
            {
                if (value == null)
                {
                    Element.addr = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AD)value;
                    t.Attach(this);
                    Element.addr = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.EntityClassPlace ClassCode
        {
            get
            {
                return (HL7SDK.Cda.EntityClassPlace)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.EntityClassPlace)value;
                Element.classCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        public bool ClassCodeSpecified
        {
            get
            {
                return Element.classCodeSpecified;
            }
            set
            {
                Element.classCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Place();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPlaceCollection interface.
    /// </summary>


    [Guid("d86ebc4d-6552-4b21-970d-6e6f7e7f2439")]
    public partial interface IPlaceCollection : ICDACollection, IEnumerable<IPlace>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPlace this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPlace value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPlace value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPlace item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPlace item1, IPlace item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPlace Append();
    }
    

    [Guid("0eff4244-72fe-46c6-8bb9-128861f69030")]
    internal partial class PlaceCollection : CDAFactoryCollection<HL7SDK.Cda.Place, HL7SDK.Xml.Cda.POCD_MT000040Place, HL7SDK.Cda.IPlace>, HL7SDK.Cda.IPlaceCollection
    {
        
        internal PlaceCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Place[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Place[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPlayingEntityCollection interface.
    /// </summary>

    [Guid("96254d6a-b419-4673-bfcc-c3bfa74a0b40")]

    public partial interface IPlayingEntity : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040PlayingEntity object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The quantity property.
        /// </summary>
        IPQCollection Quantity
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IPNCollection Name
        {
            get;
        }
        
        /// <summary>
        /// The desc property.
        /// </summary>
        IED Desc
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PlayingEntity class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPlayingEntity))]
    [Guid("68558281-7f7c-442e-8f62-50dd148ea4d4")]
    public partial class PlayingEntity : CDAElement, INotifyPropertyChanged, IPlayingEntity, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PlayingEntity finalizer.
        /// </summary>
        ~PlayingEntity()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PlayingEntity constructor.
        /// </summary>
        public PlayingEntity()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PlayingEntity constructor.
        /// </summary>
        internal PlayingEntity(HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040PlayingEntity
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The quantity property.
        /// </summary>
        public HL7SDK.Cda.IPQCollection Quantity
        {
            get
            {
                return new HL7SDK.Cda.PQCollection(this, () => { return Element.quantity; }, (x) => { Element.quantity = x; });
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IPNCollection Name
        {
            get
            {
                return new HL7SDK.Cda.PNCollection(this, () => { return Element.name; }, (x) => { Element.name = x; });
            }
        }
        
        /// <summary>
        /// The desc property.
        /// </summary>
        public HL7SDK.Cda.IED Desc
        {
            get
            {
                if (Element.desc == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.desc = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.desc, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.desc = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.desc = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPlayingEntityCollection interface.
    /// </summary>


    [Guid("a4fe9597-9216-4998-a303-545a84147320")]
    public partial interface IPlayingEntityCollection : ICDACollection, IEnumerable<IPlayingEntity>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPlayingEntity this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPlayingEntity value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPlayingEntity value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPlayingEntity item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPlayingEntity item1, IPlayingEntity item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPlayingEntity Append();
    }
    

    [Guid("8feda55b-782b-4873-9578-e954548e141d")]
    internal partial class PlayingEntityCollection : CDAFactoryCollection<HL7SDK.Cda.PlayingEntity, HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity, HL7SDK.Cda.IPlayingEntity>, HL7SDK.Cda.IPlayingEntityCollection
    {
        
        internal PlayingEntityCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPreconditionCollection interface.
    /// </summary>

    [Guid("29d1ec37-1191-4de8-8629-ffec2395a7b7")]

    public partial interface IPrecondition : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Precondition object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The criterion property.
        /// </summary>
        ICriterion Criterion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Precondition class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPrecondition))]
    [Guid("91d3b91f-6a6e-45b4-a1e8-118f2313d6af")]
    public partial class Precondition : CDAElement, INotifyPropertyChanged, IPrecondition, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Precondition finalizer.
        /// </summary>
        ~Precondition()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Precondition constructor.
        /// </summary>
        public Precondition()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Precondition();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Precondition constructor.
        /// </summary>
        internal Precondition(HL7SDK.Xml.Cda.POCD_MT000040Precondition element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Precondition
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Precondition Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Precondition;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The criterion property.
        /// </summary>
        public HL7SDK.Cda.ICriterion Criterion
        {
            get
            {
                if (Element.criterion == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.criterion = new HL7SDK.Xml.Cda.POCD_MT000040Criterion();
                    }
                }
                return ElementFactory.Wrap(Element.criterion, this) as HL7SDK.Cda.ICriterion;
            }
            set
            {
                if (value == null)
                {
                    Element.criterion = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Criterion)value;
                    t.Attach(this);
                    Element.criterion = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Precondition();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPreconditionCollection interface.
    /// </summary>


    [Guid("114e1e6d-33d6-41c8-a75e-9df2b177e833")]
    public partial interface IPreconditionCollection : ICDACollection, IEnumerable<IPrecondition>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPrecondition this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPrecondition value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPrecondition value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPrecondition item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPrecondition item1, IPrecondition item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPrecondition Append();
    }
    

    [Guid("3eda9873-5b22-41a5-b989-da8555e59980")]
    internal partial class PreconditionCollection : CDAFactoryCollection<HL7SDK.Cda.Precondition, HL7SDK.Xml.Cda.POCD_MT000040Precondition, HL7SDK.Cda.IPrecondition>, HL7SDK.Cda.IPreconditionCollection
    {
        
        internal PreconditionCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Precondition[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Precondition[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IProcedureCollection interface.
    /// </summary>

    [Guid("57a1884d-a976-4f91-81d0-160e997994a6")]

    public partial interface IProcedure : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Procedure object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        ICE PriorityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The methodCode property.
        /// </summary>
        ICECollection MethodCode
        {
            get;
        }
        
        /// <summary>
        /// The approachSiteCode property.
        /// </summary>
        ICDCollection ApproachSiteCode
        {
            get;
        }
        
        /// <summary>
        /// The targetSiteCode property.
        /// </summary>
        ICDCollection TargetSiteCode
        {
            get;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        HL7SDK.Cda.x_DocumentProcedureMood MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        bool NegationInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        bool NegationIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Procedure class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IProcedure))]
    [Guid("6cfa5138-79c1-4cb0-8920-2ee77a5485b3")]
    public partial class Procedure : CDAElement, INotifyPropertyChanged, IProcedure, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Procedure finalizer.
        /// </summary>
        ~Procedure()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Procedure constructor.
        /// </summary>
        public Procedure()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Procedure();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Procedure constructor.
        /// </summary>
        internal Procedure(HL7SDK.Xml.Cda.POCD_MT000040Procedure element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Procedure
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Procedure Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Procedure;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE PriorityCode
        {
            get
            {
                if (Element.priorityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.priorityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.priorityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.priorityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.priorityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The methodCode property.
        /// </summary>
        public HL7SDK.Cda.ICECollection MethodCode
        {
            get
            {
                return new HL7SDK.Cda.CECollection(this, () => { return Element.methodCode; }, (x) => { Element.methodCode = x; });
            }
        }
        
        /// <summary>
        /// The approachSiteCode property.
        /// </summary>
        public HL7SDK.Cda.ICDCollection ApproachSiteCode
        {
            get
            {
                return new HL7SDK.Cda.CDCollection(this, () => { return Element.approachSiteCode; }, (x) => { Element.approachSiteCode = x; });
            }
        }
        
        /// <summary>
        /// The targetSiteCode property.
        /// </summary>
        public HL7SDK.Cda.ICDCollection TargetSiteCode
        {
            get
            {
                return new HL7SDK.Cda.CDCollection(this, () => { return Element.targetSiteCode; }, (x) => { Element.targetSiteCode = x; });
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public HL7SDK.Cda.x_DocumentProcedureMood MoodCode
        {
            get
            {
                return (HL7SDK.Cda.x_DocumentProcedureMood)Element.moodCode;
            }
            set
            {
                Element.moodCode = (HL7SDK.Xml.Cda.x_DocumentProcedureMood)value;
            }
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        public bool NegationInd
        {
            get
            {
                return Element.negationInd;
            }
            set
            {
                Element.negationInd = value;
            }
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        public bool NegationIndSpecified
        {
            get
            {
                return Element.negationIndSpecified;
            }
            set
            {
                Element.negationIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Procedure();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IProcedureCollection interface.
    /// </summary>


    [Guid("e64daee5-156d-4ada-bea3-f2a72c1a63cd")]
    public partial interface IProcedureCollection : ICDACollection, IEnumerable<IProcedure>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IProcedure this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IProcedure value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IProcedure value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IProcedure item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IProcedure item1, IProcedure item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IProcedure Append();
    }
    

    [Guid("3d09c64e-f7b1-4214-b016-1e129ae62977")]
    internal partial class ProcedureCollection : CDAFactoryCollection<HL7SDK.Cda.Procedure, HL7SDK.Xml.Cda.POCD_MT000040Procedure, HL7SDK.Cda.IProcedure>, HL7SDK.Cda.IProcedureCollection
    {
        
        internal ProcedureCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Procedure[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Procedure[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IProductCollection interface.
    /// </summary>

    [Guid("73cf7e74-94a3-43bd-915a-90857c8a5b52")]

    public partial interface IProduct : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Product object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The manufacturedProduct property.
        /// </summary>
        IManufacturedProduct ManufacturedProduct
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Product class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IProduct))]
    [Guid("412fe61c-bad2-49e4-827c-8fecf6671ec8")]
    public partial class Product : CDAElement, INotifyPropertyChanged, IProduct, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Product finalizer.
        /// </summary>
        ~Product()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Product constructor.
        /// </summary>
        public Product()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Product();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Product constructor.
        /// </summary>
        internal Product(HL7SDK.Xml.Cda.POCD_MT000040Product element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Product
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Product Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Product;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The manufacturedProduct property.
        /// </summary>
        public HL7SDK.Cda.IManufacturedProduct ManufacturedProduct
        {
            get
            {
                if (Element.manufacturedProduct == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.manufacturedProduct = new HL7SDK.Xml.Cda.POCD_MT000040ManufacturedProduct();
                    }
                }
                return ElementFactory.Wrap(Element.manufacturedProduct, this) as HL7SDK.Cda.IManufacturedProduct;
            }
            set
            {
                if (value == null)
                {
                    Element.manufacturedProduct = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ManufacturedProduct)value;
                    t.Attach(this);
                    Element.manufacturedProduct = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Product();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IProductCollection interface.
    /// </summary>


    [Guid("7955f594-ca44-4d98-8f40-af6d7f8d9d6e")]
    public partial interface IProductCollection : ICDACollection, IEnumerable<IProduct>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IProduct this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IProduct value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IProduct value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IProduct item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IProduct item1, IProduct item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IProduct Append();
    }
    

    [Guid("9c1c54d1-8b9c-44dc-8b3e-07ed05d95d33")]
    internal partial class ProductCollection : CDAFactoryCollection<HL7SDK.Cda.Product, HL7SDK.Xml.Cda.POCD_MT000040Product, HL7SDK.Cda.IProduct>, HL7SDK.Cda.IProductCollection
    {
        
        internal ProductCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Product[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Product[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IRecordTargetCollection interface.
    /// </summary>

    [Guid("a6c767c8-92c9-4329-9228-1cc29b02ba5d")]

    public partial interface IRecordTarget : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040RecordTarget object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The patientRole property.
        /// </summary>
        IPatientRole PatientRole
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RecordTarget class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRecordTarget))]
    [Guid("a8df510c-084a-45ad-9743-1dd6df8916c7")]
    public partial class RecordTarget : CDAElement, INotifyPropertyChanged, IRecordTarget, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RecordTarget finalizer.
        /// </summary>
        ~RecordTarget()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RecordTarget constructor.
        /// </summary>
        public RecordTarget()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040RecordTarget();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RecordTarget constructor.
        /// </summary>
        internal RecordTarget(HL7SDK.Xml.Cda.POCD_MT000040RecordTarget element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040RecordTarget
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040RecordTarget Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040RecordTarget;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The patientRole property.
        /// </summary>
        public HL7SDK.Cda.IPatientRole PatientRole
        {
            get
            {
                if (Element.patientRole == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.patientRole = new HL7SDK.Xml.Cda.POCD_MT000040PatientRole();
                    }
                }
                return ElementFactory.Wrap(Element.patientRole, this) as HL7SDK.Cda.IPatientRole;
            }
            set
            {
                if (value == null)
                {
                    Element.patientRole = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PatientRole)value;
                    t.Attach(this);
                    Element.patientRole = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040RecordTarget();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRecordTargetCollection interface.
    /// </summary>


    [Guid("cf4331bc-7f0b-45e4-af99-fb1b8551ae33")]
    public partial interface IRecordTargetCollection : ICDACollection, IEnumerable<IRecordTarget>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IRecordTarget this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IRecordTarget value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IRecordTarget value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IRecordTarget item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IRecordTarget item1, IRecordTarget item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IRecordTarget Append();
    }
    

    [Guid("7396c054-0dad-42a0-82eb-2f810ee73384")]
    internal partial class RecordTargetCollection : CDAFactoryCollection<HL7SDK.Cda.RecordTarget, HL7SDK.Xml.Cda.POCD_MT000040RecordTarget, HL7SDK.Cda.IRecordTarget>, HL7SDK.Cda.IRecordTargetCollection
    {
        
        internal RecordTargetCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040RecordTarget[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040RecordTarget[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IReferenceCollection interface.
    /// </summary>

    [Guid("d9df6a1e-178f-4533-a1a9-31a7417d1132")]

    public partial interface IReference : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// The Item property.
        /// </summary>
        object Item { [return: MarshalAs(UnmanagedType.IDispatch)]get; [param:MarshalAs(UnmanagedType.IDispatch)]set; }
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Reference object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The seperatableInd property.
        /// </summary>
        IBL SeperatableInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalObservation.
        /// </summary>
        IExternalObservation AsExternalObservation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalDocument.
        /// </summary>
        IExternalDocument AsExternalDocument
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalAct.
        /// </summary>
        IExternalAct AsExternalAct
        {
            get;
            set;
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalProcedure.
        /// </summary>
        IExternalProcedure AsExternalProcedure
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.x_ActRelationshipExternalReference TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Reference class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IReference))]
    [Guid("0d57308b-2f03-430b-acc8-f0724972aef8")]
    public partial class Reference : CDAElement, INotifyPropertyChanged, IReference, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Reference finalizer.
        /// </summary>
        ~Reference()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Reference constructor.
        /// </summary>
        public Reference()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Reference();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Reference constructor.
        /// </summary>
        internal Reference(HL7SDK.Xml.Cda.POCD_MT000040Reference element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Reference
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Reference Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Reference;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The seperatableInd property.
        /// </summary>
        public HL7SDK.Cda.IBL SeperatableInd
        {
            get
            {
                if (Element.seperatableInd == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.seperatableInd = new HL7SDK.Xml.Cda.BL();
                    }
                }
                return ElementFactory.Wrap(Element.seperatableInd, this) as HL7SDK.Cda.IBL;
            }
            set
            {
                if (value == null)
                {
                    Element.seperatableInd = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.BL)value;
                    t.Attach(this);
                    Element.seperatableInd = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalObservation.
        /// </summary>
        public virtual IExternalObservation AsExternalObservation
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation();
                        return ElementFactory.Wrap(Element.Item, this) as IExternalObservation;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalObservation;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalObservation;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040ExternalObservation expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalDocument.
        /// </summary>
        public virtual IExternalDocument AsExternalDocument
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument();
                        return ElementFactory.Wrap(Element.Item, this) as IExternalDocument;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalDocument;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalDocument;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040ExternalDocument expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalAct.
        /// </summary>
        public virtual IExternalAct AsExternalAct
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040ExternalAct();
                        return ElementFactory.Wrap(Element.Item, this) as IExternalAct;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalAct)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalAct;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalAct)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalAct;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040ExternalAct)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040ExternalAct expected.");
                }
            }
        }
        
        /// <summary>
        /// Represents the Reference.Item value as IExternalProcedure.
        /// </summary>
        public virtual IExternalProcedure AsExternalProcedure
        {
            get
            {
                if (this.Lazy)
                {
                    if (Element.Item == null)
                    {
                        Element.Item = new HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure();
                        return ElementFactory.Wrap(Element.Item, this) as IExternalProcedure;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalProcedure;
                    }
                }
                else
                {
                    if (Element.Item == null)
                    {
                        return null;
                    }
                    else
                    {
                        if (!(Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure)) return null;
                        return ElementFactory.Wrap(Element.Item, this) as IExternalProcedure;
                    }
                }
            }
            set
            {
                if (value == null)
                {
                    Element.Item = null;
                    return;
                    ;
                }
                CDAObject pValue = value as CDAObject;
                if (pValue == null)
                {
                    throw new ArgumentException("Value must be of type CDAObject.");
                }
                if (pValue.element is HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure)
                {
                    Element.Item = pValue.element;
                    pValue.Attach(this);
                }
                else
                {
                    throw new ArgumentException("Cannot accept value of this type. POCD_MT000040ExternalProcedure expected.");
                }
            }
        }
        
        /// <summary>
        /// The Item property.
        /// </summary>
        public Object Item
        {
            get
            {
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040ExternalObservation, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040ExternalDocument, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalAct)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040ExternalAct, this);
                }
                ;
                if (Element.Item is HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure)
                {
                    return ElementFactory.Wrap(Element.Item as HL7SDK.Xml.Cda.POCD_MT000040ExternalProcedure, this);
                }
                ;
                return null;
            }
            set
            {
                if (value is HL7SDK.Cda.ExternalObservation)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.ExternalObservation).Element;
                    return;
                }
                if (value is HL7SDK.Cda.ExternalDocument)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.ExternalDocument).Element;
                    return;
                }
                if (value is HL7SDK.Cda.ExternalAct)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.ExternalAct).Element;
                    return;
                }
                if (value is HL7SDK.Cda.ExternalProcedure)
                {
                    (value as CDAObject).Attach(this);
                    Element.Item = (value as HL7SDK.Cda.ExternalProcedure).Element;
                    return;
                }
                throw new Exception("Unsupported type");
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.x_ActRelationshipExternalReference TypeCode
        {
            get
            {
                return (HL7SDK.Cda.x_ActRelationshipExternalReference)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.x_ActRelationshipExternalReference)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Reference();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IReferenceCollection interface.
    /// </summary>


    [Guid("9f5d4c8d-da71-4619-8007-ad77da704021")]
    public partial interface IReferenceCollection : ICDACollection, IEnumerable<IReference>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IReference this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IReference value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IReference value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IReference item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IReference item1, IReference item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IReference Append();
    }
    

    [Guid("6e7bda34-d745-44a2-b743-1439f4776321")]
    internal partial class ReferenceCollection : CDAFactoryCollection<HL7SDK.Cda.Reference, HL7SDK.Xml.Cda.POCD_MT000040Reference, HL7SDK.Cda.IReference>, HL7SDK.Cda.IReferenceCollection
    {
        
        internal ReferenceCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Reference[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Reference[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IReferenceRangeCollection interface.
    /// </summary>

    [Guid("e30ecba6-188d-4447-a080-bd8f8118891b")]

    public partial interface IReferenceRange : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ReferenceRange object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The observationRange property.
        /// </summary>
        IObservationRange ObservationRange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ReferenceRange class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IReferenceRange))]
    [Guid("be9e13c6-38cf-4852-965e-8d2eb2210b98")]
    public partial class ReferenceRange : CDAElement, INotifyPropertyChanged, IReferenceRange, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ReferenceRange finalizer.
        /// </summary>
        ~ReferenceRange()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ReferenceRange constructor.
        /// </summary>
        public ReferenceRange()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ReferenceRange constructor.
        /// </summary>
        internal ReferenceRange(HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ReferenceRange
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The observationRange property.
        /// </summary>
        public HL7SDK.Cda.IObservationRange ObservationRange
        {
            get
            {
                if (Element.observationRange == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.observationRange = new HL7SDK.Xml.Cda.POCD_MT000040ObservationRange();
                    }
                }
                return ElementFactory.Wrap(Element.observationRange, this) as HL7SDK.Cda.IObservationRange;
            }
            set
            {
                if (value == null)
                {
                    Element.observationRange = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ObservationRange)value;
                    t.Attach(this);
                    Element.observationRange = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IReferenceRangeCollection interface.
    /// </summary>


    [Guid("c90d1cb4-d188-4268-a732-af73369c10b5")]
    public partial interface IReferenceRangeCollection : ICDACollection, IEnumerable<IReferenceRange>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IReferenceRange this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IReferenceRange value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IReferenceRange value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IReferenceRange item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IReferenceRange item1, IReferenceRange item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IReferenceRange Append();
    }
    

    [Guid("650c7e1a-e5de-4b33-b734-df7e82cf6a6f")]
    internal partial class ReferenceRangeCollection : CDAFactoryCollection<HL7SDK.Cda.ReferenceRange, HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange, HL7SDK.Cda.IReferenceRange>, HL7SDK.Cda.IReferenceRangeCollection
    {
        
        internal ReferenceRangeCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ReferenceRange[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IRegionOfInterestCollection interface.
    /// </summary>

    [Guid("f67e8470-803e-4798-8a09-40cf2ab2e8fc")]

    public partial interface IRegionOfInterest : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040RegionOfInterest object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICS Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        IRegionOfInterestvalueCollection Value
        {
            get;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RegionOfInterest class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRegionOfInterest))]
    [Guid("a983cfd4-b636-4d99-9c0c-8caa571c1906")]
    public partial class RegionOfInterest : CDAElement, INotifyPropertyChanged, IRegionOfInterest, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RegionOfInterest finalizer.
        /// </summary>
        ~RegionOfInterest()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RegionOfInterest constructor.
        /// </summary>
        public RegionOfInterest()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RegionOfInterest constructor.
        /// </summary>
        internal RegionOfInterest(HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040RegionOfInterest
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICS Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public HL7SDK.Cda.IRegionOfInterestvalueCollection Value
        {
            get
            {
                return new HL7SDK.Cda.RegionOfInterestvalueCollection(this, () => { return Element.value; }, (x) => { Element.value = x; });
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRegionOfInterestCollection interface.
    /// </summary>


    [Guid("5da86937-3ff8-400c-beb1-4773ddc9c33e")]
    public partial interface IRegionOfInterestCollection : ICDACollection, IEnumerable<IRegionOfInterest>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IRegionOfInterest this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IRegionOfInterest value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IRegionOfInterest value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IRegionOfInterest item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IRegionOfInterest item1, IRegionOfInterest item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IRegionOfInterest Append();
    }
    

    [Guid("a65f7a6a-66f0-4ee0-950d-a396027e9ca4")]
    internal partial class RegionOfInterestCollection : CDAFactoryCollection<HL7SDK.Cda.RegionOfInterest, HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest, HL7SDK.Cda.IRegionOfInterest>, HL7SDK.Cda.IRegionOfInterestCollection
    {
        
        internal RegionOfInterestCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterest[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IRegionOfInterestvalueCollection interface.
    /// </summary>

    [Guid("08e82b71-55d5-44fc-866f-c38ad352d4b5")]

    public partial interface IRegionOfInterestvalue : IHL73Object, ICDAObject, IINT
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040RegionOfInterestvalue object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The unsorted property.
        /// </summary>
        bool Unsorted
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RegionOfInterestvalue class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRegionOfInterestvalue))]
    [Guid("feef0563-4110-43a0-82b1-f81318eab44b")]
    public partial class RegionOfInterestvalue : HL7SDK.Cda.INT, INotifyPropertyChanged, IRegionOfInterestvalue, IINT, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RegionOfInterestvalue finalizer.
        /// </summary>
        ~RegionOfInterestvalue()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RegionOfInterestvalue constructor.
        /// </summary>
        public RegionOfInterestvalue()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RegionOfInterestvalue constructor.
        /// </summary>
        internal RegionOfInterestvalue(HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040RegionOfInterestvalue
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue;
            }
        }
        
        /// <summary>
        /// The unsorted property.
        /// </summary>
        public bool Unsorted
        {
            get
            {
                return Element.unsorted;
            }
            set
            {
                Element.unsorted = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRegionOfInterestvalueCollection interface.
    /// </summary>


    [Guid("cf2e0133-aece-406c-b78a-977acd557b74")]
    public partial interface IRegionOfInterestvalueCollection : ICDACollection, IEnumerable<IRegionOfInterestvalue>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IRegionOfInterestvalue this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IRegionOfInterestvalue value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IRegionOfInterestvalue value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IRegionOfInterestvalue item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IRegionOfInterestvalue item1, IRegionOfInterestvalue item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IRegionOfInterestvalue Append();
    }
    

    [Guid("46adb288-1a16-498d-89ea-5867da7772c3")]
    internal partial class RegionOfInterestvalueCollection : CDAFactoryCollection<HL7SDK.Cda.RegionOfInterestvalue, HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue, HL7SDK.Cda.IRegionOfInterestvalue>, HL7SDK.Cda.IRegionOfInterestvalueCollection
    {
        
        internal RegionOfInterestvalueCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040RegionOfInterestvalue[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IRelatedDocumentCollection interface.
    /// </summary>

    [Guid("90c56c63-3a14-460f-8340-810e61066eab")]

    public partial interface IRelatedDocument : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040RelatedDocument object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The parentDocument property.
        /// </summary>
        IParentDocument ParentDocument
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.x_ActRelationshipDocument TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RelatedDocument class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRelatedDocument))]
    [Guid("cc80cb46-40d3-44b9-9586-a77679ef171e")]
    public partial class RelatedDocument : CDAElement, INotifyPropertyChanged, IRelatedDocument, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RelatedDocument finalizer.
        /// </summary>
        ~RelatedDocument()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RelatedDocument constructor.
        /// </summary>
        public RelatedDocument()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RelatedDocument constructor.
        /// </summary>
        internal RelatedDocument(HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040RelatedDocument
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The parentDocument property.
        /// </summary>
        public HL7SDK.Cda.IParentDocument ParentDocument
        {
            get
            {
                if (Element.parentDocument == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.parentDocument = new HL7SDK.Xml.Cda.POCD_MT000040ParentDocument();
                    }
                }
                return ElementFactory.Wrap(Element.parentDocument, this) as HL7SDK.Cda.IParentDocument;
            }
            set
            {
                if (value == null)
                {
                    Element.parentDocument = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ParentDocument)value;
                    t.Attach(this);
                    Element.parentDocument = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.x_ActRelationshipDocument TypeCode
        {
            get
            {
                return (HL7SDK.Cda.x_ActRelationshipDocument)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.x_ActRelationshipDocument)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRelatedDocumentCollection interface.
    /// </summary>


    [Guid("9f745d69-816e-49f8-8964-70e1ed71f00a")]
    public partial interface IRelatedDocumentCollection : ICDACollection, IEnumerable<IRelatedDocument>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IRelatedDocument this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IRelatedDocument value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IRelatedDocument value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IRelatedDocument item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IRelatedDocument item1, IRelatedDocument item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IRelatedDocument Append();
    }
    

    [Guid("700f9d1c-573f-461f-9ab0-fae5154902b8")]
    internal partial class RelatedDocumentCollection : CDAFactoryCollection<HL7SDK.Cda.RelatedDocument, HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument, HL7SDK.Cda.IRelatedDocument>, HL7SDK.Cda.IRelatedDocumentCollection
    {
        
        internal RelatedDocumentCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040RelatedDocument[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IRelatedEntityCollection interface.
    /// </summary>

    [Guid("ef3cf2b6-63d0-4635-80f6-a1903a6d3ec2")]

    public partial interface IRelatedEntity : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040RelatedEntity object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The relatedPerson property.
        /// </summary>
        IPerson RelatedPerson
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RelatedEntity class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRelatedEntity))]
    [Guid("8d91f1d3-0521-4b9d-af9a-a00fb5050058")]
    public partial class RelatedEntity : CDAElement, INotifyPropertyChanged, IRelatedEntity, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RelatedEntity finalizer.
        /// </summary>
        ~RelatedEntity()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RelatedEntity constructor.
        /// </summary>
        public RelatedEntity()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RelatedEntity constructor.
        /// </summary>
        internal RelatedEntity(HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040RelatedEntity
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The relatedPerson property.
        /// </summary>
        public HL7SDK.Cda.IPerson RelatedPerson
        {
            get
            {
                if (Element.relatedPerson == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.relatedPerson = new HL7SDK.Xml.Cda.POCD_MT000040Person();
                    }
                }
                return ElementFactory.Wrap(Element.relatedPerson, this) as HL7SDK.Cda.IPerson;
            }
            set
            {
                if (value == null)
                {
                    Element.relatedPerson = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Person)value;
                    t.Attach(this);
                    Element.relatedPerson = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRelatedEntityCollection interface.
    /// </summary>


    [Guid("cdf3ab95-ef9d-4ab9-bbed-b3ae1e002104")]
    public partial interface IRelatedEntityCollection : ICDACollection, IEnumerable<IRelatedEntity>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IRelatedEntity this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IRelatedEntity value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IRelatedEntity value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IRelatedEntity item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IRelatedEntity item1, IRelatedEntity item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IRelatedEntity Append();
    }
    

    [Guid("6a40396b-3993-4b4b-9754-490904a9e71d")]
    internal partial class RelatedEntityCollection : CDAFactoryCollection<HL7SDK.Cda.RelatedEntity, HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity, HL7SDK.Cda.IRelatedEntity>, HL7SDK.Cda.IRelatedEntityCollection
    {
        
        internal RelatedEntityCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040RelatedEntity[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IRelatedSubjectCollection interface.
    /// </summary>

    [Guid("75fca908-7f71-4542-a539-45bd569f617d")]

    public partial interface IRelatedSubject : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040RelatedSubject object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        IADCollection Addr
        {
            get;
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        ITELCollection Telecom
        {
            get;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubjectPerson Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.x_DocumentSubject ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RelatedSubject class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRelatedSubject))]
    [Guid("b99837e1-fbe9-42dc-80ea-81b9a29265f0")]
    public partial class RelatedSubject : CDAElement, INotifyPropertyChanged, IRelatedSubject, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RelatedSubject finalizer.
        /// </summary>
        ~RelatedSubject()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RelatedSubject constructor.
        /// </summary>
        public RelatedSubject()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RelatedSubject constructor.
        /// </summary>
        internal RelatedSubject(HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040RelatedSubject
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The addr property.
        /// </summary>
        public HL7SDK.Cda.IADCollection Addr
        {
            get
            {
                return new HL7SDK.Cda.ADCollection(this, () => { return Element.addr; }, (x) => { Element.addr = x; });
            }
        }
        
        /// <summary>
        /// The telecom property.
        /// </summary>
        public HL7SDK.Cda.ITELCollection Telecom
        {
            get
            {
                return new HL7SDK.Cda.TELCollection(this, () => { return Element.telecom; }, (x) => { Element.telecom = x; });
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubjectPerson Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubjectPerson;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.SubjectPerson)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.x_DocumentSubject ClassCode
        {
            get
            {
                return (HL7SDK.Cda.x_DocumentSubject)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.x_DocumentSubject)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRelatedSubjectCollection interface.
    /// </summary>


    [Guid("9897142a-ca24-4611-9592-a50bdfc6e4fd")]
    public partial interface IRelatedSubjectCollection : ICDACollection, IEnumerable<IRelatedSubject>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IRelatedSubject this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IRelatedSubject value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IRelatedSubject value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IRelatedSubject item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IRelatedSubject item1, IRelatedSubject item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IRelatedSubject Append();
    }
    

    [Guid("a6a3cdd1-678d-491f-ba83-70b1e9b1bf61")]
    internal partial class RelatedSubjectCollection : CDAFactoryCollection<HL7SDK.Cda.RelatedSubject, HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject, HL7SDK.Cda.IRelatedSubject>, HL7SDK.Cda.IRelatedSubjectCollection
    {
        
        internal RelatedSubjectCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IResponsiblePartyCollection interface.
    /// </summary>

    [Guid("ea5ee6d0-9c7d-4680-9650-86a99d3ed801")]

    public partial interface IResponsibleParty : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ResponsibleParty object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        IAssignedEntity AssignedEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ResponsibleParty class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IResponsibleParty))]
    [Guid("e3f63943-804b-4dd5-9493-b82a16220b46")]
    public partial class ResponsibleParty : CDAElement, INotifyPropertyChanged, IResponsibleParty, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ResponsibleParty finalizer.
        /// </summary>
        ~ResponsibleParty()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ResponsibleParty constructor.
        /// </summary>
        public ResponsibleParty()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ResponsibleParty constructor.
        /// </summary>
        internal ResponsibleParty(HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ResponsibleParty
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The assignedEntity property.
        /// </summary>
        public HL7SDK.Cda.IAssignedEntity AssignedEntity
        {
            get
            {
                if (Element.assignedEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.assignedEntity = new HL7SDK.Xml.Cda.POCD_MT000040AssignedEntity();
                    }
                }
                return ElementFactory.Wrap(Element.assignedEntity, this) as HL7SDK.Cda.IAssignedEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.assignedEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.AssignedEntity)value;
                    t.Attach(this);
                    Element.assignedEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IResponsiblePartyCollection interface.
    /// </summary>


    [Guid("b56c303a-ce9f-472b-98aa-bfb9bd0f3cb9")]
    public partial interface IResponsiblePartyCollection : ICDACollection, IEnumerable<IResponsibleParty>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IResponsibleParty this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IResponsibleParty value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IResponsibleParty value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IResponsibleParty item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IResponsibleParty item1, IResponsibleParty item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IResponsibleParty Append();
    }
    

    [Guid("cf4adb0d-1f31-4548-b248-f025d84f8853")]
    internal partial class ResponsiblePartyCollection : CDAFactoryCollection<HL7SDK.Cda.ResponsibleParty, HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty, HL7SDK.Cda.IResponsibleParty>, HL7SDK.Cda.IResponsiblePartyCollection
    {
        
        internal ResponsiblePartyCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ResponsibleParty[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISectionCollection interface.
    /// </summary>

    [Guid("61cc13de-d1a7-4930-b082-d4c79243c90a")]

    public partial interface ISection : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Section object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        III Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The title property.
        /// </summary>
        IST Title
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IStrucDocText Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        ICE ConfidentialityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The entry property.
        /// </summary>
        IEntryCollection Entry
        {
            get;
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        IComponent5Collection Component
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Section class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISection))]
    [Guid("aa755944-f292-409a-bd15-c3cc8b2e2729")]
    public partial class Section : CDAElement, INotifyPropertyChanged, ISection, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Section finalizer.
        /// </summary>
        ~Section()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Section constructor.
        /// </summary>
        public Section()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Section();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Section constructor.
        /// </summary>
        internal Section(HL7SDK.Xml.Cda.POCD_MT000040Section element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Section
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Section Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Section;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.III Id
        {
            get
            {
                if (Element.id == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.id = new HL7SDK.Xml.Cda.II();
                    }
                }
                return ElementFactory.Wrap(Element.id, this) as HL7SDK.Cda.III;
            }
            set
            {
                if (value == null)
                {
                    Element.id = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.II)value;
                    t.Attach(this);
                    Element.id = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The title property.
        /// </summary>
        public HL7SDK.Cda.IST Title
        {
            get
            {
                if (Element.title == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.title = new HL7SDK.Xml.Cda.ST();
                    }
                }
                return ElementFactory.Wrap(Element.title, this) as HL7SDK.Cda.IST;
            }
            set
            {
                if (value == null)
                {
                    Element.title = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ST)value;
                    t.Attach(this);
                    Element.title = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocText Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.StrucDocText();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IStrucDocText;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocText)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ConfidentialityCode
        {
            get
            {
                if (Element.confidentialityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.confidentialityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.confidentialityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.confidentialityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.confidentialityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The entry property.
        /// </summary>
        public HL7SDK.Cda.IEntryCollection Entry
        {
            get
            {
                return new HL7SDK.Cda.EntryCollection(this, () => { return Element.entry; }, (x) => { Element.entry = x; });
            }
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        public HL7SDK.Cda.IComponent5Collection Component
        {
            get
            {
                return new HL7SDK.Cda.Component5Collection(this, () => { return Element.component; }, (x) => { Element.component = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Section();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISectionCollection interface.
    /// </summary>


    [Guid("58176d8a-4c72-416b-b8e6-183611650097")]
    public partial interface ISectionCollection : ICDACollection, IEnumerable<ISection>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISection this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISection value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISection value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISection item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISection item1, ISection item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISection Append();
    }
    

    [Guid("c1990a8f-927e-4657-b877-f252464b24a5")]
    internal partial class SectionCollection : CDAFactoryCollection<HL7SDK.Cda.Section, HL7SDK.Xml.Cda.POCD_MT000040Section, HL7SDK.Cda.ISection>, HL7SDK.Cda.ISectionCollection
    {
        
        internal SectionCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Section[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Section[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IServiceEventCollection interface.
    /// </summary>

    [Guid("e7bb2c1c-c178-4890-9ff2-a9edb9a07241")]

    public partial interface IServiceEvent : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040ServiceEvent object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICE Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        IIVL_TS EffectiveTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer1Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ServiceEvent class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IServiceEvent))]
    [Guid("3f0837ab-d9d5-4508-bed3-9ede54e2afe4")]
    public partial class ServiceEvent : CDAElement, INotifyPropertyChanged, IServiceEvent, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ServiceEvent finalizer.
        /// </summary>
        ~ServiceEvent()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ServiceEvent constructor.
        /// </summary>
        public ServiceEvent()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ServiceEvent constructor.
        /// </summary>
        internal ServiceEvent(HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040ServiceEvent
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICE Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS EffectiveTime
        {
            get
            {
                if (Element.effectiveTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.effectiveTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.effectiveTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.effectiveTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.effectiveTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer1Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer1Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IServiceEventCollection interface.
    /// </summary>


    [Guid("8ade6af0-0a62-4d82-a0d5-c210ef0d36ad")]
    public partial interface IServiceEventCollection : ICDACollection, IEnumerable<IServiceEvent>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IServiceEvent this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IServiceEvent value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IServiceEvent value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IServiceEvent item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IServiceEvent item1, IServiceEvent item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IServiceEvent Append();
    }
    

    [Guid("f85230fc-cde9-42c6-bb70-9ef64a61a8be")]
    internal partial class ServiceEventCollection : CDAFactoryCollection<HL7SDK.Cda.ServiceEvent, HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent, HL7SDK.Cda.IServiceEvent>, HL7SDK.Cda.IServiceEventCollection
    {
        
        internal ServiceEventCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040ServiceEvent[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISpecimenCollection interface.
    /// </summary>

    [Guid("893681d7-2d87-4831-b0b8-5deb3f7f6b2f")]

    public partial interface ISpecimen : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Specimen object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The specimenRole property.
        /// </summary>
        ISpecimenRole SpecimenRole
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        string TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Specimen class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISpecimen))]
    [Guid("ddd64355-287e-4599-9eb8-bf240fd1d02f")]
    public partial class Specimen : CDAElement, INotifyPropertyChanged, ISpecimen, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Specimen finalizer.
        /// </summary>
        ~Specimen()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Specimen constructor.
        /// </summary>
        public Specimen()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Specimen();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Specimen constructor.
        /// </summary>
        internal Specimen(HL7SDK.Xml.Cda.POCD_MT000040Specimen element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Specimen
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Specimen Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Specimen;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The specimenRole property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenRole SpecimenRole
        {
            get
            {
                if (Element.specimenRole == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.specimenRole = new HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole();
                    }
                }
                return ElementFactory.Wrap(Element.specimenRole, this) as HL7SDK.Cda.ISpecimenRole;
            }
            set
            {
                if (value == null)
                {
                    Element.specimenRole = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.SpecimenRole)value;
                    t.Attach(this);
                    Element.specimenRole = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public string TypeCode
        {
            get
            {
                return Element.typeCode;
            }
            set
            {
                Element.typeCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Specimen();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISpecimenCollection interface.
    /// </summary>


    [Guid("01a8e112-7934-4459-85fc-8f53b30bba30")]
    public partial interface ISpecimenCollection : ICDACollection, IEnumerable<ISpecimen>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISpecimen this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISpecimen value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISpecimen value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISpecimen item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISpecimen item1, ISpecimen item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISpecimen Append();
    }
    

    [Guid("45b2779b-1b8c-4505-b102-cc2b40561c00")]
    internal partial class SpecimenCollection : CDAFactoryCollection<HL7SDK.Cda.Specimen, HL7SDK.Xml.Cda.POCD_MT000040Specimen, HL7SDK.Cda.ISpecimen>, HL7SDK.Cda.ISpecimenCollection
    {
        
        internal SpecimenCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Specimen[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Specimen[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISpecimenRoleCollection interface.
    /// </summary>

    [Guid("51dd8dd3-abda-44a9-acea-0cd75a7178ee")]

    public partial interface ISpecimenRole : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040SpecimenRole object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The specimenPlayingEntity property.
        /// </summary>
        IPlayingEntity SpecimenPlayingEntity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.RoleClassSpecimen ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        bool ClassCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SpecimenRole class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISpecimenRole))]
    [Guid("f12253fe-5284-4371-ac26-593f24fd9cde")]
    public partial class SpecimenRole : CDAElement, INotifyPropertyChanged, ISpecimenRole, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SpecimenRole finalizer.
        /// </summary>
        ~SpecimenRole()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SpecimenRole constructor.
        /// </summary>
        public SpecimenRole()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SpecimenRole constructor.
        /// </summary>
        internal SpecimenRole(HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040SpecimenRole
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The specimenPlayingEntity property.
        /// </summary>
        public HL7SDK.Cda.IPlayingEntity SpecimenPlayingEntity
        {
            get
            {
                if (Element.specimenPlayingEntity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.specimenPlayingEntity = new HL7SDK.Xml.Cda.POCD_MT000040PlayingEntity();
                    }
                }
                return ElementFactory.Wrap(Element.specimenPlayingEntity, this) as HL7SDK.Cda.IPlayingEntity;
            }
            set
            {
                if (value == null)
                {
                    Element.specimenPlayingEntity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PlayingEntity)value;
                    t.Attach(this);
                    Element.specimenPlayingEntity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.RoleClassSpecimen ClassCode
        {
            get
            {
                return (HL7SDK.Cda.RoleClassSpecimen)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.RoleClassSpecimen)value;
                Element.classCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The classCodeSpecified property.
        /// </summary>
        public bool ClassCodeSpecified
        {
            get
            {
                return Element.classCodeSpecified;
            }
            set
            {
                Element.classCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISpecimenRoleCollection interface.
    /// </summary>


    [Guid("092d92a4-6f57-4219-9b3a-f68d01efcb7a")]
    public partial interface ISpecimenRoleCollection : ICDACollection, IEnumerable<ISpecimenRole>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISpecimenRole this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISpecimenRole value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISpecimenRole value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISpecimenRole item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISpecimenRole item1, ISpecimenRole item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISpecimenRole Append();
    }
    

    [Guid("8dc7c6ca-d9a0-4106-b5e6-92ad000b88ca")]
    internal partial class SpecimenRoleCollection : CDAFactoryCollection<HL7SDK.Cda.SpecimenRole, HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole, HL7SDK.Cda.ISpecimenRole>, HL7SDK.Cda.ISpecimenRoleCollection
    {
        
        internal SpecimenRoleCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040SpecimenRole[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IStructuredBodyCollection interface.
    /// </summary>

    [Guid("d522605a-c399-4707-83cb-b31daf716a0a")]

    public partial interface IStructuredBody : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040StructuredBody object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        ICE ConfidentialityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        ICS LanguageCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        IComponent3Collection Component
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        string MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StructuredBody class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStructuredBody))]
    [Guid("6144f8da-0587-4058-8252-b13bcb380649")]
    public partial class StructuredBody : CDAElement, INotifyPropertyChanged, IStructuredBody, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StructuredBody finalizer.
        /// </summary>
        ~StructuredBody()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StructuredBody constructor.
        /// </summary>
        public StructuredBody()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040StructuredBody();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StructuredBody constructor.
        /// </summary>
        internal StructuredBody(HL7SDK.Xml.Cda.POCD_MT000040StructuredBody element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040StructuredBody
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040StructuredBody Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040StructuredBody;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The confidentialityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE ConfidentialityCode
        {
            get
            {
                if (Element.confidentialityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.confidentialityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.confidentialityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.confidentialityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.confidentialityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The languageCode property.
        /// </summary>
        public HL7SDK.Cda.ICS LanguageCode
        {
            get
            {
                if (Element.languageCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.languageCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.languageCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.languageCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.languageCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The component property.
        /// </summary>
        public HL7SDK.Cda.IComponent3Collection Component
        {
            get
            {
                return new HL7SDK.Cda.Component3Collection(this, () => { return Element.component; }, (x) => { Element.component = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public string MoodCode
        {
            get
            {
                return Element.moodCode;
            }
            set
            {
                Element.moodCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040StructuredBody();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStructuredBodyCollection interface.
    /// </summary>


    [Guid("774f56c5-b5ce-47bb-be7e-46f33126dec0")]
    public partial interface IStructuredBodyCollection : ICDACollection, IEnumerable<IStructuredBody>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IStructuredBody this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IStructuredBody value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IStructuredBody value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IStructuredBody item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IStructuredBody item1, IStructuredBody item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IStructuredBody Append();
    }
    

    [Guid("b593a71a-acae-4af0-9df8-c8332ce18d82")]
    internal partial class StructuredBodyCollection : CDAFactoryCollection<HL7SDK.Cda.StructuredBody, HL7SDK.Xml.Cda.POCD_MT000040StructuredBody, HL7SDK.Cda.IStructuredBody>, HL7SDK.Cda.IStructuredBodyCollection
    {
        
        internal StructuredBodyCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040StructuredBody[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040StructuredBody[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISubjectCollection interface.
    /// </summary>

    [Guid("3fb40adb-3ff1-40b1-8880-e69af51d1822")]

    public partial interface ISubject : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Subject object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The awarenessCode property.
        /// </summary>
        ICE AwarenessCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The relatedSubject property.
        /// </summary>
        IRelatedSubject RelatedSubject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        HL7SDK.Cda.ParticipationTargetSubject TypeCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        bool TypeCodeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        string ContextControlCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Subject class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISubject))]
    [Guid("8cd5a7d5-ccdc-410c-80b8-3f02adb99a11")]
    public partial class Subject : CDAElement, INotifyPropertyChanged, ISubject, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Subject finalizer.
        /// </summary>
        ~Subject()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Subject constructor.
        /// </summary>
        public Subject()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Subject constructor.
        /// </summary>
        internal Subject(HL7SDK.Xml.Cda.POCD_MT000040Subject element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Subject
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Subject Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Subject;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The awarenessCode property.
        /// </summary>
        public HL7SDK.Cda.ICE AwarenessCode
        {
            get
            {
                if (Element.awarenessCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.awarenessCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.awarenessCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.awarenessCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.awarenessCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The relatedSubject property.
        /// </summary>
        public HL7SDK.Cda.IRelatedSubject RelatedSubject
        {
            get
            {
                if (Element.relatedSubject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.relatedSubject = new HL7SDK.Xml.Cda.POCD_MT000040RelatedSubject();
                    }
                }
                return ElementFactory.Wrap(Element.relatedSubject, this) as HL7SDK.Cda.IRelatedSubject;
            }
            set
            {
                if (value == null)
                {
                    Element.relatedSubject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.RelatedSubject)value;
                    t.Attach(this);
                    Element.relatedSubject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The typeCode property.
        /// </summary>
        public HL7SDK.Cda.ParticipationTargetSubject TypeCode
        {
            get
            {
                return (HL7SDK.Cda.ParticipationTargetSubject)Element.typeCode;
            }
            set
            {
                Element.typeCode = (HL7SDK.Xml.Cda.ParticipationTargetSubject)value;
                Element.typeCodeSpecified = true;
            }
        }
        
        /// <summary>
        /// The typeCodeSpecified property.
        /// </summary>
        public bool TypeCodeSpecified
        {
            get
            {
                return Element.typeCodeSpecified;
            }
            set
            {
                Element.typeCodeSpecified = value;
            }
        }
        
        /// <summary>
        /// The contextControlCode property.
        /// </summary>
        public string ContextControlCode
        {
            get
            {
                return Element.contextControlCode;
            }
            set
            {
                Element.contextControlCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISubjectCollection interface.
    /// </summary>


    [Guid("35394049-e68e-4585-b313-c3d340c2ec01")]
    public partial interface ISubjectCollection : ICDACollection, IEnumerable<ISubject>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISubject this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISubject value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISubject value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISubject item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISubject item1, ISubject item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISubject Append();
    }
    

    [Guid("38417889-1eda-4054-9ab1-b42d0edc47a1")]
    internal partial class SubjectCollection : CDAFactoryCollection<HL7SDK.Cda.Subject, HL7SDK.Xml.Cda.POCD_MT000040Subject, HL7SDK.Cda.ISubject>, HL7SDK.Cda.ISubjectCollection
    {
        
        internal SubjectCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Subject[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Subject[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISubjectPersonCollection interface.
    /// </summary>

    [Guid("58c14c92-7c84-4557-831e-c35e4fef547a")]

    public partial interface ISubjectPerson : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040SubjectPerson object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        IPNCollection Name
        {
            get;
        }
        
        /// <summary>
        /// The administrativeGenderCode property.
        /// </summary>
        ICE AdministrativeGenderCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The birthTime property.
        /// </summary>
        ITS BirthTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        string DeterminerCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SubjectPerson class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISubjectPerson))]
    [Guid("c7e26e93-0eea-49b5-add5-ed7a13d55a5c")]
    public partial class SubjectPerson : CDAElement, INotifyPropertyChanged, ISubjectPerson, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SubjectPerson finalizer.
        /// </summary>
        ~SubjectPerson()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SubjectPerson constructor.
        /// </summary>
        public SubjectPerson()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SubjectPerson constructor.
        /// </summary>
        internal SubjectPerson(HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040SubjectPerson
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public HL7SDK.Cda.IPNCollection Name
        {
            get
            {
                return new HL7SDK.Cda.PNCollection(this, () => { return Element.name; }, (x) => { Element.name = x; });
            }
        }
        
        /// <summary>
        /// The administrativeGenderCode property.
        /// </summary>
        public HL7SDK.Cda.ICE AdministrativeGenderCode
        {
            get
            {
                if (Element.administrativeGenderCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.administrativeGenderCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.administrativeGenderCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.administrativeGenderCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.administrativeGenderCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The birthTime property.
        /// </summary>
        public HL7SDK.Cda.ITS BirthTime
        {
            get
            {
                if (Element.birthTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.birthTime = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.birthTime, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.birthTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.birthTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The determinerCode property.
        /// </summary>
        public string DeterminerCode
        {
            get
            {
                return Element.determinerCode;
            }
            set
            {
                Element.determinerCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISubjectPersonCollection interface.
    /// </summary>


    [Guid("12ff10d0-c52d-4ab6-9547-3911af44f9c1")]
    public partial interface ISubjectPersonCollection : ICDACollection, IEnumerable<ISubjectPerson>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISubjectPerson this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISubjectPerson value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISubjectPerson value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISubjectPerson item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISubjectPerson item1, ISubjectPerson item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISubjectPerson Append();
    }
    

    [Guid("03ef6a21-e2b6-4893-96ca-620010553676")]
    internal partial class SubjectPersonCollection : CDAFactoryCollection<HL7SDK.Cda.SubjectPerson, HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson, HL7SDK.Cda.ISubjectPerson>, HL7SDK.Cda.ISubjectPersonCollection
    {
        
        internal SubjectPersonCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040SubjectPerson[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISubstanceAdministrationCollection interface.
    /// </summary>

    [Guid("1693bfdc-917b-4c35-9881-a543020e40e4")]

    public partial interface ISubstanceAdministration : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040SubstanceAdministration object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        ISXCM_TSCollection EffectiveTime
        {
            get;
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        ICE PriorityCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The repeatNumber property.
        /// </summary>
        IIVL_INT RepeatNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The routeCode property.
        /// </summary>
        ICE RouteCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The approachSiteCode property.
        /// </summary>
        ICDCollection ApproachSiteCode
        {
            get;
        }
        
        /// <summary>
        /// The doseQuantity property.
        /// </summary>
        IIVL_PQ DoseQuantity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rateQuantity property.
        /// </summary>
        IIVL_PQ RateQuantity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxDoseQuantity property.
        /// </summary>
        IRTO_PQ_PQ MaxDoseQuantity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The administrationUnitCode property.
        /// </summary>
        ICE AdministrationUnitCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The consumable property.
        /// </summary>
        IConsumable Consumable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        string ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        HL7SDK.Cda.x_DocumentSubstanceMood MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        bool NegationInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        bool NegationIndSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SubstanceAdministration class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISubstanceAdministration))]
    [Guid("a92c2ab8-643e-4da2-8953-bc91552b5aec")]
    public partial class SubstanceAdministration : CDAElement, INotifyPropertyChanged, ISubstanceAdministration, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SubstanceAdministration finalizer.
        /// </summary>
        ~SubstanceAdministration()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SubstanceAdministration constructor.
        /// </summary>
        public SubstanceAdministration()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SubstanceAdministration constructor.
        /// </summary>
        internal SubstanceAdministration(HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040SubstanceAdministration
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.ISXCM_TSCollection EffectiveTime
        {
            get
            {
                return new HL7SDK.Cda.SXCM_TSCollection(this, () => { return Element.effectiveTime; }, (x) => { Element.effectiveTime = x; });
            }
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        public HL7SDK.Cda.ICE PriorityCode
        {
            get
            {
                if (Element.priorityCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.priorityCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.priorityCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.priorityCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.priorityCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The repeatNumber property.
        /// </summary>
        public HL7SDK.Cda.IIVL_INT RepeatNumber
        {
            get
            {
                if (Element.repeatNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.repeatNumber = new HL7SDK.Xml.Cda.IVL_INT();
                    }
                }
                return ElementFactory.Wrap(Element.repeatNumber, this) as HL7SDK.Cda.IIVL_INT;
            }
            set
            {
                if (value == null)
                {
                    Element.repeatNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_INT)value;
                    t.Attach(this);
                    Element.repeatNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The routeCode property.
        /// </summary>
        public HL7SDK.Cda.ICE RouteCode
        {
            get
            {
                if (Element.routeCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.routeCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.routeCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.routeCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.routeCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The approachSiteCode property.
        /// </summary>
        public HL7SDK.Cda.ICDCollection ApproachSiteCode
        {
            get
            {
                return new HL7SDK.Cda.CDCollection(this, () => { return Element.approachSiteCode; }, (x) => { Element.approachSiteCode = x; });
            }
        }
        
        /// <summary>
        /// The doseQuantity property.
        /// </summary>
        public HL7SDK.Cda.IIVL_PQ DoseQuantity
        {
            get
            {
                if (Element.doseQuantity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.doseQuantity = new HL7SDK.Xml.Cda.IVL_PQ();
                    }
                }
                return ElementFactory.Wrap(Element.doseQuantity, this) as HL7SDK.Cda.IIVL_PQ;
            }
            set
            {
                if (value == null)
                {
                    Element.doseQuantity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_PQ)value;
                    t.Attach(this);
                    Element.doseQuantity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The rateQuantity property.
        /// </summary>
        public HL7SDK.Cda.IIVL_PQ RateQuantity
        {
            get
            {
                if (Element.rateQuantity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.rateQuantity = new HL7SDK.Xml.Cda.IVL_PQ();
                    }
                }
                return ElementFactory.Wrap(Element.rateQuantity, this) as HL7SDK.Cda.IIVL_PQ;
            }
            set
            {
                if (value == null)
                {
                    Element.rateQuantity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_PQ)value;
                    t.Attach(this);
                    Element.rateQuantity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The maxDoseQuantity property.
        /// </summary>
        public HL7SDK.Cda.IRTO_PQ_PQ MaxDoseQuantity
        {
            get
            {
                if (Element.maxDoseQuantity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.maxDoseQuantity = new HL7SDK.Xml.Cda.RTO_PQ_PQ();
                    }
                }
                return ElementFactory.Wrap(Element.maxDoseQuantity, this) as HL7SDK.Cda.IRTO_PQ_PQ;
            }
            set
            {
                if (value == null)
                {
                    Element.maxDoseQuantity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.RTO_PQ_PQ)value;
                    t.Attach(this);
                    Element.maxDoseQuantity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The administrationUnitCode property.
        /// </summary>
        public HL7SDK.Cda.ICE AdministrationUnitCode
        {
            get
            {
                if (Element.administrationUnitCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.administrationUnitCode = new HL7SDK.Xml.Cda.CE();
                    }
                }
                return ElementFactory.Wrap(Element.administrationUnitCode, this) as HL7SDK.Cda.ICE;
            }
            set
            {
                if (value == null)
                {
                    Element.administrationUnitCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CE)value;
                    t.Attach(this);
                    Element.administrationUnitCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The consumable property.
        /// </summary>
        public HL7SDK.Cda.IConsumable Consumable
        {
            get
            {
                if (Element.consumable == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.consumable = new HL7SDK.Xml.Cda.POCD_MT000040Consumable();
                    }
                }
                return ElementFactory.Wrap(Element.consumable, this) as HL7SDK.Cda.IConsumable;
            }
            set
            {
                if (value == null)
                {
                    Element.consumable = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Consumable)value;
                    t.Attach(this);
                    Element.consumable = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public string ClassCode
        {
            get
            {
                return Element.classCode;
            }
            set
            {
                Element.classCode = value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public HL7SDK.Cda.x_DocumentSubstanceMood MoodCode
        {
            get
            {
                return (HL7SDK.Cda.x_DocumentSubstanceMood)Element.moodCode;
            }
            set
            {
                Element.moodCode = (HL7SDK.Xml.Cda.x_DocumentSubstanceMood)value;
            }
        }
        
        /// <summary>
        /// The negationInd property.
        /// </summary>
        public bool NegationInd
        {
            get
            {
                return Element.negationInd;
            }
            set
            {
                Element.negationInd = value;
            }
        }
        
        /// <summary>
        /// The negationIndSpecified property.
        /// </summary>
        public bool NegationIndSpecified
        {
            get
            {
                return Element.negationIndSpecified;
            }
            set
            {
                Element.negationIndSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISubstanceAdministrationCollection interface.
    /// </summary>


    [Guid("f5ab2f4f-fde9-491d-9acd-669c616584dd")]
    public partial interface ISubstanceAdministrationCollection : ICDACollection, IEnumerable<ISubstanceAdministration>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISubstanceAdministration this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISubstanceAdministration value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISubstanceAdministration value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISubstanceAdministration item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISubstanceAdministration item1, ISubstanceAdministration item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISubstanceAdministration Append();
    }
    

    [Guid("3612d307-916e-4417-8748-e3560cb3206b")]
    internal partial class SubstanceAdministrationCollection : CDAFactoryCollection<HL7SDK.Cda.SubstanceAdministration, HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration, HL7SDK.Cda.ISubstanceAdministration>, HL7SDK.Cda.ISubstanceAdministrationCollection
    {
        
        internal SubstanceAdministrationCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040SubstanceAdministration[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISupplyCollection interface.
    /// </summary>

    [Guid("eaf44aec-b7e0-4576-a68a-d83d9dd3081e")]

    public partial interface ISupply : IHL73Object, ICDAObject, ICDAElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA POCD_MT000040Supply object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        new ICSCollection RealmCode
        {
            get;
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        new IInfrastructureRoottypeId TypeId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        new IIICollection TemplateId
        {
            get;
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        IIICollection Id
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        ICD Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        IED Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        ICS StatusCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        ISXCM_TSCollection EffectiveTime
        {
            get;
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        ICECollection PriorityCode
        {
            get;
        }
        
        /// <summary>
        /// The repeatNumber property.
        /// </summary>
        IIVL_INT RepeatNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The independentInd property.
        /// </summary>
        IBL IndependentInd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The quantity property.
        /// </summary>
        IPQ Quantity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The expectedUseTime property.
        /// </summary>
        IIVL_TS ExpectedUseTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        ISubject Subject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        ISpecimenCollection Specimen
        {
            get;
        }
        
        /// <summary>
        /// The product property.
        /// </summary>
        IProduct Product
        {
            get;
            set;
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        IPerformer2Collection Performer
        {
            get;
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        IAuthorCollection Author
        {
            get;
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        IInformant12Collection Informant
        {
            get;
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        IParticipant2Collection Participant
        {
            get;
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        IEntryRelationshipCollection EntryRelationship
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        IReferenceCollection Reference
        {
            get;
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        IPreconditionCollection Precondition
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        HL7SDK.Cda.ActClassSupply ClassCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        HL7SDK.Cda.x_DocumentSubstanceMood MoodCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The Supply class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISupply))]
    [Guid("db4c2a71-b425-4288-b91f-7180cede57c4")]
    public partial class Supply : CDAElement, INotifyPropertyChanged, ISupply, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// Supply finalizer.
        /// </summary>
        ~Supply()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// Supply constructor.
        /// </summary>
        public Supply()
        {
            element = new HL7SDK.Xml.Cda.POCD_MT000040Supply();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Supply constructor.
        /// </summary>
        internal Supply(HL7SDK.Xml.Cda.POCD_MT000040Supply element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type POCD_MT000040Supply
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.POCD_MT000040Supply Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.POCD_MT000040Supply;
            }
        }
        
        /// <summary>
        /// The realmCode property.
        /// </summary>
        public override HL7SDK.Cda.ICSCollection RealmCode
        {
            get
            {
                return new HL7SDK.Cda.CSCollection(this, () => { return Element.realmCode; }, (x) => { Element.realmCode = x; });
            }
        }
        
        /// <summary>
        /// The typeId property.
        /// </summary>
        public override HL7SDK.Cda.IInfrastructureRoottypeId TypeId
        {
            get
            {
                if (Element.typeId == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.typeId = new HL7SDK.Xml.Cda.POCD_MT000040InfrastructureRoottypeId();
                    }
                }
                return ElementFactory.Wrap(Element.typeId, this) as HL7SDK.Cda.IInfrastructureRoottypeId;
            }
            set
            {
                if (value == null)
                {
                    Element.typeId = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.InfrastructureRoottypeId)value;
                    t.Attach(this);
                    Element.typeId = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The templateId property.
        /// </summary>
        public override HL7SDK.Cda.IIICollection TemplateId
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.templateId; }, (x) => { Element.templateId = x; });
            }
        }
        
        /// <summary>
        /// The id property.
        /// </summary>
        public HL7SDK.Cda.IIICollection Id
        {
            get
            {
                return new HL7SDK.Cda.IICollection(this, () => { return Element.id; }, (x) => { Element.id = x; });
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public HL7SDK.Cda.ICD Code
        {
            get
            {
                if (Element.code == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.code = new HL7SDK.Xml.Cda.CD();
                    }
                }
                return ElementFactory.Wrap(Element.code, this) as HL7SDK.Cda.ICD;
            }
            set
            {
                if (value == null)
                {
                    Element.code = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CD)value;
                    t.Attach(this);
                    Element.code = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The text property.
        /// </summary>
        public HL7SDK.Cda.IED Text
        {
            get
            {
                if (Element.text == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.text = new HL7SDK.Xml.Cda.ED();
                    }
                }
                return ElementFactory.Wrap(Element.text, this) as HL7SDK.Cda.IED;
            }
            set
            {
                if (value == null)
                {
                    Element.text = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.ED)value;
                    t.Attach(this);
                    Element.text = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The statusCode property.
        /// </summary>
        public HL7SDK.Cda.ICS StatusCode
        {
            get
            {
                if (Element.statusCode == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.statusCode = new HL7SDK.Xml.Cda.CS();
                    }
                }
                return ElementFactory.Wrap(Element.statusCode, this) as HL7SDK.Cda.ICS;
            }
            set
            {
                if (value == null)
                {
                    Element.statusCode = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.CS)value;
                    t.Attach(this);
                    Element.statusCode = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The effectiveTime property.
        /// </summary>
        public HL7SDK.Cda.ISXCM_TSCollection EffectiveTime
        {
            get
            {
                return new HL7SDK.Cda.SXCM_TSCollection(this, () => { return Element.effectiveTime; }, (x) => { Element.effectiveTime = x; });
            }
        }
        
        /// <summary>
        /// The priorityCode property.
        /// </summary>
        public HL7SDK.Cda.ICECollection PriorityCode
        {
            get
            {
                return new HL7SDK.Cda.CECollection(this, () => { return Element.priorityCode; }, (x) => { Element.priorityCode = x; });
            }
        }
        
        /// <summary>
        /// The repeatNumber property.
        /// </summary>
        public HL7SDK.Cda.IIVL_INT RepeatNumber
        {
            get
            {
                if (Element.repeatNumber == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.repeatNumber = new HL7SDK.Xml.Cda.IVL_INT();
                    }
                }
                return ElementFactory.Wrap(Element.repeatNumber, this) as HL7SDK.Cda.IIVL_INT;
            }
            set
            {
                if (value == null)
                {
                    Element.repeatNumber = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_INT)value;
                    t.Attach(this);
                    Element.repeatNumber = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The independentInd property.
        /// </summary>
        public HL7SDK.Cda.IBL IndependentInd
        {
            get
            {
                if (Element.independentInd == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.independentInd = new HL7SDK.Xml.Cda.BL();
                    }
                }
                return ElementFactory.Wrap(Element.independentInd, this) as HL7SDK.Cda.IBL;
            }
            set
            {
                if (value == null)
                {
                    Element.independentInd = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.BL)value;
                    t.Attach(this);
                    Element.independentInd = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The quantity property.
        /// </summary>
        public HL7SDK.Cda.IPQ Quantity
        {
            get
            {
                if (Element.quantity == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.quantity = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.quantity, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.quantity = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.quantity = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The expectedUseTime property.
        /// </summary>
        public HL7SDK.Cda.IIVL_TS ExpectedUseTime
        {
            get
            {
                if (Element.expectedUseTime == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.expectedUseTime = new HL7SDK.Xml.Cda.IVL_TS();
                    }
                }
                return ElementFactory.Wrap(Element.expectedUseTime, this) as HL7SDK.Cda.IIVL_TS;
            }
            set
            {
                if (value == null)
                {
                    Element.expectedUseTime = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.IVL_TS)value;
                    t.Attach(this);
                    Element.expectedUseTime = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The subject property.
        /// </summary>
        public HL7SDK.Cda.ISubject Subject
        {
            get
            {
                if (Element.subject == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.subject = new HL7SDK.Xml.Cda.POCD_MT000040Subject();
                    }
                }
                return ElementFactory.Wrap(Element.subject, this) as HL7SDK.Cda.ISubject;
            }
            set
            {
                if (value == null)
                {
                    Element.subject = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Subject)value;
                    t.Attach(this);
                    Element.subject = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The specimen property.
        /// </summary>
        public HL7SDK.Cda.ISpecimenCollection Specimen
        {
            get
            {
                return new HL7SDK.Cda.SpecimenCollection(this, () => { return Element.specimen; }, (x) => { Element.specimen = x; });
            }
        }
        
        /// <summary>
        /// The product property.
        /// </summary>
        public HL7SDK.Cda.IProduct Product
        {
            get
            {
                if (Element.product == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.product = new HL7SDK.Xml.Cda.POCD_MT000040Product();
                    }
                }
                return ElementFactory.Wrap(Element.product, this) as HL7SDK.Cda.IProduct;
            }
            set
            {
                if (value == null)
                {
                    Element.product = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.Product)value;
                    t.Attach(this);
                    Element.product = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The performer property.
        /// </summary>
        public HL7SDK.Cda.IPerformer2Collection Performer
        {
            get
            {
                return new HL7SDK.Cda.Performer2Collection(this, () => { return Element.performer; }, (x) => { Element.performer = x; });
            }
        }
        
        /// <summary>
        /// The author property.
        /// </summary>
        public HL7SDK.Cda.IAuthorCollection Author
        {
            get
            {
                return new HL7SDK.Cda.AuthorCollection(this, () => { return Element.author; }, (x) => { Element.author = x; });
            }
        }
        
        /// <summary>
        /// The informant property.
        /// </summary>
        public HL7SDK.Cda.IInformant12Collection Informant
        {
            get
            {
                return new HL7SDK.Cda.Informant12Collection(this, () => { return Element.informant; }, (x) => { Element.informant = x; });
            }
        }
        
        /// <summary>
        /// The participant property.
        /// </summary>
        public HL7SDK.Cda.IParticipant2Collection Participant
        {
            get
            {
                return new HL7SDK.Cda.Participant2Collection(this, () => { return Element.participant; }, (x) => { Element.participant = x; });
            }
        }
        
        /// <summary>
        /// The entryRelationship property.
        /// </summary>
        public HL7SDK.Cda.IEntryRelationshipCollection EntryRelationship
        {
            get
            {
                return new HL7SDK.Cda.EntryRelationshipCollection(this, () => { return Element.entryRelationship; }, (x) => { Element.entryRelationship = x; });
            }
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        public HL7SDK.Cda.IReferenceCollection Reference
        {
            get
            {
                return new HL7SDK.Cda.ReferenceCollection(this, () => { return Element.reference; }, (x) => { Element.reference = x; });
            }
        }
        
        /// <summary>
        /// The precondition property.
        /// </summary>
        public HL7SDK.Cda.IPreconditionCollection Precondition
        {
            get
            {
                return new HL7SDK.Cda.PreconditionCollection(this, () => { return Element.precondition; }, (x) => { Element.precondition = x; });
            }
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        public override string NullFlavor
        {
            get
            {
                return Element.nullFlavor;
            }
            set
            {
                Element.nullFlavor = value;
            }
        }
        
        /// <summary>
        /// The classCode property.
        /// </summary>
        public HL7SDK.Cda.ActClassSupply ClassCode
        {
            get
            {
                return (HL7SDK.Cda.ActClassSupply)Element.classCode;
            }
            set
            {
                Element.classCode = (HL7SDK.Xml.Cda.ActClassSupply)value;
            }
        }
        
        /// <summary>
        /// The moodCode property.
        /// </summary>
        public HL7SDK.Cda.x_DocumentSubstanceMood MoodCode
        {
            get
            {
                return (HL7SDK.Cda.x_DocumentSubstanceMood)Element.moodCode;
            }
            set
            {
                Element.moodCode = (HL7SDK.Xml.Cda.x_DocumentSubstanceMood)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.POCD_MT000040Supply();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISupplyCollection interface.
    /// </summary>


    [Guid("d20289b7-084b-4f26-bc56-1813123d01b8")]
    public partial interface ISupplyCollection : ICDACollection, IEnumerable<ISupply>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISupply this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISupply value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISupply value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISupply item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISupply item1, ISupply item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISupply Append();
    }
    

    [Guid("fd138798-cc8d-40ab-977e-082acb1f9e51")]
    internal partial class SupplyCollection : CDAFactoryCollection<HL7SDK.Cda.Supply, HL7SDK.Xml.Cda.POCD_MT000040Supply, HL7SDK.Cda.ISupply>, HL7SDK.Cda.ISupplyCollection
    {
        
        internal SupplyCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.POCD_MT000040Supply[]> getProp, Action<HL7SDK.Xml.Cda.POCD_MT000040Supply[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPPD_PQCollection interface.
    /// </summary>

    [Guid("849b4314-251f-4898-b41f-a38b0b83a57b")]

    public partial interface IPPD_PQ : IHL73Object, ICDAObject, IPQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA PPD_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PPD_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPPD_PQ))]
    [Guid("a40e65a5-adbb-4e39-9a98-1ffe952e4d44")]
    public partial class PPD_PQ : HL7SDK.Cda.PQ, INotifyPropertyChanged, IPPD_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PPD_PQ finalizer.
        /// </summary>
        ~PPD_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PPD_PQ constructor.
        /// </summary>
        public PPD_PQ()
        {
            element = new HL7SDK.Xml.Cda.PPD_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PPD_PQ constructor.
        /// </summary>
        internal PPD_PQ(HL7SDK.Xml.Cda.PPD_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type PPD_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.PPD_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.PPD_PQ;
            }
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        public HL7SDK.Cda.IPQ StandardDeviation
        {
            get
            {
                if (Element.standardDeviation == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.standardDeviation = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.standardDeviation, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.standardDeviation = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.standardDeviation = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        public HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get
            {
                return (HL7SDK.Cda.ProbabilityDistributionType)Element.distributionType;
            }
            set
            {
                Element.distributionType = (HL7SDK.Xml.Cda.ProbabilityDistributionType)value;
                Element.distributionTypeSpecified = true;
            }
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        public bool DistributionTypeSpecified
        {
            get
            {
                return Element.distributionTypeSpecified;
            }
            set
            {
                Element.distributionTypeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.PPD_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPPD_PQCollection interface.
    /// </summary>


    [Guid("db1f340c-2ff6-4a5b-b9ac-6a40b271539b")]
    public partial interface IPPD_PQCollection : ICDACollection, IEnumerable<IPPD_PQ>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPPD_PQ this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPPD_PQ value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPPD_PQ value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPPD_PQ item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPPD_PQ item1, IPPD_PQ item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPPD_PQ Append();
    }
    

    [Guid("bdb621fc-cabe-44f9-ad0b-a42e77db9083")]
    internal partial class PPD_PQCollection : CDAFactoryCollection<HL7SDK.Cda.PPD_PQ, HL7SDK.Xml.Cda.PPD_PQ, HL7SDK.Cda.IPPD_PQ>, HL7SDK.Cda.IPPD_PQCollection
    {
        
        internal PPD_PQCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.PPD_PQ[]> getProp, Action<HL7SDK.Xml.Cda.PPD_PQ[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPPD_TSCollection interface.
    /// </summary>

    [Guid("fa929e40-3743-4db6-bd7e-ce73796eccfd")]

    public partial interface IPPD_TS : IHL73Object, ICDAObject, ITS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA PPD_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PPD_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPPD_TS))]
    [Guid("c54ed57c-7bc6-466b-8d6d-b4d4b20198c8")]
    public partial class PPD_TS : HL7SDK.Cda.TS, INotifyPropertyChanged, IPPD_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PPD_TS finalizer.
        /// </summary>
        ~PPD_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PPD_TS constructor.
        /// </summary>
        public PPD_TS()
        {
            element = new HL7SDK.Xml.Cda.PPD_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PPD_TS constructor.
        /// </summary>
        internal PPD_TS(HL7SDK.Xml.Cda.PPD_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type PPD_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.PPD_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.PPD_TS;
            }
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        public HL7SDK.Cda.IPQ StandardDeviation
        {
            get
            {
                if (Element.standardDeviation == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.standardDeviation = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.standardDeviation, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.standardDeviation = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.standardDeviation = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        public HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get
            {
                return (HL7SDK.Cda.ProbabilityDistributionType)Element.distributionType;
            }
            set
            {
                Element.distributionType = (HL7SDK.Xml.Cda.ProbabilityDistributionType)value;
                Element.distributionTypeSpecified = true;
            }
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        public bool DistributionTypeSpecified
        {
            get
            {
                return Element.distributionTypeSpecified;
            }
            set
            {
                Element.distributionTypeSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.PPD_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPQCollection interface.
    /// </summary>

    [Guid("1e8f1f32-db29-4ee8-8908-f804ae0d1c0d")]

    public partial interface IPQ : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPQ))]
    [Guid("eaf053e8-e223-48ee-9146-87e1cba85c66")]
    public partial class PQ : HL7SDK.Cda.QTY, INotifyPropertyChanged, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PQ finalizer.
        /// </summary>
        ~PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PQ constructor.
        /// </summary>
        public PQ()
        {
            element = new HL7SDK.Xml.Cda.PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PQ constructor.
        /// </summary>
        internal PQ(HL7SDK.Xml.Cda.PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.PQ;
            }
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        public HL7SDK.Cda.IPQRCollection Translation
        {
            get
            {
                return new HL7SDK.Cda.PQRCollection(this, () => { return Element.translation; }, (x) => { Element.translation = x; });
            }
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        public string Unit
        {
            get
            {
                return Element.unit;
            }
            set
            {
                Element.unit = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPQCollection interface.
    /// </summary>


    [Guid("2089d31c-5074-4eb4-bb61-a7dbe14ba337")]
    public partial interface IPQCollection : ICDACollection, IEnumerable<IPQ>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPQ this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPQ value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPQ value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPQ item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPQ item1, IPQ item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPQ Append();
    }
    

    [Guid("a67bb8a3-6e76-48b7-915e-2299c513457a")]
    internal partial class PQCollection : CDAFactoryCollection<HL7SDK.Cda.PQ, HL7SDK.Xml.Cda.PQ, HL7SDK.Cda.IPQ>, HL7SDK.Cda.IPQCollection
    {
        
        internal PQCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.PQ[]> getProp, Action<HL7SDK.Xml.Cda.PQ[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IPQRCollection interface.
    /// </summary>

    [Guid("5d1b9f66-e439-45f8-8d73-596a7bb1cac4")]

    public partial interface IPQR : IHL73Object, ICDAObject, ICV
    {
        
        /// <summary>
        /// Gets the XML text of the CDA PQR object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The PQR class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IPQR))]
    [Guid("4f41251b-dc07-4b58-82d8-4e42ccfa2c30")]
    public partial class PQR : HL7SDK.Cda.CV, INotifyPropertyChanged, IPQR, ICV, ICE, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// PQR finalizer.
        /// </summary>
        ~PQR()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// PQR constructor.
        /// </summary>
        public PQR()
        {
            element = new HL7SDK.Xml.Cda.PQR();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// PQR constructor.
        /// </summary>
        internal PQR(HL7SDK.Xml.Cda.PQR element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type PQR
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.PQR Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.PQR;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.PQR();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IPQRCollection interface.
    /// </summary>


    [Guid("8114b4d4-2924-46aa-a093-9792cb8a0236")]
    public partial interface IPQRCollection : ICDACollection, IEnumerable<IPQR>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IPQR this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IPQR value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IPQR value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IPQR item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IPQR item1, IPQR item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IPQR Append();
    }
    

    [Guid("daf6b447-3731-4ec0-9c9d-f4dc58ffd93a")]
    internal partial class PQRCollection : CDAFactoryCollection<HL7SDK.Cda.PQR, HL7SDK.Xml.Cda.PQR, HL7SDK.Cda.IPQR>, HL7SDK.Cda.IPQRCollection
    {
        
        internal PQRCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.PQR[]> getProp, Action<HL7SDK.Xml.Cda.PQR[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IQTYCollection interface.
    /// </summary>

    [Guid("56a003c9-f38c-4f7f-84ec-a3fc78fb01e7")]

    public partial interface IQTY : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA QTY object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The QTY class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IQTY))]
    [Guid("f157df1c-416e-48f6-9812-c34ddfd98cb5")]
    public abstract partial class QTY : HL7SDK.Cda.ANY, INotifyPropertyChanged, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// QTY finalizer.
        /// </summary>
        ~QTY()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// QTY constructor.
        /// </summary>
        public QTY()
        {
        }
        
        /// <summary>
        /// QTY constructor.
        /// </summary>
        internal QTY(HL7SDK.Xml.Cda.QTY element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type QTY
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.QTY Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.QTY;
            }
        }
    }
    
    /// <summary>
    /// The IQTYCollection interface.
    /// </summary>


    [Guid("ca94c2f0-0af1-4e2a-a2b8-c239bff87782")]
    public partial interface IQTYCollection : ICDACollection, IEnumerable<IQTY>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IQTY this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IQTY value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IQTY value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IQTY item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IQTY item1, IQTY item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
    }
    

    [Guid("b2c1d90c-00b1-415b-acc7-da3b049e7cae")]
    internal partial class QTYCollection : CDACollection<HL7SDK.Cda.QTY, HL7SDK.Xml.Cda.QTY, HL7SDK.Cda.IQTY>, HL7SDK.Cda.IQTYCollection
    {
        
        internal QTYCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.QTY[]> getProp, Action<HL7SDK.Xml.Cda.QTY[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IREALCollection interface.
    /// </summary>

    [Guid("d134c730-ed9d-4035-83f6-5bd47f277de5")]

    public partial interface IREAL : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA REAL object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The REAL class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IREAL))]
    [Guid("a0e3a6ad-46c9-41fe-af12-6494aed5cb44")]
    public partial class REAL : HL7SDK.Cda.QTY, INotifyPropertyChanged, IREAL, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// REAL finalizer.
        /// </summary>
        ~REAL()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// REAL constructor.
        /// </summary>
        public REAL()
        {
            element = new HL7SDK.Xml.Cda.REAL();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// REAL constructor.
        /// </summary>
        internal REAL(HL7SDK.Xml.Cda.REAL element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type REAL
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.REAL Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.REAL;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.REAL();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IREALCollection interface.
    /// </summary>


    [Guid("04a8b261-7a38-4b79-b2b5-cf26d29f6e3d")]
    public partial interface IREALCollection : ICDACollection, IEnumerable<IREAL>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IREAL this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IREAL value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IREAL value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IREAL item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IREAL item1, IREAL item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IREAL Append();
    }
    

    [Guid("0bab4d23-0766-44a3-a8a9-29d7e7abbd5d")]
    internal partial class REALCollection : CDAFactoryCollection<HL7SDK.Cda.REAL, HL7SDK.Xml.Cda.REAL, HL7SDK.Cda.IREAL>, HL7SDK.Cda.IREALCollection
    {
        
        internal REALCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.REAL[]> getProp, Action<HL7SDK.Xml.Cda.REAL[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IRTOCollection interface.
    /// </summary>

    [Guid("d68de9a1-8b48-46ef-ae85-d3f66ef78cbe")]

    public partial interface IRTO : IHL73Object, ICDAObject, IRTO_QTY_QTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA RTO object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The numerator property.
        /// </summary>
        new IQTY Numerator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The denominator property.
        /// </summary>
        new IQTY Denominator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RTO class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRTO))]
    [Guid("782ba37e-9382-40f4-b16a-3c3c1fafc2c5")]
    public partial class RTO : HL7SDK.Cda.RTO_QTY_QTY, INotifyPropertyChanged, IRTO, IRTO_QTY_QTY, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RTO finalizer.
        /// </summary>
        ~RTO()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RTO constructor.
        /// </summary>
        public RTO()
        {
            element = new HL7SDK.Xml.Cda.RTO();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RTO constructor.
        /// </summary>
        internal RTO(HL7SDK.Xml.Cda.RTO element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type RTO
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.RTO Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.RTO;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.RTO();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRTO_MO_PQCollection interface.
    /// </summary>

    [Guid("03072080-5d6f-4899-9ff2-149db6a1ff5e")]

    public partial interface IRTO_MO_PQ : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA RTO_MO_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The numerator property.
        /// </summary>
        IMO Numerator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The denominator property.
        /// </summary>
        IPQ Denominator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RTO_MO_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRTO_MO_PQ))]
    [Guid("7abe87c2-117f-40ee-9375-57cd610f46cf")]
    public partial class RTO_MO_PQ : HL7SDK.Cda.QTY, INotifyPropertyChanged, IRTO_MO_PQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RTO_MO_PQ finalizer.
        /// </summary>
        ~RTO_MO_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RTO_MO_PQ constructor.
        /// </summary>
        public RTO_MO_PQ()
        {
            element = new HL7SDK.Xml.Cda.RTO_MO_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RTO_MO_PQ constructor.
        /// </summary>
        internal RTO_MO_PQ(HL7SDK.Xml.Cda.RTO_MO_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type RTO_MO_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.RTO_MO_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.RTO_MO_PQ;
            }
        }
        
        /// <summary>
        /// The numerator property.
        /// </summary>
        public HL7SDK.Cda.IMO Numerator
        {
            get
            {
                if (Element.numerator == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.numerator = new HL7SDK.Xml.Cda.MO();
                    }
                }
                return ElementFactory.Wrap(Element.numerator, this) as HL7SDK.Cda.IMO;
            }
            set
            {
                if (value == null)
                {
                    Element.numerator = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.MO)value;
                    t.Attach(this);
                    Element.numerator = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The denominator property.
        /// </summary>
        public HL7SDK.Cda.IPQ Denominator
        {
            get
            {
                if (Element.denominator == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.denominator = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.denominator, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.denominator = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.denominator = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.RTO_MO_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRTO_PQ_PQCollection interface.
    /// </summary>

    [Guid("3ff26bc3-659e-48cc-a08a-69ee2d96d81b")]

    public partial interface IRTO_PQ_PQ : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA RTO_PQ_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The numerator property.
        /// </summary>
        IPQ Numerator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The denominator property.
        /// </summary>
        IPQ Denominator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RTO_PQ_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRTO_PQ_PQ))]
    [Guid("2f31493f-c264-4002-b2f9-3488288d2968")]
    public partial class RTO_PQ_PQ : HL7SDK.Cda.QTY, INotifyPropertyChanged, IRTO_PQ_PQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RTO_PQ_PQ finalizer.
        /// </summary>
        ~RTO_PQ_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RTO_PQ_PQ constructor.
        /// </summary>
        public RTO_PQ_PQ()
        {
            element = new HL7SDK.Xml.Cda.RTO_PQ_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RTO_PQ_PQ constructor.
        /// </summary>
        internal RTO_PQ_PQ(HL7SDK.Xml.Cda.RTO_PQ_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type RTO_PQ_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.RTO_PQ_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.RTO_PQ_PQ;
            }
        }
        
        /// <summary>
        /// The numerator property.
        /// </summary>
        public HL7SDK.Cda.IPQ Numerator
        {
            get
            {
                if (Element.numerator == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.numerator = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.numerator, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.numerator = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.numerator = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The denominator property.
        /// </summary>
        public HL7SDK.Cda.IPQ Denominator
        {
            get
            {
                if (Element.denominator == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.denominator = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.denominator, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.denominator = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.denominator = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.RTO_PQ_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IRTO_QTY_QTYCollection interface.
    /// </summary>

    [Guid("78448aa5-065d-4154-81bb-28a82901480a")]

    public partial interface IRTO_QTY_QTY : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA RTO_QTY_QTY object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The RTO_QTY_QTY class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IRTO_QTY_QTY))]
    [Guid("fbe30c15-803a-4be3-b94e-697447765569")]
    public partial class RTO_QTY_QTY : HL7SDK.Cda.QTY, INotifyPropertyChanged, IRTO_QTY_QTY, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// RTO_QTY_QTY finalizer.
        /// </summary>
        ~RTO_QTY_QTY()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// RTO_QTY_QTY constructor.
        /// </summary>
        public RTO_QTY_QTY()
        {
            element = new HL7SDK.Xml.Cda.RTO_QTY_QTY();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// RTO_QTY_QTY constructor.
        /// </summary>
        internal RTO_QTY_QTY(HL7SDK.Xml.Cda.RTO_QTY_QTY element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type RTO_QTY_QTY
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.RTO_QTY_QTY Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.RTO_QTY_QTY;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.RTO_QTY_QTY();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISCCollection interface.
    /// </summary>

    [Guid("5fd89585-0ef2-436d-a097-b1d7fd736ba0")]

    public partial interface ISC : IHL73Object, ICDAObject, IST
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SC object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SC class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISC))]
    [Guid("e48176d5-6171-43cb-9398-2f94149c4a53")]
    public partial class SC : HL7SDK.Cda.ST, INotifyPropertyChanged, ISC, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SC finalizer.
        /// </summary>
        ~SC()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SC constructor.
        /// </summary>
        public SC()
        {
            element = new HL7SDK.Xml.Cda.SC();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SC constructor.
        /// </summary>
        internal SC(HL7SDK.Xml.Cda.SC element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SC
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SC Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SC;
            }
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        public string Code
        {
            get
            {
                return Element.code;
            }
            set
            {
                Element.code = value;
            }
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        public string CodeSystem
        {
            get
            {
                return Element.codeSystem;
            }
            set
            {
                Element.codeSystem = value;
            }
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        public string CodeSystemName
        {
            get
            {
                return Element.codeSystemName;
            }
            set
            {
                Element.codeSystemName = value;
            }
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        public string CodeSystemVersion
        {
            get
            {
                return Element.codeSystemVersion;
            }
            set
            {
                Element.codeSystemVersion = value;
            }
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        public string DisplayName
        {
            get
            {
                return Element.displayName;
            }
            set
            {
                Element.displayName = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SC();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISLIST_PQCollection interface.
    /// </summary>

    [Guid("b84678cc-a27e-4e28-8dba-3817ce8e48e9")]

    public partial interface ISLIST_PQ : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SLIST_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The origin property.
        /// </summary>
        IPQ Origin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scale property.
        /// </summary>
        IPQ Scale
        {
            get;
            set;
        }
        
        /// <summary>
        /// The digits property.
        /// </summary>
        string Digits
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SLIST_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISLIST_PQ))]
    [Guid("6c5aa10f-c3b2-4fef-a3f6-00067e974964")]
    public partial class SLIST_PQ : HL7SDK.Cda.ANY, INotifyPropertyChanged, ISLIST_PQ, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SLIST_PQ finalizer.
        /// </summary>
        ~SLIST_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SLIST_PQ constructor.
        /// </summary>
        public SLIST_PQ()
        {
            element = new HL7SDK.Xml.Cda.SLIST_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SLIST_PQ constructor.
        /// </summary>
        internal SLIST_PQ(HL7SDK.Xml.Cda.SLIST_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SLIST_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SLIST_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SLIST_PQ;
            }
        }
        
        /// <summary>
        /// The origin property.
        /// </summary>
        public HL7SDK.Cda.IPQ Origin
        {
            get
            {
                if (Element.origin == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.origin = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.origin, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.origin = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.origin = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The scale property.
        /// </summary>
        public HL7SDK.Cda.IPQ Scale
        {
            get
            {
                if (Element.scale == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.scale = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.scale, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.scale = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.scale = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The digits property.
        /// </summary>
        public string Digits
        {
            get
            {
                return Element.digits;
            }
            set
            {
                Element.digits = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SLIST_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISLIST_TSCollection interface.
    /// </summary>

    [Guid("04a40f49-4091-4c8e-9434-343aff6282d8")]

    public partial interface ISLIST_TS : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SLIST_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The origin property.
        /// </summary>
        ITS Origin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scale property.
        /// </summary>
        IPQ Scale
        {
            get;
            set;
        }
        
        /// <summary>
        /// The digits property.
        /// </summary>
        string Digits
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SLIST_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISLIST_TS))]
    [Guid("c262d94c-cedd-4f6f-a18c-8c1a3eb6a664")]
    public partial class SLIST_TS : HL7SDK.Cda.ANY, INotifyPropertyChanged, ISLIST_TS, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SLIST_TS finalizer.
        /// </summary>
        ~SLIST_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SLIST_TS constructor.
        /// </summary>
        public SLIST_TS()
        {
            element = new HL7SDK.Xml.Cda.SLIST_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SLIST_TS constructor.
        /// </summary>
        internal SLIST_TS(HL7SDK.Xml.Cda.SLIST_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SLIST_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SLIST_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SLIST_TS;
            }
        }
        
        /// <summary>
        /// The origin property.
        /// </summary>
        public HL7SDK.Cda.ITS Origin
        {
            get
            {
                if (Element.origin == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.origin = new HL7SDK.Xml.Cda.TS();
                    }
                }
                return ElementFactory.Wrap(Element.origin, this) as HL7SDK.Cda.ITS;
            }
            set
            {
                if (value == null)
                {
                    Element.origin = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.TS)value;
                    t.Attach(this);
                    Element.origin = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The scale property.
        /// </summary>
        public HL7SDK.Cda.IPQ Scale
        {
            get
            {
                if (Element.scale == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.scale = new HL7SDK.Xml.Cda.PQ();
                    }
                }
                return ElementFactory.Wrap(Element.scale, this) as HL7SDK.Cda.IPQ;
            }
            set
            {
                if (value == null)
                {
                    Element.scale = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.PQ)value;
                    t.Attach(this);
                    Element.scale = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The digits property.
        /// </summary>
        public string Digits
        {
            get
            {
                return Element.digits;
            }
            set
            {
                Element.digits = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SLIST_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISTCollection interface.
    /// </summary>

    [Guid("c681f0ee-c1f5-439e-b310-b3042e4c806b")]

    public partial interface IST : IHL73Object, ICDAObject, IED
    {
        
        /// <summary>
        /// Gets the XML text of the CDA ST object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The ST class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IST))]
    [Guid("3af782cd-a01d-4a26-8280-13a74d515f07")]
    public partial class ST : HL7SDK.Cda.ED, INotifyPropertyChanged, IST, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// ST finalizer.
        /// </summary>
        ~ST()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// ST constructor.
        /// </summary>
        public ST()
        {
            element = new HL7SDK.Xml.Cda.ST();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// ST constructor.
        /// </summary>
        internal ST(HL7SDK.Xml.Cda.ST element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type ST
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.ST Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.ST;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.ST();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocBrCollection interface.
    /// </summary>

    [Guid("ff2da19f-e4e0-4bdd-90a2-6a2d8e5fc7fb")]

    public partial interface IStrucDocBr : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocBr object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocBr class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocBr))]
    [Guid("83c8b0c5-3e9f-46a2-9dda-31a623034046")]
    public partial class StrucDocBr : StrucDocElement, INotifyPropertyChanged, IStrucDocBr, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocBr finalizer.
        /// </summary>
        ~StrucDocBr()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocBr constructor.
        /// </summary>
        public StrucDocBr()
        {
            element = new HL7SDK.Xml.Cda.StrucDocBr();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocBr constructor.
        /// </summary>
        internal StrucDocBr(HL7SDK.Xml.Cda.StrucDocBr element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocBr
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocBr Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocBr;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocBr();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocCaptionCollection interface.
    /// </summary>

    [Guid("a61fee8c-3a0b-4d3e-91cf-10dc59c269a5")]

    public partial interface IStrucDocCaption : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocCaption object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocCaption class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocCaption))]
    [Guid("43689be5-448d-47fb-a54f-059f6ede8cc6")]
    public partial class StrucDocCaption : StrucDocElement, INotifyPropertyChanged, IStrucDocCaption, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocCaption finalizer.
        /// </summary>
        ~StrucDocCaption()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocCaption constructor.
        /// </summary>
        public StrucDocCaption()
        {
            element = new HL7SDK.Xml.Cda.StrucDocCaption();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocCaption constructor.
        /// </summary>
        internal StrucDocCaption(HL7SDK.Xml.Cda.StrucDocCaption element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocCaption
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocCaption Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocCaption;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocCaption();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocColCollection interface.
    /// </summary>

    [Guid("41835dc4-6e8e-46fe-b759-becfcf6cc6a5")]

    public partial interface IStrucDocCol : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocCol object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The span property.
        /// </summary>
        string Span
        {
            get;
            set;
        }
        
        /// <summary>
        /// The width property.
        /// </summary>
        string Width
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocColAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocColValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocCol class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocCol))]
    [Guid("5ab23a3f-26d7-4155-98bb-dc465c5c78db")]
    public partial class StrucDocCol : StrucDocElement, INotifyPropertyChanged, IStrucDocCol, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocCol finalizer.
        /// </summary>
        ~StrucDocCol()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocCol constructor.
        /// </summary>
        public StrucDocCol()
        {
            element = new HL7SDK.Xml.Cda.StrucDocCol();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocCol constructor.
        /// </summary>
        internal StrucDocCol(HL7SDK.Xml.Cda.StrucDocCol element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocCol
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocCol Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocCol;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The span property.
        /// </summary>
        public string Span
        {
            get
            {
                return Element.span;
            }
            set
            {
                Element.span = value;
            }
        }
        
        /// <summary>
        /// The width property.
        /// </summary>
        public string Width
        {
            get
            {
                return Element.width;
            }
            set
            {
                Element.width = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocColAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocColAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocColAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocColValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocColValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocColValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocCol();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocColCollection interface.
    /// </summary>


    [Guid("90e55ac2-bdbe-4fae-8ef3-14e77681c55c")]
    public partial interface IStrucDocColCollection : ICDACollection, IEnumerable<IStrucDocCol>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IStrucDocCol this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IStrucDocCol value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IStrucDocCol value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IStrucDocCol item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IStrucDocCol item1, IStrucDocCol item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IStrucDocCol Append();
    }
    

    [Guid("1279276b-4c47-441d-b844-d7b052e874e4")]
    internal partial class StrucDocColCollection : CDAFactoryCollection<HL7SDK.Cda.StrucDocCol, HL7SDK.Xml.Cda.StrucDocCol, HL7SDK.Cda.IStrucDocCol>, HL7SDK.Cda.IStrucDocColCollection
    {
        
        internal StrucDocColCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.StrucDocCol[]> getProp, Action<HL7SDK.Xml.Cda.StrucDocCol[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IStrucDocColgroupCollection interface.
    /// </summary>

    [Guid("75353ffc-4874-4f69-90b0-1a544dfbd162")]

    public partial interface IStrucDocColgroup : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocColgroup object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The col property.
        /// </summary>
        IStrucDocColCollection Col
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The span property.
        /// </summary>
        string Span
        {
            get;
            set;
        }
        
        /// <summary>
        /// The width property.
        /// </summary>
        string Width
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocColgroupAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocColgroupValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocColgroup class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocColgroup))]
    [Guid("55930d52-70ab-4064-a3c7-6a6abd8091c8")]
    public partial class StrucDocColgroup : StrucDocElement, INotifyPropertyChanged, IStrucDocColgroup, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocColgroup finalizer.
        /// </summary>
        ~StrucDocColgroup()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocColgroup constructor.
        /// </summary>
        public StrucDocColgroup()
        {
            element = new HL7SDK.Xml.Cda.StrucDocColgroup();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocColgroup constructor.
        /// </summary>
        internal StrucDocColgroup(HL7SDK.Xml.Cda.StrucDocColgroup element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocColgroup
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocColgroup Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocColgroup;
            }
        }
        
        /// <summary>
        /// The col property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocColCollection Col
        {
            get
            {
                return new HL7SDK.Cda.StrucDocColCollection(this, () => { return Element.col; }, (x) => { Element.col = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The span property.
        /// </summary>
        public string Span
        {
            get
            {
                return Element.span;
            }
            set
            {
                Element.span = value;
            }
        }
        
        /// <summary>
        /// The width property.
        /// </summary>
        public string Width
        {
            get
            {
                return Element.width;
            }
            set
            {
                Element.width = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocColgroupAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocColgroupAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocColgroupAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocColgroupValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocColgroupValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocColgroupValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocColgroup();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocContentCollection interface.
    /// </summary>

    [Guid("b06dfdf1-9486-4cc6-88ec-310659c3e4aa")]

    public partial interface IStrucDocContent : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocContent object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The revised property.
        /// </summary>
        HL7SDK.Cda.StrucDocContentRevised Revised
        {
            get;
            set;
        }
        
        /// <summary>
        /// The revisedSpecified property.
        /// </summary>
        bool RevisedSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocContent class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocContent))]
    [Guid("4a619009-83a3-4ac1-b37c-ed2232daf388")]
    public partial class StrucDocContent : StrucDocElement, INotifyPropertyChanged, IStrucDocContent, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocContent finalizer.
        /// </summary>
        ~StrucDocContent()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocContent constructor.
        /// </summary>
        public StrucDocContent()
        {
            element = new HL7SDK.Xml.Cda.StrucDocContent();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocContent constructor.
        /// </summary>
        internal StrucDocContent(HL7SDK.Xml.Cda.StrucDocContent element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocContent
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocContent Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocContent;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The revised property.
        /// </summary>
        public HL7SDK.Cda.StrucDocContentRevised Revised
        {
            get
            {
                return (HL7SDK.Cda.StrucDocContentRevised)Element.revised;
            }
            set
            {
                Element.revised = (HL7SDK.Xml.Cda.StrucDocContentRevised)value;
                Element.revisedSpecified = true;
            }
        }
        
        /// <summary>
        /// The revisedSpecified property.
        /// </summary>
        public bool RevisedSpecified
        {
            get
            {
                return Element.revisedSpecified;
            }
            set
            {
                Element.revisedSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocContent();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocFootnoteCollection interface.
    /// </summary>

    [Guid("0a2c1e07-8266-4594-9cb2-c43738e9ccd2")]

    public partial interface IStrucDocFootnote : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocFootnote object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocFootnote class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocFootnote))]
    [Guid("8033e6b4-f6c5-4147-bad2-9e7e2850b16d")]
    public partial class StrucDocFootnote : StrucDocElement, INotifyPropertyChanged, IStrucDocFootnote, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocFootnote finalizer.
        /// </summary>
        ~StrucDocFootnote()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocFootnote constructor.
        /// </summary>
        public StrucDocFootnote()
        {
            element = new HL7SDK.Xml.Cda.StrucDocFootnote();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocFootnote constructor.
        /// </summary>
        internal StrucDocFootnote(HL7SDK.Xml.Cda.StrucDocFootnote element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocFootnote
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocFootnote Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocFootnote;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocFootnote();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocFootnoteRefCollection interface.
    /// </summary>

    [Guid("19955079-24be-416d-9e40-92f8efaf4c67")]

    public partial interface IStrucDocFootnoteRef : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocFootnoteRef object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The IDREF property.
        /// </summary>
        string IDREF
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocFootnoteRef class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocFootnoteRef))]
    [Guid("5edffbe4-fa8d-48e2-92f8-4400efeb211c")]
    public partial class StrucDocFootnoteRef : StrucDocElement, INotifyPropertyChanged, IStrucDocFootnoteRef, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocFootnoteRef finalizer.
        /// </summary>
        ~StrucDocFootnoteRef()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocFootnoteRef constructor.
        /// </summary>
        public StrucDocFootnoteRef()
        {
            element = new HL7SDK.Xml.Cda.StrucDocFootnoteRef();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocFootnoteRef constructor.
        /// </summary>
        internal StrucDocFootnoteRef(HL7SDK.Xml.Cda.StrucDocFootnoteRef element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocFootnoteRef
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocFootnoteRef Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocFootnoteRef;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The IDREF property.
        /// </summary>
        public string IDREF
        {
            get
            {
                return Element.IDREF;
            }
            set
            {
                Element.IDREF = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocFootnoteRef();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocItemCollection interface.
    /// </summary>

    [Guid("85cdc4dd-244c-46e9-819d-31f6a4e3c9c0")]

    public partial interface IStrucDocItem : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocItem object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        IStrucDocCaption Caption
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocItem class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocItem))]
    [Guid("f4a8c804-6a57-4025-bcfa-4c0ee448840b")]
    public partial class StrucDocItem : StrucDocElement, INotifyPropertyChanged, IStrucDocItem, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocItem finalizer.
        /// </summary>
        ~StrucDocItem()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocItem constructor.
        /// </summary>
        public StrucDocItem()
        {
            element = new HL7SDK.Xml.Cda.StrucDocItem();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocItem constructor.
        /// </summary>
        internal StrucDocItem(HL7SDK.Xml.Cda.StrucDocItem element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocItem
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocItem Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocItem;
            }
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocCaption Caption
        {
            get
            {
                if (Element.caption == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.caption = new HL7SDK.Xml.Cda.StrucDocCaption();
                    }
                }
                return ElementFactory.Wrap(Element.caption, this) as HL7SDK.Cda.IStrucDocCaption;
            }
            set
            {
                if (value == null)
                {
                    Element.caption = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocCaption)value;
                    t.Attach(this);
                    Element.caption = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocItem();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocItemCollection interface.
    /// </summary>


    [Guid("e20ed65f-d404-4528-a9b3-2535570fc367")]
    public partial interface IStrucDocItemCollection : ICDACollection, IEnumerable<IStrucDocItem>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IStrucDocItem this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IStrucDocItem value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IStrucDocItem value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IStrucDocItem item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IStrucDocItem item1, IStrucDocItem item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IStrucDocItem Append();
    }
    

    [Guid("2573b750-a350-4f12-a950-30b557449ff4")]
    internal partial class StrucDocItemCollection : CDAFactoryCollection<HL7SDK.Cda.StrucDocItem, HL7SDK.Xml.Cda.StrucDocItem, HL7SDK.Cda.IStrucDocItem>, HL7SDK.Cda.IStrucDocItemCollection
    {
        
        internal StrucDocItemCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.StrucDocItem[]> getProp, Action<HL7SDK.Xml.Cda.StrucDocItem[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IStrucDocLinkHtmlCollection interface.
    /// </summary>

    [Guid("05472e0b-011c-4afa-8422-4aefcde1220b")]

    public partial interface IStrucDocLinkHtml : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocLinkHtml object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The href property.
        /// </summary>
        string Href
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rel property.
        /// </summary>
        string Rel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rev property.
        /// </summary>
        string Rev
        {
            get;
            set;
        }
        
        /// <summary>
        /// The title property.
        /// </summary>
        string Title
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocLinkHtml class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocLinkHtml))]
    [Guid("924f8c41-2597-4aa4-81bd-bfe73592f894")]
    public partial class StrucDocLinkHtml : StrucDocElement, INotifyPropertyChanged, IStrucDocLinkHtml, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocLinkHtml finalizer.
        /// </summary>
        ~StrucDocLinkHtml()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocLinkHtml constructor.
        /// </summary>
        public StrucDocLinkHtml()
        {
            element = new HL7SDK.Xml.Cda.StrucDocLinkHtml();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocLinkHtml constructor.
        /// </summary>
        internal StrucDocLinkHtml(HL7SDK.Xml.Cda.StrucDocLinkHtml element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocLinkHtml
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocLinkHtml Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocLinkHtml;
            }
        }
        
        /// <summary>
        /// The name property.
        /// </summary>
        public string Name
        {
            get
            {
                return Element.name;
            }
            set
            {
                Element.name = value;
            }
        }
        
        /// <summary>
        /// The href property.
        /// </summary>
        public string Href
        {
            get
            {
                return Element.href;
            }
            set
            {
                Element.href = value;
            }
        }
        
        /// <summary>
        /// The rel property.
        /// </summary>
        public string Rel
        {
            get
            {
                return Element.rel;
            }
            set
            {
                Element.rel = value;
            }
        }
        
        /// <summary>
        /// The rev property.
        /// </summary>
        public string Rev
        {
            get
            {
                return Element.rev;
            }
            set
            {
                Element.rev = value;
            }
        }
        
        /// <summary>
        /// The title property.
        /// </summary>
        public string Title
        {
            get
            {
                return Element.title;
            }
            set
            {
                Element.title = value;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocLinkHtml();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocListCollection interface.
    /// </summary>

    [Guid("854d3b45-bded-4a0b-86cf-1ac735510b0a")]

    public partial interface IStrucDocList : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocList object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        IStrucDocCaption Caption
        {
            get;
            set;
        }
        
        /// <summary>
        /// The item property.
        /// </summary>
        IStrucDocItemCollection Item
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The listType property.
        /// </summary>
        HL7SDK.Cda.StrucDocListListType ListType
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocList class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocList))]
    [Guid("f9b331b8-8ae8-40fa-8369-8f17010db177")]
    public partial class StrucDocList : StrucDocElement, INotifyPropertyChanged, IStrucDocList, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocList finalizer.
        /// </summary>
        ~StrucDocList()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocList constructor.
        /// </summary>
        public StrucDocList()
        {
            element = new HL7SDK.Xml.Cda.StrucDocList();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocList constructor.
        /// </summary>
        internal StrucDocList(HL7SDK.Xml.Cda.StrucDocList element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocList
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocList Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocList;
            }
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocCaption Caption
        {
            get
            {
                if (Element.caption == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.caption = new HL7SDK.Xml.Cda.StrucDocCaption();
                    }
                }
                return ElementFactory.Wrap(Element.caption, this) as HL7SDK.Cda.IStrucDocCaption;
            }
            set
            {
                if (value == null)
                {
                    Element.caption = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocCaption)value;
                    t.Attach(this);
                    Element.caption = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The item property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocItemCollection Item
        {
            get
            {
                return new HL7SDK.Cda.StrucDocItemCollection(this, () => { return Element.item; }, (x) => { Element.item = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The listType property.
        /// </summary>
        public HL7SDK.Cda.StrucDocListListType ListType
        {
            get
            {
                return (HL7SDK.Cda.StrucDocListListType)Element.listType;
            }
            set
            {
                Element.listType = (HL7SDK.Xml.Cda.StrucDocListListType)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocList();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocParagraphCollection interface.
    /// </summary>

    [Guid("10aa449d-f551-433a-a529-f381f1321607")]

    public partial interface IStrucDocParagraph : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocParagraph object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        IStrucDocCaption Caption
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocParagraph class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocParagraph))]
    [Guid("2a8ce15a-91d1-4f7f-9ed8-e5eba502b3a4")]
    public partial class StrucDocParagraph : StrucDocElement, INotifyPropertyChanged, IStrucDocParagraph, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocParagraph finalizer.
        /// </summary>
        ~StrucDocParagraph()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocParagraph constructor.
        /// </summary>
        public StrucDocParagraph()
        {
            element = new HL7SDK.Xml.Cda.StrucDocParagraph();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocParagraph constructor.
        /// </summary>
        internal StrucDocParagraph(HL7SDK.Xml.Cda.StrucDocParagraph element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocParagraph
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocParagraph Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocParagraph;
            }
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocCaption Caption
        {
            get
            {
                if (Element.caption == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.caption = new HL7SDK.Xml.Cda.StrucDocCaption();
                    }
                }
                return ElementFactory.Wrap(Element.caption, this) as HL7SDK.Cda.IStrucDocCaption;
            }
            set
            {
                if (value == null)
                {
                    Element.caption = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocCaption)value;
                    t.Attach(this);
                    Element.caption = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocParagraph();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocRenderMultiMediaCollection interface.
    /// </summary>

    [Guid("a407d8ec-73c8-42de-91f2-c46a4d08c9a0")]

    public partial interface IStrucDocRenderMultiMedia : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocRenderMultiMedia object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        IStrucDocCaption Caption
        {
            get;
            set;
        }
        
        /// <summary>
        /// The referencedObject property.
        /// </summary>
        string ReferencedObject
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocRenderMultiMedia class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocRenderMultiMedia))]
    [Guid("bb97e0b4-5d09-40e2-b4e0-d410201f2476")]
    public partial class StrucDocRenderMultiMedia : StrucDocElement, INotifyPropertyChanged, IStrucDocRenderMultiMedia, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocRenderMultiMedia finalizer.
        /// </summary>
        ~StrucDocRenderMultiMedia()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocRenderMultiMedia constructor.
        /// </summary>
        public StrucDocRenderMultiMedia()
        {
            element = new HL7SDK.Xml.Cda.StrucDocRenderMultiMedia();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocRenderMultiMedia constructor.
        /// </summary>
        internal StrucDocRenderMultiMedia(HL7SDK.Xml.Cda.StrucDocRenderMultiMedia element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocRenderMultiMedia
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocRenderMultiMedia Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocRenderMultiMedia;
            }
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocCaption Caption
        {
            get
            {
                if (Element.caption == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.caption = new HL7SDK.Xml.Cda.StrucDocCaption();
                    }
                }
                return ElementFactory.Wrap(Element.caption, this) as HL7SDK.Cda.IStrucDocCaption;
            }
            set
            {
                if (value == null)
                {
                    Element.caption = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocCaption)value;
                    t.Attach(this);
                    Element.caption = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The referencedObject property.
        /// </summary>
        public string ReferencedObject
        {
            get
            {
                return Element.referencedObject;
            }
            set
            {
                Element.referencedObject = value;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocRenderMultiMedia();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocSubCollection interface.
    /// </summary>

    [Guid("9be00c80-ffae-4b4d-8e36-99e556c9db6f")]

    public partial interface IStrucDocSub : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocSub object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocSub class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocSub))]
    [Guid("d0525236-073a-4408-a62b-d88aed2bbb49")]
    public partial class StrucDocSub : StrucDocElement, INotifyPropertyChanged, IStrucDocSub, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocSub finalizer.
        /// </summary>
        ~StrucDocSub()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocSub constructor.
        /// </summary>
        public StrucDocSub()
        {
            element = new HL7SDK.Xml.Cda.StrucDocSub();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocSub constructor.
        /// </summary>
        internal StrucDocSub(HL7SDK.Xml.Cda.StrucDocSub element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocSub
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocSub Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocSub;
            }
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        public string Text
        {
            get
            {
                if (Element.Text == null) return String.Empty;
                return String.Join("", Element.Text);
            }
            set
            {
                Element.Text = new [] { value };
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocSub();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocSupCollection interface.
    /// </summary>

    [Guid("1886cd7c-228d-426c-9cfc-086eb93efd32")]

    public partial interface IStrucDocSup : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocSup object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocSup class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocSup))]
    [Guid("8d457430-6e0e-47a5-bce3-9b85c54effa9")]
    public partial class StrucDocSup : StrucDocElement, INotifyPropertyChanged, IStrucDocSup, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocSup finalizer.
        /// </summary>
        ~StrucDocSup()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocSup constructor.
        /// </summary>
        public StrucDocSup()
        {
            element = new HL7SDK.Xml.Cda.StrucDocSup();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocSup constructor.
        /// </summary>
        internal StrucDocSup(HL7SDK.Xml.Cda.StrucDocSup element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocSup
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocSup Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocSup;
            }
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        public string Text
        {
            get
            {
                if (Element.Text == null) return String.Empty;
                return String.Join("", Element.Text);
            }
            set
            {
                Element.Text = new [] { value };
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocSup();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTableCollection interface.
    /// </summary>

    [Guid("436fd049-662b-4642-a7c6-f12cf97ddb10")]

    public partial interface IStrucDocTable : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocTable object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        IStrucDocCaption Caption
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thead property.
        /// </summary>
        IStrucDocThead Thead
        {
            get;
            set;
        }
        
        /// <summary>
        /// The tfoot property.
        /// </summary>
        IStrucDocTfoot Tfoot
        {
            get;
            set;
        }
        
        /// <summary>
        /// The tbody property.
        /// </summary>
        IStrucDocTbodyCollection Tbody
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The summary property.
        /// </summary>
        string Summary
        {
            get;
            set;
        }
        
        /// <summary>
        /// The width property.
        /// </summary>
        string Width
        {
            get;
            set;
        }
        
        /// <summary>
        /// The border property.
        /// </summary>
        string Border
        {
            get;
            set;
        }
        
        /// <summary>
        /// The frame property.
        /// </summary>
        HL7SDK.Cda.StrucDocTableFrame Frame
        {
            get;
            set;
        }
        
        /// <summary>
        /// The frameSpecified property.
        /// </summary>
        bool FrameSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rules property.
        /// </summary>
        HL7SDK.Cda.StrucDocTableRules Rules
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rulesSpecified property.
        /// </summary>
        bool RulesSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The cellspacing property.
        /// </summary>
        string Cellspacing
        {
            get;
            set;
        }
        
        /// <summary>
        /// The cellpadding property.
        /// </summary>
        string Cellpadding
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocTable class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocTable))]
    [Guid("ee7c3bfe-7029-45d8-a8f9-c8e2a1f05290")]
    public partial class StrucDocTable : StrucDocElement, INotifyPropertyChanged, IStrucDocTable, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocTable finalizer.
        /// </summary>
        ~StrucDocTable()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocTable constructor.
        /// </summary>
        public StrucDocTable()
        {
            element = new HL7SDK.Xml.Cda.StrucDocTable();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocTable constructor.
        /// </summary>
        internal StrucDocTable(HL7SDK.Xml.Cda.StrucDocTable element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocTable
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocTable Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocTable;
            }
        }
        
        /// <summary>
        /// The caption property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocCaption Caption
        {
            get
            {
                if (Element.caption == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.caption = new HL7SDK.Xml.Cda.StrucDocCaption();
                    }
                }
                return ElementFactory.Wrap(Element.caption, this) as HL7SDK.Cda.IStrucDocCaption;
            }
            set
            {
                if (value == null)
                {
                    Element.caption = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocCaption)value;
                    t.Attach(this);
                    Element.caption = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The thead property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocThead Thead
        {
            get
            {
                if (Element.thead == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.thead = new HL7SDK.Xml.Cda.StrucDocThead();
                    }
                }
                return ElementFactory.Wrap(Element.thead, this) as HL7SDK.Cda.IStrucDocThead;
            }
            set
            {
                if (value == null)
                {
                    Element.thead = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocThead)value;
                    t.Attach(this);
                    Element.thead = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The tfoot property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocTfoot Tfoot
        {
            get
            {
                if (Element.tfoot == null)
                {
                    if (this.Lazy == false)
                    {
                        return null;
                    }
                    else
                    {
                        Element.tfoot = new HL7SDK.Xml.Cda.StrucDocTfoot();
                    }
                }
                return ElementFactory.Wrap(Element.tfoot, this) as HL7SDK.Cda.IStrucDocTfoot;
            }
            set
            {
                if (value == null)
                {
                    Element.tfoot = null;
                    return;
                }
                if (value is CDAObject)
                {
                    var t = (HL7SDK.Cda.StrucDocTfoot)value;
                    t.Attach(this);
                    Element.tfoot = t.Element;
                }
                else
                {
                    throw new ArgumentException("Unsupported value type.");
                }
            }
        }
        
        /// <summary>
        /// The tbody property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocTbodyCollection Tbody
        {
            get
            {
                return new HL7SDK.Cda.StrucDocTbodyCollection(this, () => { return Element.tbody; }, (x) => { Element.tbody = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The summary property.
        /// </summary>
        public string Summary
        {
            get
            {
                return Element.summary;
            }
            set
            {
                Element.summary = value;
            }
        }
        
        /// <summary>
        /// The width property.
        /// </summary>
        public string Width
        {
            get
            {
                return Element.width;
            }
            set
            {
                Element.width = value;
            }
        }
        
        /// <summary>
        /// The border property.
        /// </summary>
        public string Border
        {
            get
            {
                return Element.border;
            }
            set
            {
                Element.border = value;
            }
        }
        
        /// <summary>
        /// The frame property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTableFrame Frame
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTableFrame)Element.frame;
            }
            set
            {
                Element.frame = (HL7SDK.Xml.Cda.StrucDocTableFrame)value;
                Element.frameSpecified = true;
            }
        }
        
        /// <summary>
        /// The frameSpecified property.
        /// </summary>
        public bool FrameSpecified
        {
            get
            {
                return Element.frameSpecified;
            }
            set
            {
                Element.frameSpecified = value;
            }
        }
        
        /// <summary>
        /// The rules property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTableRules Rules
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTableRules)Element.rules;
            }
            set
            {
                Element.rules = (HL7SDK.Xml.Cda.StrucDocTableRules)value;
                Element.rulesSpecified = true;
            }
        }
        
        /// <summary>
        /// The rulesSpecified property.
        /// </summary>
        public bool RulesSpecified
        {
            get
            {
                return Element.rulesSpecified;
            }
            set
            {
                Element.rulesSpecified = value;
            }
        }
        
        /// <summary>
        /// The cellspacing property.
        /// </summary>
        public string Cellspacing
        {
            get
            {
                return Element.cellspacing;
            }
            set
            {
                Element.cellspacing = value;
            }
        }
        
        /// <summary>
        /// The cellpadding property.
        /// </summary>
        public string Cellpadding
        {
            get
            {
                return Element.cellpadding;
            }
            set
            {
                Element.cellpadding = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocTable();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTbodyCollection interface.
    /// </summary>

    [Guid("74152209-9a86-490c-b4ef-40cc50bbfbc6")]

    public partial interface IStrucDocTbody : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocTbody object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The tr property.
        /// </summary>
        IStrucDocTrCollection Tr
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocTbodyAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocTbodyValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocTbody class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocTbody))]
    [Guid("06f32aa8-53f5-43c7-bb67-bd3679f4db25")]
    public partial class StrucDocTbody : StrucDocElement, INotifyPropertyChanged, IStrucDocTbody, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocTbody finalizer.
        /// </summary>
        ~StrucDocTbody()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocTbody constructor.
        /// </summary>
        public StrucDocTbody()
        {
            element = new HL7SDK.Xml.Cda.StrucDocTbody();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocTbody constructor.
        /// </summary>
        internal StrucDocTbody(HL7SDK.Xml.Cda.StrucDocTbody element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocTbody
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocTbody Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocTbody;
            }
        }
        
        /// <summary>
        /// The tr property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocTrCollection Tr
        {
            get
            {
                return new HL7SDK.Cda.StrucDocTrCollection(this, () => { return Element.tr; }, (x) => { Element.tr = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTbodyAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTbodyAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocTbodyAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTbodyValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTbodyValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocTbodyValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocTbody();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTbodyCollection interface.
    /// </summary>


    [Guid("ff47e9bd-1896-42b0-9a4e-38b5fa173c5c")]
    public partial interface IStrucDocTbodyCollection : ICDACollection, IEnumerable<IStrucDocTbody>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IStrucDocTbody this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IStrucDocTbody value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IStrucDocTbody value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IStrucDocTbody item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IStrucDocTbody item1, IStrucDocTbody item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IStrucDocTbody Append();
    }
    

    [Guid("bc0a6472-4e00-4a69-93a5-2c94a06da77c")]
    internal partial class StrucDocTbodyCollection : CDAFactoryCollection<HL7SDK.Cda.StrucDocTbody, HL7SDK.Xml.Cda.StrucDocTbody, HL7SDK.Cda.IStrucDocTbody>, HL7SDK.Cda.IStrucDocTbodyCollection
    {
        
        internal StrucDocTbodyCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.StrucDocTbody[]> getProp, Action<HL7SDK.Xml.Cda.StrucDocTbody[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IStrucDocTdCollection interface.
    /// </summary>

    [Guid("5fa4347c-0847-4c08-9687-ac71d0989712")]

    public partial interface IStrucDocTd : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocTd object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The abbr property.
        /// </summary>
        string Abbr
        {
            get;
            set;
        }
        
        /// <summary>
        /// The axis property.
        /// </summary>
        string Axis
        {
            get;
            set;
        }
        
        /// <summary>
        /// The headers property.
        /// </summary>
        string Headers
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scope property.
        /// </summary>
        HL7SDK.Cda.StrucDocTdScope Scope
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scopeSpecified property.
        /// </summary>
        bool ScopeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rowspan property.
        /// </summary>
        string Rowspan
        {
            get;
            set;
        }
        
        /// <summary>
        /// The colspan property.
        /// </summary>
        string Colspan
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocTdAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocTdValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocTd class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocTd))]
    [Guid("fa143577-fb2e-4c97-a14e-d19ef33ee0d1")]
    public partial class StrucDocTd : StrucDocElement, INotifyPropertyChanged, IStrucDocTd, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocTd finalizer.
        /// </summary>
        ~StrucDocTd()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocTd constructor.
        /// </summary>
        public StrucDocTd()
        {
            element = new HL7SDK.Xml.Cda.StrucDocTd();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocTd constructor.
        /// </summary>
        internal StrucDocTd(HL7SDK.Xml.Cda.StrucDocTd element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocTd
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocTd Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocTd;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The abbr property.
        /// </summary>
        public string Abbr
        {
            get
            {
                return Element.abbr;
            }
            set
            {
                Element.abbr = value;
            }
        }
        
        /// <summary>
        /// The axis property.
        /// </summary>
        public string Axis
        {
            get
            {
                return Element.axis;
            }
            set
            {
                Element.axis = value;
            }
        }
        
        /// <summary>
        /// The headers property.
        /// </summary>
        public string Headers
        {
            get
            {
                return Element.headers;
            }
            set
            {
                Element.headers = value;
            }
        }
        
        /// <summary>
        /// The scope property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTdScope Scope
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTdScope)Element.scope;
            }
            set
            {
                Element.scope = (HL7SDK.Xml.Cda.StrucDocTdScope)value;
                Element.scopeSpecified = true;
            }
        }
        
        /// <summary>
        /// The scopeSpecified property.
        /// </summary>
        public bool ScopeSpecified
        {
            get
            {
                return Element.scopeSpecified;
            }
            set
            {
                Element.scopeSpecified = value;
            }
        }
        
        /// <summary>
        /// The rowspan property.
        /// </summary>
        public string Rowspan
        {
            get
            {
                return Element.rowspan;
            }
            set
            {
                Element.rowspan = value;
            }
        }
        
        /// <summary>
        /// The colspan property.
        /// </summary>
        public string Colspan
        {
            get
            {
                return Element.colspan;
            }
            set
            {
                Element.colspan = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTdAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTdAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocTdAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTdValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTdValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocTdValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocTd();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTextCollection interface.
    /// </summary>

    [Guid("d56da0ca-0dc2-4502-8fd6-9ab2047210f6")]

    public partial interface IStrucDocText : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocText object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocText class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocText))]
    [Guid("acaa7e8b-1f2a-40f9-b41a-7fde2e24ef57")]
    public partial class StrucDocText : StrucDocElement, INotifyPropertyChanged, IStrucDocText, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocText finalizer.
        /// </summary>
        ~StrucDocText()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocText constructor.
        /// </summary>
        public StrucDocText()
        {
            element = new HL7SDK.Xml.Cda.StrucDocText();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocText constructor.
        /// </summary>
        internal StrucDocText(HL7SDK.Xml.Cda.StrucDocText element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocText
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocText Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocText;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        public string MediaType
        {
            get
            {
                return Element.mediaType;
            }
            set
            {
                Element.mediaType = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocText();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTfootCollection interface.
    /// </summary>

    [Guid("b4d32505-2dd8-44a4-9fcd-547cd3a8dd54")]

    public partial interface IStrucDocTfoot : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocTfoot object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The tr property.
        /// </summary>
        IStrucDocTrCollection Tr
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocTfootAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocTfootValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocTfoot class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocTfoot))]
    [Guid("5bd5314b-b3c6-4747-b53a-0001f1307b14")]
    public partial class StrucDocTfoot : StrucDocElement, INotifyPropertyChanged, IStrucDocTfoot, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocTfoot finalizer.
        /// </summary>
        ~StrucDocTfoot()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocTfoot constructor.
        /// </summary>
        public StrucDocTfoot()
        {
            element = new HL7SDK.Xml.Cda.StrucDocTfoot();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocTfoot constructor.
        /// </summary>
        internal StrucDocTfoot(HL7SDK.Xml.Cda.StrucDocTfoot element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocTfoot
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocTfoot Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocTfoot;
            }
        }
        
        /// <summary>
        /// The tr property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocTrCollection Tr
        {
            get
            {
                return new HL7SDK.Cda.StrucDocTrCollection(this, () => { return Element.tr; }, (x) => { Element.tr = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTfootAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTfootAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocTfootAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTfootValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTfootValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocTfootValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocTfoot();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocThCollection interface.
    /// </summary>

    [Guid("fbe0566c-904a-4a63-b262-ea8a36b5a5ad")]

    public partial interface IStrucDocTh : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocTh object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The abbr property.
        /// </summary>
        string Abbr
        {
            get;
            set;
        }
        
        /// <summary>
        /// The axis property.
        /// </summary>
        string Axis
        {
            get;
            set;
        }
        
        /// <summary>
        /// The headers property.
        /// </summary>
        string Headers
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scope property.
        /// </summary>
        HL7SDK.Cda.StrucDocThScope Scope
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scopeSpecified property.
        /// </summary>
        bool ScopeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rowspan property.
        /// </summary>
        string Rowspan
        {
            get;
            set;
        }
        
        /// <summary>
        /// The colspan property.
        /// </summary>
        string Colspan
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocThAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocThValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocTh class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocTh))]
    [Guid("14180356-bc89-4e8a-888f-62f60d53e97f")]
    public partial class StrucDocTh : StrucDocElement, INotifyPropertyChanged, IStrucDocTh, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocTh finalizer.
        /// </summary>
        ~StrucDocTh()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocTh constructor.
        /// </summary>
        public StrucDocTh()
        {
            element = new HL7SDK.Xml.Cda.StrucDocTh();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocTh constructor.
        /// </summary>
        internal StrucDocTh(HL7SDK.Xml.Cda.StrucDocTh element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocTh
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocTh Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocTh;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The abbr property.
        /// </summary>
        public string Abbr
        {
            get
            {
                return Element.abbr;
            }
            set
            {
                Element.abbr = value;
            }
        }
        
        /// <summary>
        /// The axis property.
        /// </summary>
        public string Axis
        {
            get
            {
                return Element.axis;
            }
            set
            {
                Element.axis = value;
            }
        }
        
        /// <summary>
        /// The headers property.
        /// </summary>
        public string Headers
        {
            get
            {
                return Element.headers;
            }
            set
            {
                Element.headers = value;
            }
        }
        
        /// <summary>
        /// The scope property.
        /// </summary>
        public HL7SDK.Cda.StrucDocThScope Scope
        {
            get
            {
                return (HL7SDK.Cda.StrucDocThScope)Element.scope;
            }
            set
            {
                Element.scope = (HL7SDK.Xml.Cda.StrucDocThScope)value;
                Element.scopeSpecified = true;
            }
        }
        
        /// <summary>
        /// The scopeSpecified property.
        /// </summary>
        public bool ScopeSpecified
        {
            get
            {
                return Element.scopeSpecified;
            }
            set
            {
                Element.scopeSpecified = value;
            }
        }
        
        /// <summary>
        /// The rowspan property.
        /// </summary>
        public string Rowspan
        {
            get
            {
                return Element.rowspan;
            }
            set
            {
                Element.rowspan = value;
            }
        }
        
        /// <summary>
        /// The colspan property.
        /// </summary>
        public string Colspan
        {
            get
            {
                return Element.colspan;
            }
            set
            {
                Element.colspan = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocThAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocThAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocThAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocThValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocThValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocThValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocTh();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTheadCollection interface.
    /// </summary>

    [Guid("65be5fa8-4490-47bf-8794-9b6ed2454ae4")]

    public partial interface IStrucDocThead : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocThead object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The tr property.
        /// </summary>
        IStrucDocTrCollection Tr
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocTheadAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocTheadValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocThead class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocThead))]
    [Guid("50cc4f94-24f4-49cc-8656-f3c6d1296e01")]
    public partial class StrucDocThead : StrucDocElement, INotifyPropertyChanged, IStrucDocThead, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocThead finalizer.
        /// </summary>
        ~StrucDocThead()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocThead constructor.
        /// </summary>
        public StrucDocThead()
        {
            element = new HL7SDK.Xml.Cda.StrucDocThead();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocThead constructor.
        /// </summary>
        internal StrucDocThead(HL7SDK.Xml.Cda.StrucDocThead element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocThead
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocThead Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocThead;
            }
        }
        
        /// <summary>
        /// The tr property.
        /// </summary>
        public HL7SDK.Cda.IStrucDocTrCollection Tr
        {
            get
            {
                return new HL7SDK.Cda.StrucDocTrCollection(this, () => { return Element.tr; }, (x) => { Element.tr = x; });
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTheadAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTheadAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocTheadAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTheadValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTheadValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocTheadValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocThead();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTrCollection interface.
    /// </summary>

    [Guid("38a9b32e-d5f7-46e6-9c94-434d5aed8006")]

    public partial interface IStrucDocTr : IHL73Object, ICDAObject, IStrucDocElement
    {
        
        /// <summary>
        /// Gets the XML text of the CDA StrucDocTr object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        string XmlId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        string StyleCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        HL7SDK.Cda.StrucDocTrAlign Align
        {
            get;
            set;
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        bool AlignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        string Char
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        string Charoff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        HL7SDK.Cda.StrucDocTrValign Valign
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        bool ValignSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The StrucDocTr class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IStrucDocTr))]
    [Guid("3ac717ef-3fd2-4836-a28f-a03d6701880e")]
    public partial class StrucDocTr : StrucDocElement, INotifyPropertyChanged, IStrucDocTr, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// StrucDocTr finalizer.
        /// </summary>
        ~StrucDocTr()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// StrucDocTr constructor.
        /// </summary>
        public StrucDocTr()
        {
            element = new HL7SDK.Xml.Cda.StrucDocTr();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// StrucDocTr constructor.
        /// </summary>
        internal StrucDocTr(HL7SDK.Xml.Cda.StrucDocTr element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type StrucDocTr
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.StrucDocTr Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.StrucDocTr;
            }
        }
        
        /// <summary>
        /// The ID property.
        /// </summary>
        public string XmlId
        {
            get
            {
                return Element.ID;
            }
            set
            {
                Element.ID = value;
            }
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        public string Language
        {
            get
            {
                return Element.language;
            }
            set
            {
                Element.language = value;
            }
        }
        
        /// <summary>
        /// The styleCode property.
        /// </summary>
        public string StyleCode
        {
            get
            {
                return Element.styleCode;
            }
            set
            {
                Element.styleCode = value;
            }
        }
        
        /// <summary>
        /// The align property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTrAlign Align
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTrAlign)Element.align;
            }
            set
            {
                Element.align = (HL7SDK.Xml.Cda.StrucDocTrAlign)value;
                Element.alignSpecified = true;
            }
        }
        
        /// <summary>
        /// The alignSpecified property.
        /// </summary>
        public bool AlignSpecified
        {
            get
            {
                return Element.alignSpecified;
            }
            set
            {
                Element.alignSpecified = value;
            }
        }
        
        /// <summary>
        /// The char property.
        /// </summary>
        public string Char
        {
            get
            {
                return Element.@char;
            }
            set
            {
                Element.@char = value;
            }
        }
        
        /// <summary>
        /// The charoff property.
        /// </summary>
        public string Charoff
        {
            get
            {
                return Element.charoff;
            }
            set
            {
                Element.charoff = value;
            }
        }
        
        /// <summary>
        /// The valign property.
        /// </summary>
        public HL7SDK.Cda.StrucDocTrValign Valign
        {
            get
            {
                return (HL7SDK.Cda.StrucDocTrValign)Element.valign;
            }
            set
            {
                Element.valign = (HL7SDK.Xml.Cda.StrucDocTrValign)value;
                Element.valignSpecified = true;
            }
        }
        
        /// <summary>
        /// The valignSpecified property.
        /// </summary>
        public bool ValignSpecified
        {
            get
            {
                return Element.valignSpecified;
            }
            set
            {
                Element.valignSpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.StrucDocTr();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IStrucDocTrCollection interface.
    /// </summary>


    [Guid("a2fce356-58ea-4f09-ae88-4e7e9e0c4bd5")]
    public partial interface IStrucDocTrCollection : ICDACollection, IEnumerable<IStrucDocTr>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        IStrucDocTr this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(IStrucDocTr value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(IStrucDocTr value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(IStrucDocTr item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(IStrucDocTr item1, IStrucDocTr item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        IStrucDocTr Append();
    }
    

    [Guid("bd68f42c-0d5f-4808-b792-442aaa4c5093")]
    internal partial class StrucDocTrCollection : CDAFactoryCollection<HL7SDK.Cda.StrucDocTr, HL7SDK.Xml.Cda.StrucDocTr, HL7SDK.Cda.IStrucDocTr>, HL7SDK.Cda.IStrucDocTrCollection
    {
        
        internal StrucDocTrCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.StrucDocTr[]> getProp, Action<HL7SDK.Xml.Cda.StrucDocTr[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISXCM_CDCollection interface.
    /// </summary>

    [Guid("305fe2bb-6677-4074-8441-c756287cf0ed")]

    public partial interface ISXCM_CD : IHL73Object, ICDAObject, ICD
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_CD object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The originalText property.
        /// </summary>
        new IED OriginalText
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qualifier property.
        /// </summary>
        new ICRCollection Qualifier
        {
            get;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new ICDCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The code property.
        /// </summary>
        new string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystem property.
        /// </summary>
        new string CodeSystem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemName property.
        /// </summary>
        new string CodeSystemName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The codeSystemVersion property.
        /// </summary>
        new string CodeSystemVersion
        {
            get;
            set;
        }
        
        /// <summary>
        /// The displayName property.
        /// </summary>
        new string DisplayName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_CD class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_CD))]
    [Guid("048c517f-3a2f-4809-988d-5ed30b34aa1e")]
    public partial class SXCM_CD : HL7SDK.Cda.CD, INotifyPropertyChanged, ISXCM_CD, ICD, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_CD finalizer.
        /// </summary>
        ~SXCM_CD()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_CD constructor.
        /// </summary>
        public SXCM_CD()
        {
            element = new HL7SDK.Xml.Cda.SXCM_CD();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_CD constructor.
        /// </summary>
        internal SXCM_CD(HL7SDK.Xml.Cda.SXCM_CD element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_CD
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_CD Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_CD;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_CD();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_INTCollection interface.
    /// </summary>

    [Guid("b9fce32b-4ce3-42a3-8b5f-61037a32524f")]

    public partial interface ISXCM_INT : IHL73Object, ICDAObject, IINT
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_INT object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_INT class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_INT))]
    [Guid("390f9233-7684-4516-bb2a-21b41f52df29")]
    public partial class SXCM_INT : HL7SDK.Cda.INT, INotifyPropertyChanged, ISXCM_INT, IINT, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_INT finalizer.
        /// </summary>
        ~SXCM_INT()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_INT constructor.
        /// </summary>
        public SXCM_INT()
        {
            element = new HL7SDK.Xml.Cda.SXCM_INT();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_INT constructor.
        /// </summary>
        internal SXCM_INT(HL7SDK.Xml.Cda.SXCM_INT element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_INT
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_INT Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_INT;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_INT();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_MOCollection interface.
    /// </summary>

    [Guid("25625122-1906-4a7e-a310-b15e23bf4865")]

    public partial interface ISXCM_MO : IHL73Object, ICDAObject, IMO
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_MO object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The currency property.
        /// </summary>
        new string Currency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_MO class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_MO))]
    [Guid("62a55090-ca19-4af0-81c1-61081321b16d")]
    public partial class SXCM_MO : HL7SDK.Cda.MO, INotifyPropertyChanged, ISXCM_MO, IMO, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_MO finalizer.
        /// </summary>
        ~SXCM_MO()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_MO constructor.
        /// </summary>
        public SXCM_MO()
        {
            element = new HL7SDK.Xml.Cda.SXCM_MO();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_MO constructor.
        /// </summary>
        internal SXCM_MO(HL7SDK.Xml.Cda.SXCM_MO element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_MO
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_MO Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_MO;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_MO();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_PPD_PQCollection interface.
    /// </summary>

    [Guid("4ff358db-f06d-4f96-b9dc-db23e83a64da")]

    public partial interface ISXCM_PPD_PQ : IHL73Object, ICDAObject, IPPD_PQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_PPD_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_PPD_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_PPD_PQ))]
    [Guid("250fe0f8-247a-4d5e-827b-e62583b6a7c7")]
    public partial class SXCM_PPD_PQ : HL7SDK.Cda.PPD_PQ, INotifyPropertyChanged, ISXCM_PPD_PQ, IPPD_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_PPD_PQ finalizer.
        /// </summary>
        ~SXCM_PPD_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_PPD_PQ constructor.
        /// </summary>
        public SXCM_PPD_PQ()
        {
            element = new HL7SDK.Xml.Cda.SXCM_PPD_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_PPD_PQ constructor.
        /// </summary>
        internal SXCM_PPD_PQ(HL7SDK.Xml.Cda.SXCM_PPD_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_PPD_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_PPD_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_PPD_PQ;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_PPD_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_PPD_TSCollection interface.
    /// </summary>

    [Guid("35dcabbc-4af5-4aed-8adf-3754ee5500ff")]

    public partial interface ISXCM_PPD_TS : IHL73Object, ICDAObject, IPPD_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_PPD_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The standardDeviation property.
        /// </summary>
        new IPQ StandardDeviation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionType property.
        /// </summary>
        new HL7SDK.Cda.ProbabilityDistributionType DistributionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The distributionTypeSpecified property.
        /// </summary>
        new bool DistributionTypeSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_PPD_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_PPD_TS))]
    [Guid("cc43360c-981b-4ffd-a15b-069f99b8c8a8")]
    public partial class SXCM_PPD_TS : HL7SDK.Cda.PPD_TS, INotifyPropertyChanged, ISXCM_PPD_TS, IPPD_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_PPD_TS finalizer.
        /// </summary>
        ~SXCM_PPD_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_PPD_TS constructor.
        /// </summary>
        public SXCM_PPD_TS()
        {
            element = new HL7SDK.Xml.Cda.SXCM_PPD_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_PPD_TS constructor.
        /// </summary>
        internal SXCM_PPD_TS(HL7SDK.Xml.Cda.SXCM_PPD_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_PPD_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_PPD_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_PPD_TS;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_PPD_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_PQCollection interface.
    /// </summary>

    [Guid("c2ac00d2-f97a-4436-b8de-3845bf25dfd2")]

    public partial interface ISXCM_PQ : IHL73Object, ICDAObject, IPQ
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_PQ object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The translation property.
        /// </summary>
        new IPQRCollection Translation
        {
            get;
        }
        
        /// <summary>
        /// The unit property.
        /// </summary>
        new string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_PQ class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_PQ))]
    [Guid("d9503f76-f9ec-4efb-8969-5d28544351c0")]
    public partial class SXCM_PQ : HL7SDK.Cda.PQ, INotifyPropertyChanged, ISXCM_PQ, IPQ, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_PQ finalizer.
        /// </summary>
        ~SXCM_PQ()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_PQ constructor.
        /// </summary>
        public SXCM_PQ()
        {
            element = new HL7SDK.Xml.Cda.SXCM_PQ();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_PQ constructor.
        /// </summary>
        internal SXCM_PQ(HL7SDK.Xml.Cda.SXCM_PQ element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_PQ
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_PQ Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_PQ;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_PQ();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_REALCollection interface.
    /// </summary>

    [Guid("98d9d429-d6a3-4319-8976-87e2d357e966")]

    public partial interface ISXCM_REAL : IHL73Object, ICDAObject, IREAL
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_REAL object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_REAL class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_REAL))]
    [Guid("874e7f08-0e6c-4336-8e1e-63ddfd2189ec")]
    public partial class SXCM_REAL : HL7SDK.Cda.REAL, INotifyPropertyChanged, ISXCM_REAL, IREAL, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_REAL finalizer.
        /// </summary>
        ~SXCM_REAL()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_REAL constructor.
        /// </summary>
        public SXCM_REAL()
        {
            element = new HL7SDK.Xml.Cda.SXCM_REAL();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_REAL constructor.
        /// </summary>
        internal SXCM_REAL(HL7SDK.Xml.Cda.SXCM_REAL element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_REAL
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_REAL Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_REAL;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_REAL();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_TSCollection interface.
    /// </summary>

    [Guid("b28ae557-bbd0-4c24-b9c6-6e30c376154d")]

    public partial interface ISXCM_TS : IHL73Object, ICDAObject, ITS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXCM_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXCM_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXCM_TS))]
    [Guid("db7f3545-6a92-4f2c-994c-d9ecce9e299a")]
    public partial class SXCM_TS : HL7SDK.Cda.TS, INotifyPropertyChanged, ISXCM_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXCM_TS finalizer.
        /// </summary>
        ~SXCM_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXCM_TS constructor.
        /// </summary>
        public SXCM_TS()
        {
            element = new HL7SDK.Xml.Cda.SXCM_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXCM_TS constructor.
        /// </summary>
        internal SXCM_TS(HL7SDK.Xml.Cda.SXCM_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXCM_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXCM_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXCM_TS;
            }
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        public HL7SDK.Cda.SetOperator Operator
        {
            get
            {
                return (HL7SDK.Cda.SetOperator)Element.@operator;
            }
            set
            {
                Element.@operator = (HL7SDK.Xml.Cda.SetOperator)value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXCM_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ISXCM_TSCollection interface.
    /// </summary>


    [Guid("f57d6c21-38ba-435d-8c77-420dd7204bd6")]
    public partial interface ISXCM_TSCollection : ICDACollection, IEnumerable<ISXCM_TS>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ISXCM_TS this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ISXCM_TS value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ISXCM_TS value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ISXCM_TS item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ISXCM_TS item1, ISXCM_TS item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ISXCM_TS Append();
    }
    

    [Guid("c011a919-59ef-4bdc-a0c0-7eb45d593ad5")]
    internal partial class SXCM_TSCollection : CDAFactoryCollection<HL7SDK.Cda.SXCM_TS, HL7SDK.Xml.Cda.SXCM_TS, HL7SDK.Cda.ISXCM_TS>, HL7SDK.Cda.ISXCM_TSCollection
    {
        
        internal SXCM_TSCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.SXCM_TS[]> getProp, Action<HL7SDK.Xml.Cda.SXCM_TS[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The ISXPR_TSCollection interface.
    /// </summary>

    [Guid("a2f051e2-7d6c-4538-9ef0-f66e5402583a")]

    public partial interface ISXPR_TS : IHL73Object, ICDAObject, ISXCM_TS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA SXPR_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The comp property.
        /// </summary>
        ISXCM_TSCollection Comp
        {
            get;
        }
        
        /// <summary>
        /// The operator property.
        /// </summary>
        new HL7SDK.Cda.SetOperator Operator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The SXPR_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ISXPR_TS))]
    [Guid("6dabaa29-577a-443a-904c-f311c0b9fd52")]
    public partial class SXPR_TS : HL7SDK.Cda.SXCM_TS, INotifyPropertyChanged, ISXPR_TS, ISXCM_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// SXPR_TS finalizer.
        /// </summary>
        ~SXPR_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// SXPR_TS constructor.
        /// </summary>
        public SXPR_TS()
        {
            element = new HL7SDK.Xml.Cda.SXPR_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// SXPR_TS constructor.
        /// </summary>
        internal SXPR_TS(HL7SDK.Xml.Cda.SXPR_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type SXPR_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.SXPR_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.SXPR_TS;
            }
        }
        
        /// <summary>
        /// The comp property.
        /// </summary>
        public HL7SDK.Cda.ISXCM_TSCollection Comp
        {
            get
            {
                return new HL7SDK.Cda.SXCM_TSCollection(this, () => { return Element.comp; }, (x) => { Element.comp = x; });
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.SXPR_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ITELCollection interface.
    /// </summary>

    [Guid("4a00a112-a28b-411e-82cf-09c5c480730a")]

    public partial interface ITEL : IHL73Object, ICDAObject, IURL
    {
        
        /// <summary>
        /// Gets the XML text of the CDA TEL object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The useablePeriod property.
        /// </summary>
        ISXCM_TSCollection UseablePeriod
        {
            get;
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        string Use
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The TEL class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ITEL))]
    [Guid("5120049c-2bb5-4d6f-aee6-0c05887ceef4")]
    public partial class TEL : HL7SDK.Cda.URL, INotifyPropertyChanged, ITEL, IURL, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// TEL finalizer.
        /// </summary>
        ~TEL()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// TEL constructor.
        /// </summary>
        public TEL()
        {
            element = new HL7SDK.Xml.Cda.TEL();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// TEL constructor.
        /// </summary>
        internal TEL(HL7SDK.Xml.Cda.TEL element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type TEL
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.TEL Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.TEL;
            }
        }
        
        /// <summary>
        /// The useablePeriod property.
        /// </summary>
        public HL7SDK.Cda.ISXCM_TSCollection UseablePeriod
        {
            get
            {
                return new HL7SDK.Cda.SXCM_TSCollection(this, () => { return Element.useablePeriod; }, (x) => { Element.useablePeriod = x; });
            }
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        public string Use
        {
            get
            {
                if (Element.use == null) return String.Empty;
                return String.Join("", Element.use);
            }
            set
            {
                Element.use = new [] { value };
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.TEL();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ITELCollection interface.
    /// </summary>


    [Guid("430ff6eb-37da-4fd9-add5-121eec3b5700")]
    public partial interface ITELCollection : ICDACollection, IEnumerable<ITEL>
    {
        
        /// <summary>
        /// Gets the element at the specified index.
        /// </summary>
        [DispId(0)]
        ITEL this[int index]
        {
            get;
        }
        
        /// <summary>
        /// Gets the number of elements in the collection
        /// </summary>
        [DispId(1)]
        new int Count
        {
            get;
        }
        
        /// <summary>
        /// Removes the element at the specified index.
        /// </summary>
        [DispId(2)]
        new bool Delete(Object index);
        
        /// <summary>
        /// Adds an object to the end of the collection.
        /// </summary>
        [DispId(3)]
        void Add(ITEL value);
        
        /// <summary>
        /// Removes all objects from the collection.
        /// </summary>
        [DispId(5)]
        new void Clear();
        
        /// <summary>
        /// Determines whether the collection contains a specific value.
        /// </summary>
        [DispId(6)]
        bool Contains(ITEL value);
        
        /// <summary>
        /// Determines the index of a specific item.
        /// </summary>
        [DispId(7)]
        int IndexOf(ITEL item);
        
        /// <summary>
        /// Exchanges two elements.
        /// </summary>
        [DispId(8)]
        void Exchange(ITEL item1, ITEL item2);
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [DispId(-4)]
        new IEnumerator GetEnumerator();
        
        /// <summary>
        /// Creates an object, adds the object to the end of the collection and returns the object to the caller.
        /// </summary>
        [DispId(4)]
        ITEL Append();
    }
    

    [Guid("8c1d583c-6f23-4c70-957d-980d12822070")]
    internal partial class TELCollection : CDAFactoryCollection<HL7SDK.Cda.TEL, HL7SDK.Xml.Cda.TEL, HL7SDK.Cda.ITEL>, HL7SDK.Cda.ITELCollection
    {
        
        internal TELCollection(CDAObject parent, Func<HL7SDK.Xml.Cda.TEL[]> getProp, Action<HL7SDK.Xml.Cda.TEL[]> setProp) : 
                base(parent, getProp, setProp)
        {
        }
        
        public new virtual System.Collections.IEnumerator GetEnumerator()
        {
            return base.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The IthumbnailCollection interface.
    /// </summary>

    [Guid("ef53f294-9d23-4b15-9ae2-ab420dcf73f3")]

    public partial interface Ithumbnail : IHL73Object, ICDAObject, IED
    {
        
        /// <summary>
        /// Gets the XML text of the CDA thumbnail object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The reference property.
        /// </summary>
        new ITEL Reference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The thumbnail property.
        /// </summary>
        new Ithumbnail Thumbnail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mediaType property.
        /// </summary>
        new string MediaType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The language property.
        /// </summary>
        new string Language
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compression property.
        /// </summary>
        new HL7SDK.Cda.CompressionAlgorithm Compression
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compressionSpecified property.
        /// </summary>
        new bool CompressionSpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integrityCheckAlgorithm property.
        /// </summary>
        new HL7SDK.Cda.IntegrityCheckAlgorithm IntegrityCheckAlgorithm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The representation property.
        /// </summary>
        new HL7SDK.Cda.BinaryDataEncoding Representation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The thumbnail class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.Ithumbnail))]
    [Guid("83044bec-37fd-4a4a-a3cf-e44179558869")]
    public partial class thumbnail : HL7SDK.Cda.ED, INotifyPropertyChanged, Ithumbnail, IED, IBIN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// thumbnail finalizer.
        /// </summary>
        ~thumbnail()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// thumbnail constructor.
        /// </summary>
        public thumbnail()
        {
            element = new HL7SDK.Xml.Cda.thumbnail();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// thumbnail constructor.
        /// </summary>
        internal thumbnail(HL7SDK.Xml.Cda.thumbnail element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type thumbnail
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.thumbnail Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.thumbnail;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.thumbnail();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ITNCollection interface.
    /// </summary>

    [Guid("ce67534f-36b9-4ca4-92c8-e1424fd673ce")]

    public partial interface ITN : IHL73Object, ICDAObject, IEN
    {
        
        /// <summary>
        /// Gets the XML text of the CDA TN object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The Items property.
        /// </summary>
        new IENXPCollection Items
        {
            get;
        }
        
        /// <summary>
        /// The validTime property.
        /// </summary>
        new IIVL_TS ValidTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Text property.
        /// </summary>
        new string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The use property.
        /// </summary>
        new string Use
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The TN class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ITN))]
    [Guid("74195d21-bf0d-4c59-8f48-3d9e0f8d8e74")]
    public partial class TN : HL7SDK.Cda.EN, INotifyPropertyChanged, ITN, IEN, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// TN finalizer.
        /// </summary>
        ~TN()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// TN constructor.
        /// </summary>
        public TN()
        {
            element = new HL7SDK.Xml.Cda.TN();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// TN constructor.
        /// </summary>
        internal TN(HL7SDK.Xml.Cda.TN element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type TN
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.TN Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.TN;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.TN();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The ITSCollection interface.
    /// </summary>

    [Guid("5f289117-c660-4eaf-aefe-5fcfa8c420e4")]

    public partial interface ITS : IHL73Object, ICDAObject, IQTY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.ITS))]
    [Guid("d96bdcb7-7a20-4487-9eab-f3a240f9320c")]
    public partial class TS : HL7SDK.Cda.QTY, INotifyPropertyChanged, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// TS finalizer.
        /// </summary>
        ~TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// TS constructor.
        /// </summary>
        public TS()
        {
            element = new HL7SDK.Xml.Cda.TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// TS constructor.
        /// </summary>
        internal TS(HL7SDK.Xml.Cda.TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.TS;
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public string Value
        {
            get
            {
                return Element.value;
            }
            set
            {
                Element.value = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
    
    /// <summary>
    /// The IURLCollection interface.
    /// </summary>

    [Guid("8748fc0c-2d9d-46c2-beb7-5d93382cf612")]

    public partial interface IURL : IHL73Object, ICDAObject, IANY
    {
        
        /// <summary>
        /// Gets the XML text of the CDA URL object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The URL class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IURL))]
    [Guid("d739887d-daed-4921-b826-196aea4be859")]
    public abstract partial class URL : HL7SDK.Cda.ANY, INotifyPropertyChanged, IURL, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// URL finalizer.
        /// </summary>
        ~URL()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// URL constructor.
        /// </summary>
        public URL()
        {
        }
        
        /// <summary>
        /// URL constructor.
        /// </summary>
        internal URL(HL7SDK.Xml.Cda.URL element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type URL
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.URL Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.URL;
            }
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        public string Value
        {
            get
            {
                return Element.value;
            }
            set
            {
                Element.value = value;
            }
        }
    }
    
    /// <summary>
    /// The IUVP_TSCollection interface.
    /// </summary>

    [Guid("c11655d4-ae7d-4f34-b763-0ce7703073a3")]

    public partial interface IUVP_TS : IHL73Object, ICDAObject, ITS
    {
        
        /// <summary>
        /// Gets the XML text of the CDA UVP_TS object.
        /// </summary>
        [DispId(1001)]
        [Browsable(false)]
        new string Xml
        {
            get;
        }
        
        /// <summary>
        /// Provides support for lazy intialization of element properties.
        /// </summary>
        [DispId(1002)]
        [Browsable(false)]
        new bool Lazy
        {
            get;
            set;
        }
        
        [DispId(2000)]
        [Browsable(false)]
        new IHL73ObjectCollection ChildObjects
        {
            get;
        }
        
        /// <summary>
        /// The probability property.
        /// </summary>
        double Probability
        {
            get;
            set;
        }
        
        /// <summary>
        /// The probabilitySpecified property.
        /// </summary>
        bool ProbabilitySpecified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property.
        /// </summary>
        new string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nullFlavor property.
        /// </summary>
        new string NullFlavor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Returns a string that represents this object.
        /// </summary>
        [DispId(0)]
        new string ToString();
        
        [DispId(1000)]
        new bool Equals([MarshalAs(UnmanagedType.IDispatch)] Object obj);
    }
    
    /// <summary>
    /// The UVP_TS class.
    /// </summary>

    [ClassInterface(ClassInterfaceType.None)]
    [ComDefaultInterface(typeof(HL7SDK.Cda.IUVP_TS))]
    [Guid("77c5d215-b52e-4af6-8c52-c7dfd056cae2")]
    public partial class UVP_TS : HL7SDK.Cda.TS, INotifyPropertyChanged, IUVP_TS, ITS, IQTY, IANY, ICDAObject, IHL73Object
    {
        
        /// <summary>
        /// UVP_TS finalizer.
        /// </summary>
        ~UVP_TS()
        {
            Element.PropertyChanged -= new PropertyChangedEventHandler(this.RaisePropertyChanged);
        }

        
        /// <summary>
        /// UVP_TS constructor.
        /// </summary>
        public UVP_TS()
        {
            element = new HL7SDK.Xml.Cda.UVP_TS();
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// UVP_TS constructor.
        /// </summary>
        internal UVP_TS(HL7SDK.Xml.Cda.UVP_TS element, HL73Object parent)
        {
            this.element = element;
            this.parent = parent;
            Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            OnCreate();
        }
        
        /// <summary>
        /// Strongly typed Element of type UVP_TS
        /// </summary>
        [Browsable(false)]
        internal new virtual HL7SDK.Xml.Cda.UVP_TS Element
        {
            get
            {
                return element as HL7SDK.Xml.Cda.UVP_TS;
            }
        }
        
        /// <summary>
        /// The probability property.
        /// </summary>
        public double Probability
        {
            get
            {
                return Element.probability;
            }
            set
            {
                Element.probability = value;
            }
        }
        
        /// <summary>
        /// The probabilitySpecified property.
        /// </summary>
        public bool ProbabilitySpecified
        {
            get
            {
                return Element.probabilitySpecified;
            }
            set
            {
                Element.probabilitySpecified = value;
            }
        }
        
        /// <summary>
        /// Initializes the element.
        /// </summary>
        protected override void InternalLazyInitElement()
        {
            if (this.element == null)
            {
                element = new HL7SDK.Xml.Cda.UVP_TS();
                Element.PropertyChanged += new PropertyChangedEventHandler(this.RaisePropertyChanged);
            }
        }
    }
}
